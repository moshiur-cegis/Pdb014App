// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pdb014App.Repository;

namespace Pdb014App.Repository.Migrations.UserDb
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20200503073438_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.LookUpUserActivationStatus", b =>
                {
                    b.Property<int>("UserActivationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserActivationStatusId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserActivationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("UserActivationStatusId");

                    b.ToTable("UserActivationStatus");
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.LookUpUserBpdbDivision", b =>
                {
                    b.Property<int>("BpdbDivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BpdbDivisionId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BpdbDivisionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("BpdbDivisionId");

                    b.ToTable("UserBpdbDivision");
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.LookUpUserBpdbEmployee", b =>
                {
                    b.Property<int>("BpdbEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BpdbEmployeeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BpdbDivisionId")
                        .HasColumnName("BpdbDivisionId")
                        .HasColumnType("int");

                    b.Property<string>("BpdbEmpDesignation")
                        .HasMaxLength(100);

                    b.Property<string>("BpdbEmployeeLevel")
                        .HasMaxLength(100);

                    b.Property<string>("CircleCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SnDCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SubstationId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ZoneCode")
                        .HasColumnName("ZoneCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("BpdbEmployeeId");

                    b.HasIndex("BpdbDivisionId");

                    b.ToTable("UserBpdbEmployee");
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.LookUpUserContentType", b =>
                {
                    b.Property<int>("ContentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContentTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ContentTypeId");

                    b.ToTable("UserContentType");
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.LookUpUserGroup", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<int>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasAlternateKey("UserGroupId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("UserRoleList");
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.LookUpUserPermissionType", b =>
                {
                    b.Property<int>("PermissionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PermissionTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PermissionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("PermissionTypeId");

                    b.ToTable("UserPermissionType");
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.LookUpUserSecurityQuestion", b =>
                {
                    b.Property<int>("UserSecurityQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserSecurityQuestionId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserSecurityQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("UserSecurityQuestionId");

                    b.ToTable("UserSecurityQuestion");
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.LookUpUsersPermittedContent", b =>
                {
                    b.Property<int>("UsersPermittedContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UsersPermittedContentId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ContentDescription")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ContentName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ContentTitle")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("ContentTypeId")
                        .HasColumnName("ContentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ModelName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("UsersPermittedContentId");

                    b.HasIndex("ContentTypeId");

                    b.ToTable("UsersPermittedContent");
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.TblUserGrpWisePermissionDetail", b =>
                {
                    b.Property<int>("PermissionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PermissionTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Id");

                    b.Property<int>("UserGroupId")
                        .HasColumnName("UserGroupId")
                        .HasColumnType("int");

                    b.Property<int>("UsersPermittedContentId")
                        .HasColumnName("UsersPermittedContentId")
                        .HasColumnType("int");

                    b.HasKey("PermissionTypeId");

                    b.HasIndex("Id");

                    b.HasIndex("UsersPermittedContentId");

                    b.ToTable("UserGrpWisePermissionDetail");
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.TblUserGrpWiseUsersDistribution", b =>
                {
                    b.Property<int>("UserDistributionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserDistributionId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Id");

                    b.Property<int?>("UserGroupId")
                        .IsRequired()
                        .HasColumnName("UserGroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDistributionId");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserGrpWiseUsersDistribution");
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.TblUserLogHistory", b =>
                {
                    b.Property<int>("UserLogHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserLogHistoryId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LogOutDateTime");

                    b.Property<DateTime>("LoginDateTime");

                    b.Property<string>("LoginNotes")
                        .HasMaxLength(100);

                    b.Property<string>("ServerOrIPAddress")
                        .HasMaxLength(100);

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserLogHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogHistory");
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.TblUserProfileDetail", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BpdbEmployeeId")
                        .HasColumnName("BpdbEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Id");

                    b.Property<bool>("IsBpdbEmployee");

                    b.Property<bool>("IsProfileSubmitted");

                    b.Property<string>("SecurityQuestionAnswer")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("SignatureFileName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("UserAddress")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("UserAlternateEmail");

                    b.Property<string>("UserAlternateMobile");

                    b.Property<DateTime?>("UserDateOfBirth");

                    b.Property<string>("UserDesignation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("UserFullName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("UserNID")
                        .HasMaxLength(100);

                    b.Property<string>("UserProfession")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("UserRegistrationId")
                        .HasColumnName("UserRegistrationId")
                        .HasColumnType("int");

                    b.Property<int?>("UserSecurityQuestionId")
                        .HasColumnName("UserSecurityQuestionId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("BpdbEmployeeId");

                    b.HasIndex("Id");

                    b.HasIndex("UserSecurityQuestionId");

                    b.ToTable("UserProfileDetail");
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.TblUserRegistrationDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("DateOfCreation");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsVerified");

                    b.Property<DateTime?>("LastModifiedDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int?>("UserActivationStatusId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserNames")
                        .HasMaxLength(100);

                    b.Property<int>("UserRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserRegistrationId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasAlternateKey("UserRegistrationId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserActivationStatusId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Pdb014App.Models.UserManage.LookUpUserGroup")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pdb014App.Models.UserManage.TblUserRegistrationDetail")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pdb014App.Models.UserManage.TblUserRegistrationDetail")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Pdb014App.Models.UserManage.LookUpUserGroup")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.UserManage.TblUserRegistrationDetail")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pdb014App.Models.UserManage.TblUserRegistrationDetail")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.LookUpUserBpdbEmployee", b =>
                {
                    b.HasOne("Pdb014App.Models.UserManage.LookUpUserBpdbDivision", "pUserBpdbDivision")
                        .WithMany()
                        .HasForeignKey("BpdbDivisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.LookUpUsersPermittedContent", b =>
                {
                    b.HasOne("Pdb014App.Models.UserManage.LookUpUserContentType", "UsersPermittedContentToUserContentType")
                        .WithMany()
                        .HasForeignKey("ContentTypeId");
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.TblUserGrpWisePermissionDetail", b =>
                {
                    b.HasOne("Pdb014App.Models.UserManage.LookUpUserGroup", "UserGrpWisePermissionDetailToUserGroup")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.HasOne("Pdb014App.Models.UserManage.LookUpUsersPermittedContent", "UserGrpWisePermissionDetailToUsersPermittedContent")
                        .WithMany()
                        .HasForeignKey("UsersPermittedContentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.TblUserGrpWiseUsersDistribution", b =>
                {
                    b.HasOne("Pdb014App.Models.UserManage.LookUpUserGroup", "UserGrpWiseUsersDistributionToUserGroup")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.HasOne("Pdb014App.Models.UserManage.TblUserProfileDetail", "UserGrpWiseUsersDistributionToUserProfileDetail")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.TblUserLogHistory", b =>
                {
                    b.HasOne("Pdb014App.Models.UserManage.TblUserProfileDetail", "UserLogHistoryToUserProfileDetail")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.TblUserProfileDetail", b =>
                {
                    b.HasOne("Pdb014App.Models.UserManage.LookUpUserBpdbEmployee", "UserProfileDetailToUserBpdbEmployee")
                        .WithMany()
                        .HasForeignKey("BpdbEmployeeId");

                    b.HasOne("Pdb014App.Models.UserManage.TblUserRegistrationDetail", "UserProfileDetailToUserRegistrationDetail")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.HasOne("Pdb014App.Models.UserManage.LookUpUserSecurityQuestion", "UserSecurityQuestion")
                        .WithMany()
                        .HasForeignKey("UserSecurityQuestionId");
                });

            modelBuilder.Entity("Pdb014App.Models.UserManage.TblUserRegistrationDetail", b =>
                {
                    b.HasOne("Pdb014App.Models.UserManage.LookUpUserActivationStatus", "UserRegistrationDetailToUserActivationStatus")
                        .WithMany()
                        .HasForeignKey("UserActivationStatusId");
                });
#pragma warning restore 612, 618
        }
    }
}
