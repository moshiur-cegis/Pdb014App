// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pdb014App.Repository;

namespace Pdb014App.Repository.Migrations.PdbDb
{
    [DbContext(typeof(PdbDbContext))]
    [Migration("20190409085101_UpdatePole2")]
    partial class UpdatePole2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pdb014App.Models.PDB.ConductorModels.LookUpConductorType", b =>
                {
                    b.Property<string>("ConductorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ConductorTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ConductorTypeId");

                    b.ToTable("LookUpConductorType");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.ConductorModels.TblConductor", b =>
                {
                    b.Property<string>("ConductorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AssemblyCode")
                        .HasColumnName("AssemblyCode")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CodeName")
                        .HasColumnName("CodeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ConductorCapacityAmp")
                        .HasColumnName("ConductorCapacityAmp")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ConductorCrossSection")
                        .HasColumnName("ConductorCrossSection")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ConductorName")
                        .HasColumnName("ConductorName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ConductorTypeId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CrossSectionalAreaOfConducto")
                        .HasColumnName("CrossSectionalAreaOfConducto")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("InstallDate")
                        .HasColumnName("InstallDate")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Installation")
                        .HasColumnName("Installation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Material")
                        .HasColumnName("Material")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MaximumDcResistanceOfConductorAt20DegC")
                        .HasColumnName("MaximumDcResistanceOfConductorAt20DegC")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumBreakingLoadOfConductor")
                        .HasColumnName("MinimumBreakingLoadOfConductor")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NeutralMaterial")
                        .HasColumnName("NeutralMaterial")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NeutralSize")
                        .HasColumnName("NeutralSize")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NominalAluminumCrossSectionalArea")
                        .HasColumnName("NominalAluminumCrossSectionalArea")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NominalSteelCrossSectionalArea")
                        .HasColumnName("NominalSteelCrossSectionalArea")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NominalVoltage")
                        .HasColumnName("NominalVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NumberOrDiameterOfAluminum")
                        .HasColumnName("NumberOrDiameterOfAluminum")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NumberOrdiameterOfSteel")
                        .HasColumnName("NumberOrdiameterOfSteel")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("OperatingVoltage")
                        .HasColumnName("OperatingVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("OverallDiameter")
                        .HasColumnName("OverallDiameter")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PhaseOrientation")
                        .HasColumnName("PhaseOrientation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PhasingCode")
                        .HasColumnName("PhasingCode")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PoleId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Standard")
                        .HasColumnName("Standard")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("TotalSanctionedLoadFromTheFeeder")
                        .HasColumnName("TotalSanctionedLoadFromTheFeeder")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("WeightOfConductor")
                        .HasColumnName("WeightOfConductor")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ConductorId");

                    b.HasIndex("ConductorTypeId");

                    b.HasIndex("PoleId");

                    b.ToTable("TblConductor");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.CopperCableModels.LookUpCopperCablesType", b =>
                {
                    b.Property<string>("CopperCablesTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CopperCablesTypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("CopperCablesTypeId");

                    b.ToTable("LookUpCopperCablesType");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.CopperCableModels.TblCopperCables", b =>
                {
                    b.Property<string>("CopperCablesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ApproximateOuterDiameter")
                        .HasColumnName("ApproximateOuterDiameter")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ApproximateWeight")
                        .HasColumnName("ApproximateWeight")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CableSize")
                        .HasColumnName("CableSize")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ColorofSheath")
                        .HasColumnName("ColorofSheath")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContinuousPermissibleServiceVoltage")
                        .HasColumnName("ContinuousPermissibleServiceVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CopperCablesTypeId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CurrentRatingAt30degCambientTemperatureUorG")
                        .HasColumnName("CurrentRatingAt30degCambientTemperatureUorG")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CurrentRatingat35degCambientinAir")
                        .HasColumnName("CurrentRatingat35degCambientinAir")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Material")
                        .HasColumnName("Material")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaximumResistanceat30degC")
                        .HasColumnName("MaximumResistanceat30degC")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalThicknessofInsulation")
                        .HasColumnName("NominalThicknessofInsulation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalThicknessofSheath")
                        .HasColumnName("NominalThicknessofSheath")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NumbersAndDiameterofWires")
                        .HasColumnName("NumbersAndDiameterofWires")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PoleId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CopperCablesId");

                    b.HasIndex("CopperCablesTypeId");

                    b.HasIndex("PoleId");

                    b.ToTable("TblCopperCables");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.DistributionTransformerModel.TblDistributionTransformer", b =>
                {
                    b.Property<string>("DistributionTransformerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AmpereRatingasPerNamePlateofMCCBforCKT1")
                        .HasColumnName("AmpereRatingasPerNamePlateofMCCBforCKT1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AmpereRatingasPerNameplateOfMCCBForCKT2")
                        .HasColumnName("AmpereRatingasPerNameplateOfMCCBForCKT2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BNVoltageVolt1")
                        .HasColumnName("BNVoltageVolt1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BNVoltageVolt2")
                        .HasColumnName("BNVoltageVolt2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BPhaseCurrentAmps1Ckt1")
                        .HasColumnName("BPhaseCurrentAmps1Ckt1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BPhaseCurrentAmps1Ckt2")
                        .HasColumnName("BPhaseCurrentAmps1Ckt2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BPhaseCurrentAmps1Ckt3")
                        .HasColumnName("BPhaseCurrentAmps1Ckt3")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BPhaseCurrentAmps2Ckt1")
                        .HasColumnName("BPhaseCurrentAmps2Ckt1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BPhaseCurrentAmps2Ckt2")
                        .HasColumnName("BPhaseCurrentAmps2Ckt2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BPhaseCurrentAmps2Ckt3")
                        .HasColumnName("BPhaseCurrentAmps2Ckt3")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BodyColourCondition")
                        .HasColumnName("BodyColourCondition")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CalculatedDayPeakkVA")
                        .HasColumnName("CalculatedDayPeakkVA")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CalculatedEveningPeakkVA")
                        .HasColumnName("CalculatedEveningPeakkVA")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConditionofDistributionBox")
                        .HasColumnName("ConditionofDistributionBox")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConditionofDropOutFuseBphase")
                        .HasColumnName("ConditionofDropOutFuseBphase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConditionofDropOutFuseRphase")
                        .HasColumnName("ConditionofDropOutFuseRphase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConditionofDropOutFuseYphase")
                        .HasColumnName("ConditionofDropOutFuseYphase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConditionofHTDropGoodbsBad")
                        .HasColumnName("ConditionofHTDropGoodbsBad")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConditionofLTDropGoodbsBadCKT1")
                        .HasColumnName("ConditionofLTDropGoodbsBadCKT1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConditionofLTDropGoodbsBadCKT2")
                        .HasColumnName("ConditionofLTDropGoodbsBadCKT2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConditionofLightingArrestorBphase")
                        .HasColumnName("ConditionofLightingArrestorBphase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConditionofLightingArrestorRphase")
                        .HasColumnName("ConditionofLightingArrestorRphase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConditionofLightingArrestorYphase")
                        .HasColumnName("ConditionofLightingArrestorYphase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConditionofMCCBforCircuit1")
                        .HasColumnName("ConditionofMCCBforCircuit1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConditionofMCCBforCircuit2")
                        .HasColumnName("ConditionofMCCBforCircuit2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConditionofTransformerSupportPoleLeft")
                        .HasColumnName("ConditionofTransformerSupportPoleLeft")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConditionofTransformerSupportPoleRight")
                        .HasColumnName("ConditionofTransformerSupportPoleRight")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContractNo")
                        .HasColumnName("ContractNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ControlVoltage")
                        .HasColumnName("ControlVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DateAndTime2")
                        .HasColumnName("DateAndTime2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DateAndtime1")
                        .HasColumnName("DateAndtime1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DayPeak")
                        .HasColumnName("DayPeak")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DistributionBoxExistbsnotExist")
                        .HasColumnName("DistributionBoxExistbsnotExist")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DropOutFuseExistbsNotExistBphase")
                        .HasColumnName("DropOutFuseExistbsNotExistBphase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DropOutFuseExistbsNotExistRphase")
                        .HasColumnName("DropOutFuseExistbsNotExistRphase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DropOutFuseExistbsNotExistYphase")
                        .HasColumnName("DropOutFuseExistbsNotExistYphase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EarthingLead1")
                        .HasColumnName("EarthingLead1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EarthingLead1ConditionStandard")
                        .HasColumnName("EarthingLead1ConditionStandard")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EarthingLead1Material")
                        .HasColumnName("EarthingLead1Material")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EarthingLead1Size")
                        .HasColumnName("EarthingLead1Size")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EarthingLead2")
                        .HasColumnName("EarthingLead2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EarthingLead2ConditionStandard")
                        .HasColumnName("EarthingLead2ConditionStandard")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EarthingLead2Material")
                        .HasColumnName("EarthingLead2Material")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EarthingLead2Size")
                        .HasColumnName("EarthingLead2Size")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EveningPeak")
                        .HasColumnName("EveningPeak")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ExistingPoleNumberingifAny")
                        .HasColumnName("ExistingPoleNumberingifAny")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FeederLineId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HTBushingBPhaseColor")
                        .HasColumnName("HTBushingBPhaseColor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HTBushingBPhaseGood")
                        .HasColumnName("HTBushingBPhaseGood")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HTBushingBPhaseOil")
                        .HasColumnName("HTBushingBPhaseOil")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HTBushingNPhaseColor")
                        .HasColumnName("HTBushingNPhaseColor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HTBushingNPhaseGood")
                        .HasColumnName("HTBushingNPhaseGood")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HTBushingNPhaseOil")
                        .HasColumnName("HTBushingNPhaseOil")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HTBushingRPhaseColor")
                        .HasColumnName("HTBushingRPhaseColor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HTBushingRPhaseGood")
                        .HasColumnName("HTBushingRPhaseGood")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HTBushingRPhaseOil")
                        .HasColumnName("HTBushingRPhaseOil")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HTBushingYPhaseColor")
                        .HasColumnName("HTBushingYPhaseColor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HTBushingYPhaseGood")
                        .HasColumnName("HTBushingYPhaseGood")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HTBushingYPhaseOil")
                        .HasColumnName("HTBushingYPhaseOil")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InstalledConditionPadbsPoleMounted")
                        .HasColumnName("InstalledConditionPadbsPoleMounted")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InstalledPlaceIndoorbsOutdoor")
                        .HasColumnName("InstalledPlaceIndoorbsOutdoor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LTBushingBPhaseColor")
                        .HasColumnName("LTBushingBPhaseColor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LTBushingBPhaseGood")
                        .HasColumnName("LTBushingBPhaseGood")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LTBushingBPhaseOil")
                        .HasColumnName("LTBushingBPhaseOil")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LTBushingNPhaseColor")
                        .HasColumnName("LTBushingNPhaseColor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LTBushingNPhaseGood")
                        .HasColumnName("LTBushingNPhaseGood")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LTBushingNPhaseOil")
                        .HasColumnName("LTBushingNPhaseOil")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LTBushingRPhaseColor")
                        .HasColumnName("LTBushingRPhaseColor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LTBushingRPhaseGood")
                        .HasColumnName("LTBushingRPhaseGood")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LTBushingRPhaseOil")
                        .HasColumnName("LTBushingRPhaseOil")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LTBushingYPhaseColor")
                        .HasColumnName("LTBushingYPhaseColor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LTBushingYPhaseGood")
                        .HasColumnName("LTBushingYPhaseGood")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LTBushingYPhaseOil")
                        .HasColumnName("LTBushingYPhaseOil")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LeakageVoltageBodyEarthVolt1")
                        .HasColumnName("LeakageVoltageBodyEarthVolt1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LeakageVoltageBodyEarthVolt2")
                        .HasColumnName("LeakageVoltageBodyEarthVolt2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LightningArrestorBphase")
                        .HasColumnName("LightningArrestorBphase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LightningArrestorRphase")
                        .HasColumnName("LightningArrestorRphase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LightningArrestorYphase")
                        .HasColumnName("LightningArrestorYphase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturerTypeOriginofMCCBforCircuit1")
                        .HasColumnName("ManufacturerTypeOriginofMCCBforCircuit1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturerTypeOriginofMCCBforCircuit2")
                        .HasColumnName("ManufacturerTypeOriginofMCCBforCircuit2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MotorVoltageforspringcharge")
                        .HasColumnName("MotorVoltageforspringcharge")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NameOf33bs11kVSubdsstation")
                        .HasColumnName("NameOf33bs11kVSubdsstation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NameoBodyColour")
                        .HasColumnName("NameoBodyColour")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Nameof11kVFeeder")
                        .HasColumnName("Nameof11kVFeeder")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NameofManufacturer")
                        .HasColumnName("NameofManufacturer")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NearestHoldingbsHouseNobsShop")
                        .HasColumnName("NearestHoldingbsHouseNobsShop")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NeutralCurrentAmps1Ckt1")
                        .HasColumnName("NeutralCurrentAmps1Ckt1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NeutralCurrentAmps1Ckt2")
                        .HasColumnName("NeutralCurrentAmps1Ckt2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NeutralCurrentAmps1Ckt3")
                        .HasColumnName("NeutralCurrentAmps1Ckt3")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NeutralCurrentAmps2Ckt2")
                        .HasColumnName("NeutralCurrentAmps2Ckt2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NeutralCurrentAmps2Ckt3")
                        .HasColumnName("NeutralCurrentAmps2Ckt3")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NeutralCurrentAmpsCkt1")
                        .HasColumnName("NeutralCurrentAmpsCkt1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoOfMCCB")
                        .HasColumnName("NoOfMCCB")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OilLeakageYesOrNo")
                        .HasColumnName("OilLeakageYesOrNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OwneroftheTransformerBPDBbsConsumer")
                        .HasColumnName("OwneroftheTransformerBPDBbsConsumer")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PlaceofOilLeakageMark")
                        .HasColumnName("PlaceofOilLeakageMark")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PlatformMaterialAnglbsChannel")
                        .HasColumnName("PlatformMaterialAnglbsChannel")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PlatformStandardbsNonStandardGoodBad")
                        .HasColumnName("PlatformStandardbsNonStandardGoodBad")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PoleId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PoleStructureMountedSurgearrestorId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RBVoltageVolt1")
                        .HasColumnName("RBVoltageVolt1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RBVoltageVolt2")
                        .HasColumnName("RBVoltageVolt2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RNVoltageVolt1")
                        .HasColumnName("RNVoltageVolt1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RNVoltageVolt2")
                        .HasColumnName("RNVoltageVolt2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RPhaseCurrentAmps1Ckt1")
                        .HasColumnName("RPhaseCurrentAmps1Ckt1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RPhaseCurrentAmps1Ckt2")
                        .HasColumnName("RPhaseCurrentAmps1Ckt2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RPhaseCurrentAmps1Ckt3")
                        .HasColumnName("RPhaseCurrentAmps1Ckt3")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RPhaseCurrentAmps2Ckt1")
                        .HasColumnName("RPhaseCurrentAmps2Ckt1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RPhaseCurrentAmps2Ckt2")
                        .HasColumnName("RPhaseCurrentAmps2Ckt2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RPhaseCurrentAmps2Ckt3")
                        .HasColumnName("RPhaseCurrentAmps2Ckt3")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RYVoltageVolt1")
                        .HasColumnName("RYVoltageVolt1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RYVoltageVolt2")
                        .HasColumnName("RYVoltageVolt2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedHTCurrent")
                        .HasColumnName("RatedHTCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedHTVoltage")
                        .HasColumnName("RatedHTVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedLTCurrent")
                        .HasColumnName("RatedLTCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedLTVoltage")
                        .HasColumnName("RatedLTVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedVoltage")
                        .HasColumnName("RatedVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Recommendation")
                        .HasColumnName("Recommendation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SNDIdentificationNo")
                        .HasColumnName("SNDIdentificationNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TransformerKVARating")
                        .HasColumnName("TransformerKVARating")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TransformerSerialNo")
                        .HasColumnName("TransformerSerialNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeofTransformerSupportPoleLeft")
                        .HasColumnName("TypeofTransformerSupportPoleLeft")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeofTransformerSupportPoleRight")
                        .HasColumnName("TypeofTransformerSupportPoleRight")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Voltage1")
                        .HasColumnName("Voltage1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Voltage2")
                        .HasColumnName("Voltage2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WireSizeofHTDrop")
                        .HasColumnName("WireSizeofHTDrop")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WirebsCableSizeofLTDropCKT1")
                        .HasColumnName("WirebsCableSizeofLTDropCKT1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WirebsCableSizeofLTDropCKT2")
                        .HasColumnName("WirebsCableSizeofLTDropCKT2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("YBVoltageVolt1")
                        .HasColumnName("YBVoltageVolt1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("YBVoltageVolt2")
                        .HasColumnName("YBVoltageVolt2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("YNVoltageVolt")
                        .HasColumnName("YNVoltageVolt")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("YNVoltageVolt1")
                        .HasColumnName("YNVoltageVolt1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("YPhaseCurrentAmps1Ckt1")
                        .HasColumnName("YPhaseCurrentAmps1Ckt1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("YPhaseCurrentAmps1Ckt2")
                        .HasColumnName("YPhaseCurrentAmps1Ckt2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("YPhaseCurrentAmps1Ckt3")
                        .HasColumnName("YPhaseCurrentAmps1Ckt3")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("YPhaseCurrentAmps2Ckt1")
                        .HasColumnName("YPhaseCurrentAmps2Ckt1")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("YPhaseCurrentAmps2Ckt2")
                        .HasColumnName("YPhaseCurrentAmps2Ckt2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("YPhaseCurrentAmps2Ckt3")
                        .HasColumnName("YPhaseCurrentAmps2Ckt3")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("YearofManufacturing")
                        .HasColumnName("YearOfManufacturing")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("DistributionTransformerId");

                    b.HasIndex("FeederLineId");

                    b.HasIndex("PoleId");

                    b.HasIndex("PoleStructureMountedSurgearrestorId");

                    b.ToTable("TblDistributionTransformer");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.DistributionTransformerModel.TblDistributionTransformerPicture", b =>
                {
                    b.Property<string>("DistributionTransformerPictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DistributionTransformerId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PictureLocation")
                        .HasColumnName("PictureLocation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PictureName")
                        .HasColumnName("PictureName")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("DistributionTransformerPictureId");

                    b.HasIndex("DistributionTransformerId");

                    b.ToTable("TblDistributionTransformerPicture");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.DistributionTransformerModel.TblPoleStructureMountedSurgeArrestor", b =>
                {
                    b.Property<string>("PoleStructureMountedSurgeArrestorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Application")
                        .HasColumnName("Application")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BasicInsulationlevelBILat12or50MicroSecImpulses")
                        .HasColumnName("BasicInsulationlevelBILat12or50MicroSecImpulses")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Class")
                        .HasColumnName("Class")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Construction")
                        .HasColumnName("Construction")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CreepageDistance")
                        .HasColumnName("CreepageDistance")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HighCurrentWithstand")
                        .HasColumnName("HighCurrentWithstand")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Installation")
                        .HasColumnName("Installation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LightningImpulseResidualVoltageAt8or20MicrosecCurrentWave")
                        .HasColumnName("LightningImpulseResidualVoltageAt8or20MicrosecCurrentWave")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaximumSystemVoltage")
                        .HasColumnName("MaximumSystemVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalRatedVoltage")
                        .HasColumnName("NominalRatedVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PressureReliefClass")
                        .HasColumnName("PressureReliefClass")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedArresterCurrent")
                        .HasColumnName("RatedArresterCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedArresterVoltage")
                        .HasColumnName("RatedArresterVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Standard")
                        .HasColumnName("Standard")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SystemFrequency")
                        .HasColumnName("SystemFrequency")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeofSystem")
                        .HasColumnName("TypeofSystem")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeorModel")
                        .HasColumnName("TypeorModel")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("PoleStructureMountedSurgeArrestorId");

                    b.ToTable("TblPoleStructureMountedSurgearrestor");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.InsulatorModels.LookUpAacInsulatorType", b =>
                {
                    b.Property<int>("AacInsulatorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AacInsulatorTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AacInsulatorTypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("AacInsulatorTypeId");

                    b.ToTable("LookUpAacInsulatorType");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.InsulatorModels.LookUpInsulatorDiskType", b =>
                {
                    b.Property<int>("InsulatorDiskTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InsulatorDiskTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InsulatorDiskTypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("InsulatorDiskTypeId");

                    b.ToTable("LookUpInsulatorDiskType");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.InsulatorModels.LookUpInsulatorPinAndPostType", b =>
                {
                    b.Property<int>("InsulatorPinAndPostTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InsulatorPinAndPostTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InsulatorPinAndPostTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("InsulatorPinAndPostTypeId");

                    b.ToTable("LookUpInsulatorPinAndPostType");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.InsulatorModels.LookUpInsulatorShackleOrGuyType", b =>
                {
                    b.Property<int>("InsulatorShackleOrGuyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InsulatorShackleOrGuyTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InsulatorShackleOrGuyTypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("InsulatorShackleOrGuyTypeId");

                    b.ToTable("LookUpInsulatorShackleOrGuyType");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.InsulatorModels.TblAacInsulator", b =>
                {
                    b.Property<int>("AacInsulatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AacInsulatorId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AacInsulatorTypeId")
                        .HasColumnName("AacInsulatorTypeId")
                        .HasColumnType("int");

                    b.Property<string>("AssemblyCode")
                        .HasColumnName("AssemblyCode")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CodeName")
                        .HasColumnName("CodeName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConductorCapacityAmp")
                        .HasColumnName("ConductorCapacityAmp")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConductorCrossSection")
                        .HasColumnName("ConductorCrossSection")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CrossSectionalAreaofConductors")
                        .HasColumnName("CrossSectionalAreaofConductors")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FeederID")
                        .HasColumnName("FeederID")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InstallDate")
                        .HasColumnName("InstallDate")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Installation")
                        .HasColumnName("Installation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Material")
                        .HasColumnName("Material")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaximumDCResistanceofConductorAt20deC")
                        .HasColumnName("MaximumDCResistanceofConductorAt20deC")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MinimumbreakingLoadofConductor")
                        .HasColumnName("MinimumbreakingLoadofConductor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MinimumbreakingLoadofConductorType")
                        .HasColumnName("MinimumbreakingLoadofConductorType")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NameoftheConductor")
                        .HasColumnName("NameoftheConductor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NeutralMaterial")
                        .HasColumnName("NeutralMaterial")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NeutralSize")
                        .HasColumnName("NeutralSize")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalAluminumCrossSectionalArea")
                        .HasColumnName("NominalAluminumCrossSectionalArea")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalSteelCrossSectionalArea")
                        .HasColumnName("NominalSteelCrossSectionalArea")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalVoltage")
                        .HasColumnName("NominalVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NumberorDiameterofAluminum")
                        .HasColumnName("NumberorDiameterofAluminum")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NumberorDiameterofSteel")
                        .HasColumnName("NumberorDiameterofSteel")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OperatingVoltage")
                        .HasColumnName("OperatingVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OverallDiameter")
                        .HasColumnName("OverallDiameter")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhaseOrientation")
                        .HasColumnName("PhaseOrientation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhasingCode")
                        .HasColumnName("PhasingCode")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PoleId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Standard")
                        .HasColumnName("Standard")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TotalSanctionedLoadfromtheFeeder")
                        .HasColumnName("TotalSanctionedLoadfromtheFeeder")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Type")
                        .HasColumnName("Type")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WeightofConductor")
                        .HasColumnName("WeightofConductor")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("AacInsulatorId");

                    b.HasIndex("AacInsulatorTypeId");

                    b.HasIndex("PoleId");

                    b.ToTable("TblAacInsulator");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.InsulatorModels.TblInsulatorDisk", b =>
                {
                    b.Property<int>("InsulatorDisktId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InsulatorDisktId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CouplingSize")
                        .HasColumnName("CouplingSize")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("DiameterOfInsulator")
                        .HasColumnName("DiameterOfInsulator")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FiftyPctImpulseFlashoverWaveNegative")
                        .HasColumnName("FiftyPctImpulseFlashoverWaveNegative")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FiftyPctImpulseFlashoverWavePositive")
                        .HasColumnName("FiftyPctImpulseFlashoverWavePositive")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ImpulseWithstandVoltage")
                        .HasColumnName("ImpulseWithstandVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Installation")
                        .HasColumnName("Installation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("InsulatorDiskTypeId")
                        .HasColumnName("InsulatorDiskTypeId")
                        .HasColumnType("int");

                    b.Property<string>("MaximumSystemVoltage")
                        .HasColumnName("MaximumSystemVoltage ")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumCreepageDistance")
                        .HasColumnName("MinimumCreepageDistance")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumDryArchingDistance")
                        .HasColumnName("MinimumDryArchingDistance")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumElectromechanicalStrength")
                        .HasColumnName("MinimumElectromechanicalStrength")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumMechanicalFailingLoad")
                        .HasColumnName("MinimumMechanicalFailingLoad")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumPowerFrequencyFlashoverDry")
                        .HasColumnName("MinimumPowerFrequencyFlashoverDry")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumPowerFrequencyFlashoverWet")
                        .HasColumnName("MinimumPowerFrequencyFlashoverWet")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumRadioInfluenceVoltageRIVAt1000KcInMicroVolt")
                        .HasColumnName("MinimumRadioInfluenceVoltageRIVAt1000KcInMicroVolt")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumUnitSpacing")
                        .HasColumnName("MinimumUnitSpacing")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumWithstandVoltage")
                        .HasColumnName("MinimumWithstandVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NominalSystemVoltage")
                        .HasColumnName("NominalSystemVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NumberOfDiskPerString")
                        .HasColumnName("NumberOfDiskPerString")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PoleId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PowerFrequencyDry")
                        .HasColumnName("PowerFrequencyDry")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PowerFrequencyPuncherVoltage")
                        .HasColumnName("PowerFrequencyPuncherVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PowerFrequencyTestVoltageRmsToGround")
                        .HasColumnName("PowerFrequencyTestVoltageRmsToGround")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PowerFrequencyWet")
                        .HasColumnName("PowerFrequencyWet")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("TypeOfInsulator")
                        .HasColumnName("LookUpTypeOfInsulator")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("TypeOfSystem")
                        .HasColumnName("TypeOfSystem")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("InsulatorDisktId");

                    b.HasIndex("InsulatorDiskTypeId");

                    b.HasIndex("PoleId");

                    b.ToTable("TblInsulatorDisk");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.InsulatorModels.TblInsulatorPinAndPost", b =>
                {
                    b.Property<int>("InsulatorPinAndPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InsulatorPinAndPostId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FiftyPctImpulseFlashoverWaveNegative")
                        .HasColumnName("FiftyPctImpulseFlashoverWaveNegative")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FiftyPctImpulseFlashoverWavePositive")
                        .HasColumnName("FiftyPctImpulseFlashoverWavePositive")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ImpulseWithstandVoltage")
                        .HasColumnName("ImpulseWithstandVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Installation")
                        .HasColumnName("Installation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("InsulatorMaterials")
                        .HasColumnName("InsulatorMaterials")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("InsulatorPinAndPostTypeId")
                        .HasColumnName("InsulatorPinAndPostTypeId")
                        .HasColumnType("int");

                    b.Property<string>("InsulatorVoltageClass")
                        .HasColumnName("InsulatorVoltageClass")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MaximumSystemVoltage")
                        .HasColumnName("MaximumSystemVoltage ")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumCreepageDistance")
                        .HasColumnName("MinimumCreepageDistance")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumDiameterOfInsulator")
                        .HasColumnName("MinimumDiameterOfInsulator")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumDryArchingDistance")
                        .HasColumnName("MinimumDryArchingDistance")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumGroveDiameter")
                        .HasColumnName("MinimumGroveDiameter")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumHeightOfTheInsulator")
                        .HasColumnName("MinimumHeightOfTheInsulator")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumMechanicalFailingLoad")
                        .HasColumnName("MinimumMechanicalFailingLoad")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumNeckDiameter")
                        .HasColumnName("MinimumNeckDiameter")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumPowerFrequencyFlashoverDry")
                        .HasColumnName("MinimumPowerFrequencyFlashoverDry")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumPowerFrequencyFlashoverWet")
                        .HasColumnName("MinimumPowerFrequencyFlashoverWet")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumRadioInfluenceVoltageRIVAt1000KcInMicroVolt")
                        .HasColumnName("MinimumRadioInfluenceVoltageRIVAt1000KcInMicroVolt")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumWithstandVoltage")
                        .HasColumnName("MinimumWithstandVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NominalSystemVoltage")
                        .HasColumnName("NominalSystemVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PoleId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PowerFrequencyDry")
                        .HasColumnName("PowerFrequencyDry")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PowerFrequencyPuncherVoltage")
                        .HasColumnName("PowerFrequencyPuncherVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PowerFrequencyTestVoltageRmsToGround")
                        .HasColumnName("PowerFrequencyTestVoltageRmsToGround")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PowerFrequencyWet")
                        .HasColumnName("PowerFrequencyWet")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("TypeOfSystem")
                        .HasColumnName("TypeOfSystem")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("InsulatorPinAndPostId");

                    b.HasIndex("InsulatorPinAndPostTypeId");

                    b.HasIndex("PoleId");

                    b.ToTable("TblInsulatorPinAndPost");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.InsulatorModels.TblInsulatorShackleOrGuy", b =>
                {
                    b.Property<int>("InsulatorShackleOrGuyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InsulatorShackleOrGuyId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AtmosphericCondition")
                        .HasColumnName("AtmosphericCondition")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Dimension")
                        .HasColumnName("Dimension")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("DryFlashover")
                        .HasColumnName("DryFlashover")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FlashOverVoltage")
                        .HasColumnName("FlashOverVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Installation")
                        .HasColumnName("Installation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("InsulationClass")
                        .HasColumnName("InsulationClass")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("InsulatorShackleOrGuyTypeId")
                        .HasColumnName("InsulatorShackleOrGuyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("MaximumSystemVoltage")
                        .HasColumnName("MaximumSystemVoltage ")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MechanicalStrength")
                        .HasColumnName("MechanicalStrength")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumDiameterOfInsulator")
                        .HasColumnName("MinimumDiameterOfInsulator")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumHeightOfTheInsulator")
                        .HasColumnName("MinimumHeightOfTheInsulator")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MinimumMechanicalFailingLoadTransverse")
                        .HasColumnName("MinimumMechanicalFailingLoadTransverse")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NominalSystemVoltage")
                        .HasColumnName("NominalSystemVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PoleId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PowerFrequencyPunctureVoltage")
                        .HasColumnName("PowerFrequencyPunctureVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("TypeOfSystem")
                        .HasColumnName("TypeOfSystem")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("WetFlashoverHorizontal")
                        .HasColumnName("WetFlashoverHorizontal")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("WetFlashoverVertical")
                        .HasColumnName("WetFlashoverVertical")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("InsulatorShackleOrGuyId");

                    b.HasIndex("InsulatorShackleOrGuyTypeId");

                    b.HasIndex("PoleId");

                    b.ToTable("TblInsulatorShackleOrGuy");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.TblCrossArm", b =>
                {
                    b.Property<string>("CrossArmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Materials")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PoleId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Standard")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("UltimateTensileStrength")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("CrossArmId");

                    b.HasIndex("PoleId");

                    b.ToTable("TblCrossArm");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.LookUpModels.LookUpCircleInfo", b =>
                {
                    b.Property<string>("CircleCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CircleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("SortingNo")
                        .HasColumnName("SortingNo")
                        .HasColumnType("int");

                    b.Property<string>("ZoneCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CircleCode");

                    b.HasIndex("ZoneCode");

                    b.ToTable("LookUpCircleInfo");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.LookUpModels.LookUpRouteInfo", b =>
                {
                    b.Property<string>("RouteCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("SortingNo")
                        .HasColumnName("SortingNo")
                        .HasColumnType("int");

                    b.Property<string>("SubstationId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("RouteCode");

                    b.HasIndex("SubstationId");

                    b.ToTable("LookUpRouteInfo");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.LookUpModels.LookUpSnDInfo", b =>
                {
                    b.Property<string>("SnDCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CircleCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SnDName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("SortingNo")
                        .HasColumnName("SortingNo")
                        .HasColumnType("int");

                    b.HasKey("SnDCode");

                    b.HasIndex("CircleCode");

                    b.ToTable("LookUpSnDInfo");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.LookUpModels.LookUpZoneInfo", b =>
                {
                    b.Property<string>("ZoneCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("SortingNo")
                        .HasColumnName("SortingNo")
                        .HasColumnType("int");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ZoneCode");

                    b.ToTable("LookUpZoneInfo");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.LookUpPoleCondition", b =>
                {
                    b.Property<string>("PoleConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("PoleConditionId");

                    b.ToTable("LookUpPoleCondition");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.LookUpPoleType", b =>
                {
                    b.Property<string>("PoleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("PoleTypeId");

                    b.ToTable("LookUpPoleType");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.LookUpSagCondition", b =>
                {
                    b.Property<string>("SagConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("SagConditionId");

                    b.ToTable("LookUpSagCondition");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.LookUpSideLockTieTerminalClampMerlin", b =>
                {
                    b.Property<string>("SideLockTieTerminalClampMerlinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Materials")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PoleId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SideLockTieTerminalClampMerlinType")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Standard")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("UltimateTensileStrength")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("SideLockTieTerminalClampMerlinId");

                    b.HasIndex("PoleId");

                    b.ToTable("LookUpSideLockTieTerminalClampMerlin");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentMeter", b =>
                {
                    b.Property<int>("DifferentMeterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DifferentMeterId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassOfAccuracy")
                        .HasColumnName("ClassOfAccuracy")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersNameandCountry")
                        .HasColumnName("ManufacturersNameandCountry")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturesModelNo")
                        .HasColumnName("ManufacturesModelNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MeterName")
                        .HasColumnName("MeterName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("MeterTypeId")
                        .HasColumnName("MeterTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RelayTypeId");

                    b.Property<string>("SeparateAmeterforEachPhase")
                        .HasColumnName("SeparateAmeterforEachPhase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeOfMeter")
                        .HasColumnName("TypeOfMeter")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("DifferentMeterId");

                    b.HasIndex("RelayTypeId");

                    b.ToTable("LookUpDifferentMeter");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentRelay", b =>
                {
                    b.Property<int>("DifferentRelayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DifferentRelayId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryOfOrigin")
                        .HasColumnName("CountryOfOrigin")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersModelNo")
                        .HasColumnName("ManufacturersModelNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersName")
                        .HasColumnName("ManufacturersName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("RelayTypeId")
                        .HasColumnName("RelayTypeId")
                        .HasColumnType("int");

                    b.HasKey("DifferentRelayId");

                    b.HasIndex("RelayTypeId");

                    b.ToTable("LookUpDifferentRelay");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentTypesOfMeter", b =>
                {
                    b.Property<int>("MeterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MeterTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MeterTypeName")
                        .HasColumnName("MeterTypeName")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("MeterTypeId");

                    b.ToTable("LookUpDifferentTypesOfMeter");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentTypesOfRelay", b =>
                {
                    b.Property<int>("RelayTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RelayTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RelayTypeName")
                        .HasColumnName("RelayTypeName")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("RelayTypeId");

                    b.ToTable("LookUpDifferentTypesOfRelay");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDimensionAndWeight", b =>
                {
                    b.Property<int>("DimensionAndWeightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DimensionAndWeightId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Depth")
                        .HasColumnName("Depth")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Height")
                        .HasColumnName("Height")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WeightIncludingCircuitBreaker")
                        .HasColumnName("WeightIncludingCircuitBreaker")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Width")
                        .HasColumnName("Width")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("DimensionAndWeightId");

                    b.ToTable("LookUpDimensionAndWeight");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.MeteringPanelModels.LookupAnnuciator", b =>
                {
                    b.Property<int>("AnnuciatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LookupAnnuciatorId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Annunciator")
                        .HasColumnName("Annunciator")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CountryofOrigin")
                        .HasColumnName("CountryofOrigin")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturesModelNo")
                        .HasColumnName("ManufacturesModelNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturesName")
                        .HasColumnName("ManufacturesName")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("AnnuciatorId");

                    b.ToTable("LookupAnnuciator");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.MeteringPanelModels.LookupControlSwitch", b =>
                {
                    b.Property<int>("ControlSwitchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ControlSwitchId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ControlSwitch")
                        .HasColumnName("ControlSwitch")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturesModelTypeNo")
                        .HasColumnName("ManufacturesModelTypeNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturesNameCountry")
                        .HasColumnName("ManufacturesNameCountry")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ControlSwitchId");

                    b.ToTable("LookupControlSwitch");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.MeteringPanelModels.TblMeteringPanel", b =>
                {
                    b.Property<int>("MeteringPanelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MeteringPanelId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AmpereMeterId")
                        .HasColumnName("AmpereMeterId")
                        .HasColumnType("int");

                    b.Property<int?>("AnnuciatorIdForFeeder")
                        .HasColumnName("AnnuciatorIdForFeeder")
                        .HasColumnType("int");

                    b.Property<int?>("AnnuciatorIdForTransformer")
                        .HasColumnName("AnnuciatorIdForTransformer")
                        .HasColumnType("int");

                    b.Property<int?>("AuxiliaryFlagRelayIdForTransformer")
                        .HasColumnName("AuxiliaryFlagRelayIdForTransformer")
                        .HasColumnType("int");

                    b.Property<int?>("ControlSwitchId");

                    b.Property<int?>("ControlSwitchIdForFeeder")
                        .HasColumnName("ControlSwitchIdForFeeder")
                        .HasColumnType("int");

                    b.Property<int?>("ControlSwitchIdForTransformer")
                        .HasColumnName("ControlSwitchIdForTransformer")
                        .HasColumnType("int");

                    b.Property<int?>("DifferentialRelayIdForTransformer")
                        .HasColumnName("DifferentialRelayIdForTransformer")
                        .HasColumnType("int");

                    b.Property<int?>("DimensionAndWeightId")
                        .HasColumnName("DimensionAndWeightId")
                        .HasColumnType("int");

                    b.Property<int?>("IdmtOverCurrentAndEarthFaultRelayId");

                    b.Property<int?>("IdmtOverCurrentAndEarthFaultRelayIdForFeeder")
                        .HasColumnName("IdmtOverCurrentAndEarthFaultRelayIdForFeeder")
                        .HasColumnType("int");

                    b.Property<int?>("IdmtOverCurrentAndEarthFaultRelayIdForTransformer")
                        .HasColumnName("IdmtOverCurrentAndEarthFaultRelayIdForTransformer")
                        .HasColumnType("int");

                    b.Property<int?>("KWHandkVARHMeterId")
                        .HasColumnName("KWHandkVARHMeterId")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturersModelNo")
                        .HasColumnName("ManufacturersModelNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersNameCountryOfOrigin")
                        .HasColumnName("ManufacturersNameCountryOfOrigin")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaximumSystemVoltage")
                        .HasColumnName("MaximumSystemVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("MegaVarMeterId")
                        .HasColumnName("MegaVarMeterId")
                        .HasColumnType("int");

                    b.Property<int?>("MegaWattMeterId")
                        .HasColumnName("MegaWattMeterId")
                        .HasColumnType("int");

                    b.Property<string>("RatedFrequency")
                        .HasColumnName("RatedFrequency")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("RestrictedEarthFaultRelayIdForTransformer")
                        .HasColumnName("RestrictedEarthFaultRelayIdForTransformer")
                        .HasColumnType("int");

                    b.Property<string>("SubstationId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SystemNominalVoltage")
                        .HasColumnName("SystemNominalVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("TripCircuitSupervisionRelayId");

                    b.Property<int?>("TripCircuitSupervisionRelayIdForFeeder")
                        .HasColumnName("TripCircuitSupervisionRelayIdForFeeder")
                        .HasColumnType("int");

                    b.Property<int?>("TripCircuitSupervisionRelayIdForTransformer")
                        .HasColumnName("TripCircuitSupervisionRelayIdForTransformer")
                        .HasColumnType("int");

                    b.Property<int?>("TripRelayId");

                    b.Property<int?>("TripRelayIdForFeeder")
                        .HasColumnName("TripRelayIdForFeeder")
                        .HasColumnType("int");

                    b.Property<int?>("TripRelayIdForTransformer")
                        .HasColumnName("TripRelayIdForTransformer")
                        .HasColumnType("int");

                    b.Property<int?>("VoltMeterId")
                        .HasColumnName("VoltMeterId")
                        .HasColumnType("int");

                    b.HasKey("MeteringPanelId");

                    b.HasIndex("AmpereMeterId");

                    b.HasIndex("AnnuciatorIdForFeeder");

                    b.HasIndex("AnnuciatorIdForTransformer");

                    b.HasIndex("AuxiliaryFlagRelayIdForTransformer");

                    b.HasIndex("ControlSwitchId");

                    b.HasIndex("ControlSwitchIdForTransformer");

                    b.HasIndex("DifferentialRelayIdForTransformer");

                    b.HasIndex("DimensionAndWeightId");

                    b.HasIndex("IdmtOverCurrentAndEarthFaultRelayId");

                    b.HasIndex("IdmtOverCurrentAndEarthFaultRelayIdForTransformer");

                    b.HasIndex("KWHandkVARHMeterId");

                    b.HasIndex("MegaVarMeterId");

                    b.HasIndex("MegaWattMeterId");

                    b.HasIndex("RestrictedEarthFaultRelayIdForTransformer");

                    b.HasIndex("SubstationId");

                    b.HasIndex("TripCircuitSupervisionRelayId");

                    b.HasIndex("TripCircuitSupervisionRelayIdForTransformer");

                    b.HasIndex("TripRelayId");

                    b.HasIndex("TripRelayIdForTransformer");

                    b.HasIndex("VoltMeterId");

                    b.ToTable("TblMeteringPanel");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.Mount_BracketModels.LookUpSpecificationsOfMountBracketType", b =>
                {
                    b.Property<int>("SpecificationsOfMountBracketTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SpecificationsOfMountBracketTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SpecificationsOfMountBracketTypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("SpecificationsOfMountBracketTypeId");

                    b.ToTable("LookUpSpecificationsOfMountBracketType");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.Mount_BracketModels.TblSpecificationsOfMountBracket", b =>
                {
                    b.Property<int>("SpecificationsOfMountBracketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SpecificationsOfMountBracketId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Galvanization")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Materials")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MountBrackeType")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PoleId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SpecificationsOfMountBracketTypeId")
                        .HasColumnName("SpecificationsOfMountBracketTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Standard")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("UltimateTensileStrength")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("SpecificationsOfMountBracketId");

                    b.HasIndex("PoleId");

                    b.HasIndex("SpecificationsOfMountBracketTypeId");

                    b.ToTable("TblSpecificationsOfMountBracket");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.PhasePowerTransformerModel.TblPhasePowerTransformer", b =>
                {
                    b.Property<string>("PhasePowerTransformerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ACHighVoltageWinding")
                        .HasColumnName("ACHighVoltageWinding")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ACLowVoltageWinding")
                        .HasColumnName("ACLowVoltageWinding")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ACWithStandVoltage")
                        .HasColumnName("ACWithStandVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AlarmAndTripRange")
                        .HasColumnName("AlarmAndTripRange")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AppliedStandard")
                        .HasColumnName("AppliedStandard")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AtMaximumTap")
                        .HasColumnName("AtMaximumTap")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AtMinimumTap")
                        .HasColumnName("AtMinimumTap")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AtNominalTap")
                        .HasColumnName("AtNominalTap")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AuxiliaryCircuitVoltageForFanetc3P4W")
                        .HasColumnName("AuxiliaryCircuitVoltageForFanetc3P4W")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BreatherSilicagel")
                        .HasColumnName("BreatherSilicagel")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BushingCTParticulars")
                        .HasColumnName("BushingCTParticulars")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConservatorWithAirSealedBagForConstantOilPressurYesNo")
                        .HasColumnName("ConservatorWithAirSealedBagForConstantOilPressurYesNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ControlVoltage")
                        .HasColumnName("ControlVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CoolingFanLossesAtFullOnafCapacityOperation")
                        .HasColumnName("CoolingFanLossesAtFullOnafCapacityOperation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CopperLossAtfullloadAtRatedFrequencyAndAt75CFullLoadLoss")
                        .HasColumnName("CopperLossAtfullloadAtRatedFrequencyAndAt75CFullLoadLoss")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CoreLossAtRatedFrequencyAndRatedVoltageAtNominalTapNoLoadLoss")
                        .HasColumnName("CoreLossAtRatedFrequencyAndRatedVoltageAtNominalTapNoLoadLoss")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CurrentRatingOfContacts")
                        .HasColumnName("CurrentRatingOfContacts")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DescriptionType")
                        .HasColumnName("DescriptionType")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DimensionsAndWeightMaximumSizeForTransport")
                        .HasColumnName("DimensionsAndWeightMaximumSizeForTransport")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EleventKv")
                        .HasColumnName("EleventKv")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FeederID33KvId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FiveMva")
                        .HasColumnName("FiveMva")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HVBushing")
                        .HasColumnName("HVBushing")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HVBushingType")
                        .HasColumnName("HVBushingType")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HVside")
                        .HasColumnName("HVside")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HighVoltageWindingPhaseToPhase")
                        .HasColumnName("HighVoltageWindingPhaseToPhase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImpedanceVoltageAt75CAndAtNominalRatio")
                        .HasColumnName("ImpedanceVoltageAt75CAndAtNominalRatio")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImpulseHighVoltageWinding")
                        .HasColumnName("ImpulseHighVoltageWinding")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImpulseLowVoltageWinding")
                        .HasColumnName("ImpulseLowVoltageWinding")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImpulseWithStandFullWave")
                        .HasColumnName("ImpulseWithStandFullWave")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LMulWMulH")
                        .HasColumnName("LMulWMulH")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LVBushing")
                        .HasColumnName("LVBushing")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LVBushingType")
                        .HasColumnName("LVBushingType")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LVside")
                        .HasColumnName("LVside")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LocationOfTap")
                        .HasColumnName("LocationOfTap")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LowVoltageWindingPhaseToPhase")
                        .HasColumnName("LowVoltageWindingPhaseToPhase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MakeAndType")
                        .HasColumnName("MakeAndType")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersAddress")
                        .HasColumnName("ManufacturersAddress")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersName")
                        .HasColumnName("ManufacturersName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaximumLoad")
                        .HasColumnName("MaximumLoad")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MotorRating")
                        .HasColumnName("MotorRating")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NeutralBushing")
                        .HasColumnName("NeutralBushing")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NeutralBushingType")
                        .HasColumnName("NeutralBushingType")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoOfContacts")
                        .HasColumnName("NoOfContacts")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoOfRadiators")
                        .HasColumnName("NoOfRadiators")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NumberofCoolingFan")
                        .HasColumnName("NumberOfCoolingFan")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NumberofPhase")
                        .HasColumnName("NumberofPhase")
                        .HasColumnType("int");

                    b.Property<string>("NeutralSide")
                        .HasColumnName("NeutralSide")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ONAF")
                        .HasColumnName("ONAF")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ONAN")
                        .HasColumnName("ONAN")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OilByThermometer")
                        .HasColumnName("OilByThermometer")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OilVolume")
                        .HasColumnName("OilVolume")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OnLoadTapChanger")
                        .HasColumnName("OnLoadTapChanger")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OneStepChange")
                        .HasColumnName("OneStepChange")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OverallDimensions")
                        .HasColumnName("OverallDimensions")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RadiatorsYesNo")
                        .HasColumnName("RadiatorsYesNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedFrequency")
                        .HasColumnName("RatedFrequency")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedInsulationLevel")
                        .HasColumnName("RatedInsulationLevel")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedPower")
                        .HasColumnName("RatedPower")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedVoltagePhaseToPhase")
                        .HasColumnName("RatedVoltagePhaseToPhase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatingOfFanMotors")
                        .HasColumnName("RatingOfFanMotors")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SanctionedLoad")
                        .HasColumnName("SanctionedLoad")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SerialNumber")
                        .HasColumnName("SerialNumber")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ShortCircuitlevelAtTerminal")
                        .HasColumnName("ShortCircuitlevelAtTerminal")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SixPointSixMva")
                        .HasColumnName("SixPointSixMva")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SoundLevelIEC551")
                        .HasColumnName("SoundLevelIEC551")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Source132or33kVSubstationId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SubstationId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SupervisoryAlarmAndTripContactsYesNo")
                        .HasColumnName("SupervisoryAlarmAndTripContactsYesNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SupervisoryAlarmContact")
                        .HasColumnName("SupervisoryAlarmContact")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TappingRangeHT")
                        .HasColumnName("TappingRangeHT")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TemperatureGradientBetweenWindingsAndOil")
                        .HasColumnName("TemperatureGradientBetweenWindingsAndOil")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TemperatureIndicatorsYesNo")
                        .HasColumnName("TemperatureIndicatorsYesNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TemperatureRiseAtRatedPowerMaxAmbientTemperature40C")
                        .HasColumnName("TemperatureRiseAtRatedPowerMaxAmbientTemperature40C")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ThirtyThreeKv")
                        .HasColumnName("ThirtyThreeKv")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TotalWeight")
                        .HasColumnName("TotalWeight")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TransformerBushings")
                        .HasColumnName("TransformerBushings")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TransformerCore")
                        .HasColumnName("TransformerCore")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeOfCooling28or35MVA")
                        .HasColumnName("TypeOfCooling28or35MVA")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeTap")
                        .HasColumnName("TypeTap")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeofCoreAndFluxEnsityAtNominalVoltage")
                        .HasColumnName("TypeofCoreAndFluxEnsityAtNominalVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WeightOFoil")
                        .HasColumnName("WeightOFoil")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WeightofCore")
                        .HasColumnName("WeightofCore")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WindingByResistanceMeasurement")
                        .HasColumnName("WindingByResistanceMeasurement")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("PhasePowerTransformerId");

                    b.HasIndex("FeederID33KvId");

                    b.HasIndex("Source132or33kVSubstationId");

                    b.HasIndex("SubstationId");

                    b.ToTable("TblPhasePowerTransformer");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.PhasePowerTransformerModel.TblSurgeArrestor", b =>
                {
                    b.Property<string>("SurgeArrestorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ClassOfDiverterToIEC99To4")
                        .HasColumnName("ClassOfDiverterToIEC99To4")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConnectingLeadfromLATerminaltoSurgeMonitor")
                        .HasColumnName("ConnectingLeadfromLATerminaltoSurgeMonitor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Diameter")
                        .HasColumnName("Diameter")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Dry")
                        .HasColumnName("Dry")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Height")
                        .HasColumnName("Height")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HighCurrentImpulseWithStandValue4Or10MicroS")
                        .HasColumnName("HighCurrentImpulseWithStandValue4Or10MicroS")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HunderdSeconds")
                        .HasColumnName("HunderdSeconds")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Impulse")
                        .HasColumnName("Impulse")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LeakageCurrentatRatedVoltage")
                        .HasColumnName("LeakageCurrentatRatedVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LightingImpulseResidualVoltage")
                        .HasColumnName("LightingImpulseResidualVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersNameAndAddress")
                        .HasColumnName("ManufacturersNameAndAddress")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MinimumResetVoltage")
                        .HasColumnName("MinimumResetVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NeutralConnection")
                        .HasColumnName("NeutralConnection")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OneSecond")
                        .HasColumnName("OneSecond")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OverallDimensionandWeight")
                        .HasColumnName("OverallDimensionandWeight")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhasePowerTransformerId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PointOneSeconds")
                        .HasColumnName("PointOneSeconds")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PowerFreqWithstandVoltageOfHousing")
                        .HasColumnName("PowerFreqWithstandVoltageOfHousing")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PressureReliefDeviceFitted")
                        .HasColumnName("PressureReliefDeviceFitted")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedCurrent")
                        .HasColumnName("RatedCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedVoltage")
                        .HasColumnName("RatedVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedVoltageRMSkV30")
                        .HasColumnName("RatedVoltageRMSkV30")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SteepCurrentImpulseResidualVoltageAt10kAOr1MicrosFrontTime")
                        .HasColumnName("SteepCurrentImpulseResidualVoltageAt10kAOr1MicrosFrontTime")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SurgeMonitor")
                        .HasColumnName("SurgeMonitor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SwitchingImpulseResidentialVoltage50Or100MicroS")
                        .HasColumnName("SwitchingImpulseResidentialVoltage50Or100MicroS")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TemporaryOverVoltageCapability")
                        .HasColumnName("TemporaryOverVoltageCapability")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TenSeconds")
                        .HasColumnName("TenSeconds")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TotalCreepageDistance")
                        .HasColumnName("TotalCreepageDistance")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TotalWeightofArrester")
                        .HasColumnName("TotalWeightofArrester")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Wet")
                        .HasColumnName("Wet")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("SurgeArrestorId");

                    b.HasIndex("PhasePowerTransformerId");

                    b.ToTable("TblSurgeArrestor");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.PoleModels.TblPoleMountedDofCutOutFuseLink", b =>
                {
                    b.Property<string>("PoleMountedDofCutOutFuseLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Application")
                        .HasColumnName("Application")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BasicInsulationLevelBIL")
                        .HasColumnName("BasicInsulationLevelBIL")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Construction")
                        .HasColumnName("Construction")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContinuousCurrentRating")
                        .HasColumnName("ContinuousCurrentRating")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FuseHolderType")
                        .HasColumnName("FuseHolderType")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FuseLinkRatedCurrentContinuous")
                        .HasColumnName("FuseLinkRatedCurrentContinuous")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FuseLinkType")
                        .HasColumnName("FuseLinkType")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("General")
                        .HasColumnName("General")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Installation")
                        .HasColumnName("Installation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InterruptingCapacityoftheCutOutMin")
                        .HasColumnName("InterruptingCapacityoftheCutOutMin")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaximumSystemVoltage")
                        .HasColumnName("MaximumSystemVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalRatedVoltage")
                        .HasColumnName("NominalRatedVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PoleId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Standard")
                        .HasColumnName("Standard")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SystemFrequency")
                        .HasColumnName("SystemFrequency")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeofSystem")
                        .HasColumnName("TypeofSystem")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeorModel")
                        .HasColumnName("TypeorModel")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("PoleMountedDofCutOutFuseLinkId");

                    b.HasIndex("PoleId");

                    b.ToTable("TblPoleMountedDofCutOutFuseLink");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.PoleModels.TblPolePicture", b =>
                {
                    b.Property<string>("PolePictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PictureLocation")
                        .HasColumnName("PictureLocation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PictureName")
                        .HasColumnName("PictureName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PoleId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("PolePictureId");

                    b.HasIndex("PoleId");

                    b.ToTable("TblPolePicture");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.ServicePointModels.TblConsumerData", b =>
                {
                    b.Property<int>("ConsumerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ConsumerId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("BcCode")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("BillGroup")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("BookNumber")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("BusinessType")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ConnectedLoad")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ConnectionStatus")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CriticalCustomer")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FeederLineId")
                        .HasColumnName("FeederLineId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastReadingDate")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MeterNumber")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MeterReading")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("OmfKwh")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("OperatingVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PhasingCode")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("SanctionedLoad")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("ServicePointId")
                        .HasColumnName("ServicePointId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialCode")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("SpecialType")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Tariff")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Ws")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ConsumerId");

                    b.HasIndex("FeederLineId");

                    b.HasIndex("ServicePointId");

                    b.ToTable("TblConsumerData");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.ServicePointModels.TblServicePoint", b =>
                {
                    b.Property<int>("ServicePointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ServicePointId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AggregateLoadkw")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("BuildingApptNo")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("BuildingId");

                    b.Property<string>("BuildingType")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CityTown")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FeederLineId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NoOFConsumersB")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NoOFConsumersR")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NoOFConsumersY")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NoOfConsumersRyb")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PlotNo")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PoleId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PremiseName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PrimaryLandmark")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("RoadName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ServicePointType")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("VoltageCategory")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ServicePointId");

                    b.HasIndex("FeederLineId");

                    b.HasIndex("PoleId");

                    b.ToTable("TblServicePoint");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.LookUpAutoCircuitReCloserType", b =>
                {
                    b.Property<int>("AutoCircuitReCloserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AutoCircuitReCloserTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AutoCircuitReCloserTypeIdName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("AutoCircuitReCloserTypeId");

                    b.ToTable("LookUpAutoCircuitReCloserType");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.LookUpAuxiliaryTransformer", b =>
                {
                    b.Property<int>("AuxiliaryTransformerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AuxiliaryTransformerId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BasicInsulationLevelKV")
                        .HasColumnName("BasicInsulationLevelKV")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HTSide")
                        .HasColumnName("HTSide")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HighestSystemVoltageof")
                        .HasColumnName("HighestSystemVoltageof")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("KVARating")
                        .HasColumnName("KVARating")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LTSide")
                        .HasColumnName("LTSide")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LoadLossesAtRatedFullLoadAt75CWatts")
                        .HasColumnName("LoadLossesAtRatedFullLoadAt75CWatts")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersNameAndAddress")
                        .HasColumnName("ManufacturersNameAndAddress")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersTypeAndModelNo")
                        .HasColumnName("ManufacturersTypeAndModelNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaxTempRiseover40CofambientSupportedByCalculation")
                        .HasColumnName("MaxTempRiseover40CofambientSupportedByCalculation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoloadLossWatts")
                        .HasColumnName("NoloadLossWatts")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NumberOfPhases")
                        .HasColumnName("NumberOfPhases")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PercentageImpedanceAt75C")
                        .HasColumnName("PercentageImpedanceAt75C")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PowerFrequencyWithstandVoltageKV")
                        .HasColumnName("PowerFrequencyWithstandVoltageKV")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PrimaryWindingKV")
                        .HasColumnName("PrimaryWindingKV")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedFrequencyHz")
                        .HasColumnName("RatedFrequencyHz")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedNoloadsecVoltageV")
                        .HasColumnName("RatedNoloadsecVoltageV")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedPrimaryvoltageKV")
                        .HasColumnName("RatedPrimaryvoltageKV")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecondaryWindingKv")
                        .HasColumnName("SecondaryWindingKv")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SubstationId")
                        .HasColumnName("LookUpAuxiliaryTransformer_SubstationId");

                    b.Property<int?>("SubstrationId")
                        .HasColumnName("SubstationId")
                        .HasColumnType("int");

                    b.Property<string>("TopOildegC")
                        .HasColumnName("TopOildegC")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TotalWeightOfOilKg")
                        .HasColumnName("TotalWeightOfOilKg")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeOfCooling")
                        .HasColumnName("TypeOfCooling")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeofPrimaryTappingOffload")
                        .HasColumnName("TypeofPrimaryTappingOffload")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("VectorGroup")
                        .HasColumnName("VectorGroup")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WindingdegC")
                        .HasColumnName("WindingdegC")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("AuxiliaryTransformerId");

                    b.HasIndex("SubstationId");

                    b.ToTable("LookUpAuxiliaryTransformer");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.LookUpBatteryCharger", b =>
                {
                    b.Property<int>("BatteryChargerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BatteryChargerId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChargingOperatingControl")
                        .HasColumnName("ChargingOperatingControl")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContinuousCurrentRating")
                        .HasColumnName("ContinuousCurrentRating")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Efficiency")
                        .HasColumnName("Efficiency")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersModelNo")
                        .HasColumnName("ManufacturersModelNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersNameAndCompany")
                        .HasColumnName("ManufacturersNameAndCompany")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoOfPhase")
                        .HasColumnName("NoOfPhase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalOutputVoltage")
                        .HasColumnName("NominalOutputVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OutputCurrent")
                        .HasColumnName("OutputCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedFrequency")
                        .HasColumnName("RatedFrequency")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedInputVoltageRange")
                        .HasColumnName("RatedInputVoltageRange")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Rating")
                        .HasColumnName("Rating")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SubstationId")
                        .HasColumnName("LookUpBatteryCharger_SubstationId");

                    b.Property<int?>("SubstrationId")
                        .HasColumnName("SubstationId")
                        .HasColumnType("int");

                    b.Property<string>("VoltageRegulation")
                        .HasColumnName("VoltageRegulation")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("BatteryChargerId");

                    b.HasIndex("SubstationId");

                    b.ToTable("LookUpBatteryCharger");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.LookUpFeederLineType", b =>
                {
                    b.Property<string>("FeederLineTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FeederLineTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("FeederLineTypeId");

                    b.ToTable("LookUpFeederLineType");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.LookUpNiCdBattery110vDc", b =>
                {
                    b.Property<int>("NiCdBattery110vDcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NiCdBattery110vDcId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ManufacturersModelNo")
                        .HasColumnName("ManufacturersModelNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersNameAndAddress")
                        .HasColumnName("ManufacturersNameAndAddress")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NumberOfCells")
                        .HasColumnName("NumberOfCells")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OperatingVoltage")
                        .HasColumnName("OperatingVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SubstationId")
                        .HasColumnName("LookUpNiCdBattery110vDc_SubstationId");

                    b.Property<int?>("SubstrationId")
                        .HasColumnName("SubstationId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnName("Type")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("VoltagePerCell")
                        .HasColumnName("VoltagePerCell")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("NiCdBattery110vDcId");

                    b.HasIndex("SubstationId");

                    b.ToTable("LookUpNiCdBattery110vDc");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.LookUpSubstationType", b =>
                {
                    b.Property<string>("SubstationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SubstationTypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("SubstationTypeId");

                    b.ToTable("LookUpSubstationType");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.TblAutoCircuitReCloser", b =>
                {
                    b.Property<int>("AutoCircuitReCloserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AutoCircuitReCloserId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AsymmetricalInterrupting")
                        .HasColumnName("AsymmetricalInterrupting")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("AutoCircuitReCloserTypeId")
                        .HasColumnName("AutoCircuitReCloserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ControlSystemforACR")
                        .HasColumnName("ControlSystemforACR")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CountryOfOrigin")
                        .HasColumnName("CountryOfOrigin")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("GasPressureIndicator")
                        .HasColumnName("GasPressureIndicator")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HermeticallySealed")
                        .HasColumnName("HermeticallySealed")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImpulseWithstandVoltage")
                        .HasColumnName("ImpulseWithstandVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InsulatingMedium")
                        .HasColumnName("InsulatingMedium")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InsulationLevel")
                        .HasColumnName("InsulationLevel")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InterruptingMedium")
                        .HasColumnName("InterruptingMedium")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersNameAddress")
                        .HasColumnName("ManufacturersNameAddress")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaximumRatedCurrent")
                        .HasColumnName("MaximumRatedCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaximumVoltage")
                        .HasColumnName("MaximumVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalSystemVoltage")
                        .HasColumnName("NominalSystemVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PowerFrequencyWithstandVoltage")
                        .HasColumnName("PowerFrequencyWithstandVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ProtectionAndMeterningCTration")
                        .HasColumnName("ProtectionAndMeterningCTration")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedContinuousCurrent")
                        .HasColumnName("RatedContinuousCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedFrequency")
                        .HasColumnName("RatedFrequency")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedShortCircuitCurrent")
                        .HasColumnName("RatedShortCircuitCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ShortTimewithstandCurrent")
                        .HasColumnName("ShortTimewithstandCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SubstationId")
                        .HasColumnName("TblAutoCircuitReCloser_SubstationId");

                    b.Property<int?>("SubstrationId")
                        .HasColumnName("SubstationId")
                        .HasColumnType("int");

                    b.Property<string>("SymmetricalInterruptingCurrent")
                        .HasColumnName("SymmetricalInterruptingCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SymmetricalMakinoCurrent")
                        .HasColumnName("SymmetricalMakinoCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeOfModel")
                        .HasColumnName("TypeOfModel")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("AutoCircuitReCloserId");

                    b.HasIndex("AutoCircuitReCloserTypeId");

                    b.HasIndex("SubstationId");

                    b.ToTable("TblAutoCircuitReCloser");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.TblOutDoorTypeVacumnCircuitBreaker", b =>
                {
                    b.Property<int>("OutDoorTypeVacumnCircuitBreakerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OutDoorTypeVacumnCircuitBreakerId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AsymmetricalRms")
                        .HasColumnName("AsymmetricalRms")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AtRatedCurrentSwitching")
                        .HasColumnName("AtRatedCurrentSwitching")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AtShortCircuitCurrentSwitching")
                        .HasColumnName("AtShortCircuitCurrentSwitching")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BreakingTime")
                        .HasColumnName("BreakingTime")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CircuitBreakerTerminalConnectors")
                        .HasColumnName("CircuitBreakerTerminalConnectors")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ClosingReleaseCoilCurrent")
                        .HasColumnName("ClosingReleaseCoilCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ClosingReleaseCoilVoltage")
                        .HasColumnName("ClosingReleaseCoilVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ClosingTime")
                        .HasColumnName("ClosingTime")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Frequency")
                        .HasColumnName("Frequency")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImpulseWithstandOn1250MsWave")
                        .HasColumnName("ImpulseWithstandOn1250MsWave")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InterruptingMedium")
                        .HasColumnName("InterruptingMedium")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersModelNo")
                        .HasColumnName("ManufacturersModelNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersNameCountry")
                        .HasColumnName("ManufacturersNameCountry")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaximumRatedVoltage")
                        .HasColumnName("MaximumRatedVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoOfBreakPerPhrase")
                        .HasColumnName("NoOfBreakPerPhrase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoOfPhase")
                        .HasColumnName("NoOfPhase")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoOfTrippingCoil")
                        .HasColumnName("NoOfTrippingCoil")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OpeningTimeWithoutCurrentAt100OfRatedBreakingcurrent")
                        .HasColumnName("OpeningTimeWithoutCurrentAt100OfRatedBreakingcurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PowerFrequencyTestVoltageDryAt50Hz1Min")
                        .HasColumnName("PowerFrequencyTestVoltageDryAt50Hz1Min")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PressureInVacuumTubeforVCB")
                        .HasColumnName("PressureInVacuumTubeforVCB")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedNormalCurrent")
                        .HasColumnName("RatedNormalCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedOperatingSequence")
                        .HasColumnName("RatedOperatingSequence")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedVoltageofSpringWindingMotorforClosing")
                        .HasColumnName("RatedVoltageofSpringWindingMotorforClosing")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ShortCircuitMakingCurrentPeak")
                        .HasColumnName("ShortCircuitMakingCurrentPeak")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ShortTimeWithstandCurrent3SecondRms")
                        .HasColumnName("ShortTimeWithstandCurrent3SecondRms")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SpringWindingMotorCurrent")
                        .HasColumnName("SpringWindingMotorCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SubstationId")
                        .HasColumnName("TblOutDoorTypeVacumnCircuitBreaker_SubstationId");

                    b.Property<int?>("SubstrationId")
                        .HasColumnName("SubstationId")
                        .HasColumnType("int");

                    b.Property<string>("SymmetricalRms")
                        .HasColumnName("SymmetricalRms")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TripCoilCurrent")
                        .HasColumnName("TripCoilCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TripCoilVoltage")
                        .HasColumnName("TripCoilVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("OutDoorTypeVacumnCircuitBreakerId");

                    b.HasIndex("SubstationId");

                    b.ToTable("TblOutDoorTypeVacumnCircuitBreaker");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.TblRelay", b =>
                {
                    b.Property<int>("RelayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RelayId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionStatus")
                        .HasColumnName("ConnectionStatus")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("FeederLineId")
                        .HasColumnName("FeederLineId")
                        .HasColumnType("int");

                    b.Property<string>("ManufactureName")
                        .HasColumnName("ManufactureName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ModelNumber")
                        .HasColumnName("ModelNumber")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NominalVoltage")
                        .HasColumnName("NominalVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("RatedCurrent")
                        .HasColumnName("RatedCurrent")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("RatedVoltage")
                        .HasColumnName("RatedVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("RelayName")
                        .HasColumnName("RelayName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("SubstrationId")
                        .HasColumnName("SubstationId")
                        .HasColumnType("int");

                    b.HasKey("RelayId");

                    b.ToTable("TblRelay");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.TblSubstation", b =>
                {
                    b.Property<string>("SubstationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AreaOfSubstation")
                        .HasColumnName("AreaOfSubstation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("InstalledCapacity")
                        .HasColumnName("InstalledCapacity")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Latitude")
                        .HasColumnName("Latitude")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Location")
                        .HasColumnName("Location")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Longitude")
                        .HasColumnName("Longitude")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MaximumDemand")
                        .HasColumnName("MaximumDemand")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NominalVoltage")
                        .HasColumnName("NominalVoltage")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PeakLoad")
                        .HasColumnName("PeakLoad")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("SnDCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SubstationTypeId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SubstrationName")
                        .IsRequired()
                        .HasColumnName("SubstrationName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("YearOfComissioning")
                        .HasColumnName("YearOfComissioning")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("SubstationId");

                    b.HasIndex("SnDCode");

                    b.HasIndex("SubstationTypeId");

                    b.ToTable("TblSubstation");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.TblSubstationPicture", b =>
                {
                    b.Property<int>("SubstrationPictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubstrationPictureId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PictureLocation")
                        .HasColumnName("PictureLocation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PictureName")
                        .HasColumnName("PictureName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SubstationId")
                        .HasColumnName("TblSubstationPicture_SubstationId");

                    b.Property<int?>("SubstrationId")
                        .HasColumnName("SubstationId")
                        .HasColumnType("int");

                    b.HasKey("SubstrationPictureId");

                    b.HasIndex("SubstationId");

                    b.ToTable("TblSubstationPicture");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.TblSwitch33KvIsolator", b =>
                {
                    b.Property<int>("Switch33KvIsolatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Switch33KvIsolatorId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BreakingType")
                        .HasColumnName("BreakingType")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConnectionStatus")
                        .HasColumnName("ConnectionStatus")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InstallationDate")
                        .HasColumnName("InstallationDate")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufactureMonthAndYear")
                        .HasColumnName("ManufactureMonthAndYear")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalVoltage")
                        .HasColumnName("NominalVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NormalStatus")
                        .HasColumnName("NormalStatus")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedCurrent")
                        .HasColumnName("RatedCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedVoltage")
                        .HasColumnName("RatedVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SubstationId")
                        .HasColumnName("TblSwitch33KvIsolator_SubstationId");

                    b.Property<int?>("SubstrationId")
                        .HasColumnName("SubstationId")
                        .HasColumnType("int");

                    b.Property<string>("SwitchID")
                        .HasColumnName("SwitchID")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SwitchNo")
                        .HasColumnName("SwitchNo")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeIsolatorSwitch")
                        .HasColumnName("TypeIsolatorSwitch")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Switch33KvIsolatorId");

                    b.HasIndex("SubstationId");

                    b.ToTable("TblSwitch33KvIsolator");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.LookUpCircuitBreaker", b =>
                {
                    b.Property<int>("CircuitBreakerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CircuitBreakerId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClosingTime")
                        .HasColumnName("ClosingTime")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ControlVoltage")
                        .HasColumnName("ControlVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ElectricalAndMechanicalInterlock")
                        .HasColumnName("ElectricalAndMechanicalInterlock")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MotorVoltageForSpringCharge")
                        .HasColumnName("MotorVoltageForSpringCharge")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OpeningTime")
                        .HasColumnName("OpeningTime")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OperatingCycle")
                        .HasColumnName("OperatingCycle")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedBreakingTime")
                        .HasColumnName("RatedBreakingTime")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedCurrent")
                        .HasColumnName("RatedCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedCurrent2")
                        .HasColumnName("RatedCurrent2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedOperatingSequence")
                        .HasColumnName("RatedOperatingSequence")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedShortCktBreakingCurrent")
                        .HasColumnName("RatedShortCktBreakingCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedShortCktMakingCurrent")
                        .HasColumnName("RatedShortCktMakingCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedVoltage")
                        .HasColumnName("RatedVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedVoltage2")
                        .HasColumnName("RatedVoltage2")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SwitchPositions")
                        .HasColumnName("SwitchPositions")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ThreePositionDisconnectorSwitch")
                        .HasColumnName("ThreePositionDisconnectorSwitch")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Type")
                        .HasColumnName("Type")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Type2")
                        .HasColumnName("Type2")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CircuitBreakerId");

                    b.ToTable("LookUpCircuitBreaker");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.LookUpCurrentTransformer", b =>
                {
                    b.Property<int>("CurrentTransformerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CurrentTransformerId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccuracyClassDifferentialProtection")
                        .HasColumnName("AccuracyClassDifferentialProtection")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AccuracyClassMetering")
                        .HasColumnName("AccuracyClassMetering")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AccuracyClassOCEFProtection")
                        .HasColumnName("AccuracyClassOCEFProtection")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Burden")
                        .HasColumnName("Burden")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedCurrentRatio")
                        .HasColumnName("RatedCurrentRatio")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedFrequency")
                        .HasColumnName("RatedFrequency")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedVoltage")
                        .HasColumnName("RatedVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CurrentTransformerId");

                    b.ToTable("LookUpCurrentTransformer");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.LookUpPotentialTrans33KV", b =>
                {
                    b.Property<int>("PotentialTransformerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PotentialTransformerId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BurdenOrClass")
                        .HasColumnName("BurdenOrClass")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HeightsSystemVoltage")
                        .HasColumnName("HeightsSystemVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImpulseWithstAndVoltage")
                        .HasColumnName("ImpulseWithstAndVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MeteringWinding")
                        .HasColumnName("MeteringWinding")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MicroSec12or50")
                        .HasColumnName("MicroSec12or50")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NameoftheManufacturer")
                        .HasColumnName("NameoftheManufacturer")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalSystemVoltage")
                        .HasColumnName("NominalSystemVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PowerFrequencyWithstandVoltage")
                        .HasColumnName("PowerFrequencyWithstandVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ProtectionWinding")
                        .HasColumnName("ProtectionWinding")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedPrimaryVoltage")
                        .HasColumnName("RatedPrimaryVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedSecondaryVoltageandTertiaryVoltage")
                        .HasColumnName("RatedSecondaryVoltageandTertiaryVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SwitchGearID")
                        .HasColumnName("SwitchGearID")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TypeAndModelNo")
                        .HasColumnName("TypeAndModelNo")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("PotentialTransformerId");

                    b.HasIndex("SwitchGearID");

                    b.ToTable("LookUpPotentialTrans33KV");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.LookUpSwitchGearType", b =>
                {
                    b.Property<int>("SwitchGearTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SwitchGearTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SwitchGearTypeName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("SwitchGearTypeId");

                    b.ToTable("LookUpSwitchGearType");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.LookUpSwitchGearUnit", b =>
                {
                    b.Property<int>("SwitchGearUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SwitchGearUnitId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppliedStandard")
                        .HasColumnName("AppliedStandard")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersNameAndAddress")
                        .HasColumnName("ManufacturersNameAndAddress")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedCurrentForMainBus")
                        .HasColumnName("RatedCurrentForMainBus")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedNominalVoltage")
                        .HasColumnName("RatedNominalVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedShortTimeCurrent")
                        .HasColumnName("RatedShortTimeCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedVoltage")
                        .HasColumnName("RatedVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ShortTimeCurrentRatedDuration")
                        .HasColumnName("ShortTimeCurrentRatedDuration")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("SwitchGearUnitId");

                    b.ToTable("LookUpSwitchGearUnit");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.LookUpSwitchPosition", b =>
                {
                    b.Property<int>("SwitchPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SwitchPositionId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccuracyClassMetering")
                        .HasColumnName("AccuracyClassMetering")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AccuracyClassOCEFProtection")
                        .HasColumnName("AccuracyClassOCEFProtection")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Burden")
                        .HasColumnName("Burden")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CurrentTransformer")
                        .HasColumnName("CurrentTransformer")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ElectricalAndMechanicalInterlock")
                        .HasColumnName("ElectricalAndMechanicalInterlock")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedCurrentRatio")
                        .HasColumnName("RatedCurrentRatio")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedFrequency")
                        .HasColumnName("RatedFrequency")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedVoltage")
                        .HasColumnName("RatedVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("SwitchPositionId");

                    b.ToTable("LookUpSwitchPosition");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.LookUpTerminationKits", b =>
                {
                    b.Property<int>("TerminationKitsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TerminationKitsId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Application")
                        .HasColumnName("Application")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("BusBarId")
                        .HasColumnName("BusBarId")
                        .HasColumnType("int");

                    b.Property<string>("ConductorCrossSection")
                        .HasColumnName("ConductorCrossSection")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImpulseWithstandVoltage")
                        .HasColumnName("ImpulseWithstandVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Installation")
                        .HasColumnName("Installation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LineCapacity")
                        .HasColumnName("LineCapacity")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaximumSystemVoltage")
                        .HasColumnName("MaximumSystemVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalSystemVoltage")
                        .HasColumnName("NominalSystemVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NumberofCore")
                        .HasColumnName("NumberofCore")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PowerFrequencyWithstandVoltage")
                        .HasColumnName("PowerFrequencyWithstandVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SystemNeutralEarthing")
                        .HasColumnName("SystemNeutralEarthing")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeofCableBox")
                        .HasColumnName("TypeofCableBox")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeofInsulation")
                        .HasColumnName("TypeofInsulation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeofScreening")
                        .HasColumnName("TypeofScreening")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeofTerminationKit")
                        .HasColumnName("TypeofTerminationKit")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("TerminationKitsId");

                    b.HasIndex("BusBarId");

                    b.ToTable("LookUpTerminationKits");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.LookupBusBar", b =>
                {
                    b.Property<int>("BusBarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BusBarId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accessories")
                        .HasColumnName("Accessories")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BusBarType")
                        .HasColumnName("BusBarType")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CableConnection")
                        .HasColumnName("CableConnection")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CrossSection")
                        .HasColumnName("CrossSection")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Material")
                        .HasColumnName("Material")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalCurrent")
                        .HasColumnName("NominalCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SurgeArrester")
                        .HasColumnName("SurgeArrester")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("VoltageTransformer")
                        .HasColumnName("VoltageTransformer")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("BusBarId");

                    b.ToTable("LookupBusBar");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.LookupSf6SafetyAndLife", b =>
                {
                    b.Property<int>("Sf6SafetyAndLifeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Sf6SafetyAndLifeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BurstingPressure")
                        .HasColumnName("BurstingPressure")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BusBarGasPressureManometer")
                        .HasColumnName("BusBarGasPressureManometer")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CapacitiveVoltageIndicatorEUJapanUSAOrigin")
                        .HasColumnName("CapacitiveVoltageIndicatorEUJapanUSAOrigin")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CircuitBreakers")
                        .HasColumnName("CircuitBreakers")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DisconnectorsAndEarthingSwitches")
                        .HasColumnName("DisconnectorsAndEarthingSwitches")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("GasLeakageRate")
                        .HasColumnName("GasLeakageRate")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("GasPressureManometer")
                        .HasColumnName("GasPressureManometer")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LifeEnduranceOfSwitchgear")
                        .HasColumnName("LifeEnduranceOfSwitchgear")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MinimumfunctionalpressureAt20C")
                        .HasColumnName("MinimumfunctionalpressureAt20C")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedPressureAt20C")
                        .HasColumnName("RatedPressureAt20C")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SF6Pressure")
                        .HasColumnName("SF6Pressure")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SafetyIndication")
                        .HasColumnName("SafetyIndication")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Sf6SafetyAndLifeId");

                    b.ToTable("LookupSf6SafetyAndLife");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.TblIndoorOutdoorTypeProgrammableEnergyMeter", b =>
                {
                    b.Property<int>("EnergyMeterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EnergyMeterId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccuracyClass")
                        .HasColumnName("AccuracyClass")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConstructionConnection")
                        .HasColumnName("ConstructionConnection")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Installation")
                        .HasColumnName("Installation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersNameAddress")
                        .HasColumnName("ManufacturersNameAddress")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ManufacturersTypeAndModel")
                        .HasColumnName("ManufacturersTypeAndModel")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaximumCurrent")
                        .HasColumnName("MaximumCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MeterConstant")
                        .HasColumnName("MeterConstant")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MeterSealingCondition")
                        .HasColumnName("MeterSealingCondition")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MinimumBiasingVoltage")
                        .HasColumnName("MinimumBiasingVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NoOfTerminal")
                        .HasColumnName("NoOfTerminal")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalCurrent")
                        .HasColumnName("NominalCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedCurrent")
                        .HasColumnName("RatedCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RatedVoltage")
                        .HasColumnName("RatedVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RouteCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SwitchGearID");

                    b.Property<string>("VariationOfFrequency")
                        .HasColumnName("VariationOfFrequency")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("VariationOfVoltage")
                        .HasColumnName("VariationOfVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("YearOfManufacture")
                        .HasColumnName("YearOfManufacture")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("EnergyMeterId");

                    b.HasIndex("SwitchGearID");

                    b.ToTable("TblIndoorOutdoorTypeProgrammableEnergyMeter");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.TblSwitchGear", b =>
                {
                    b.Property<string>("SwitchGearID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("BusBarId")
                        .HasColumnName("BusBarId")
                        .HasColumnType("int");

                    b.Property<int>("CircuitBreakerId")
                        .HasColumnName("CircuitBreakerId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentTransformerId")
                        .HasColumnName("CurrentTransformerId")
                        .HasColumnType("int");

                    b.Property<string>("PhasePowerTransformerId")
                        .HasColumnName("PhasePowerTransformerId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("RelayId")
                        .HasColumnName("RelayId")
                        .HasColumnType("int");

                    b.Property<int>("Sf6SafetyAndLifeId")
                        .HasColumnName("Sf6SafetyAndLifeId")
                        .HasColumnType("int");

                    b.Property<int>("SwitchGearTypeId")
                        .HasColumnName("SwitchGearTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SwitchGearUnitId")
                        .HasColumnName("SwitchGearUnitId")
                        .HasColumnType("int");

                    b.Property<int>("SwitchPositionId")
                        .HasColumnName("SwitchPositionId")
                        .HasColumnType("int");

                    b.HasKey("SwitchGearID");

                    b.HasIndex("BusBarId");

                    b.HasIndex("CircuitBreakerId");

                    b.HasIndex("CurrentTransformerId");

                    b.HasIndex("PhasePowerTransformerId");

                    b.HasIndex("RelayId");

                    b.HasIndex("Sf6SafetyAndLifeId");

                    b.HasIndex("SwitchGearTypeId");

                    b.HasIndex("SwitchGearUnitId");

                    b.HasIndex("SwitchPositionId");

                    b.ToTable("TblSwitchGear");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.TblXLPEaluminiumCopperGalvanize11KV", b =>
                {
                    b.Property<int>("XLPEaluminiumCopperGalvanize11KVId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("XLPEaluminiumCopperGalvanize11KVId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ACTestVoltage")
                        .HasColumnName("ACTestVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CurrentCarryingCapacity")
                        .HasColumnName("CurrentCarryingCapacity")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CurrentRatingatAmbienttempof40C")
                        .HasColumnName("CurrentRatingatAmbienttempof40C")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DiameterOverInsulationApproximately")
                        .HasColumnName("DiameterOverInsulationApproximately")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DiameterofPhaseConductor")
                        .HasColumnName("DiameterofPhaseConductor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EarthLeakageCurrent")
                        .HasColumnName("EarthLeakageCurrent")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("GalvanizedSteelRopeNominalCrossSectionalAreaofRope")
                        .HasColumnName("GalvanizedSteelRopeNominalCrossSectionalAreaofRope")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaximumAdmissibleContinuousWorkingVoltage")
                        .HasColumnName("MaximumAdmissibleContinuousWorkingVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaximumDCResistanceAt20C")
                        .HasColumnName("MaximumDCResistanceAt20C")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalCrossSectionalAreaofPhaseConductor")
                        .HasColumnName("NominalCrossSectionalAreaofPhaseConductor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalCrossSectionalAreaofScreen")
                        .HasColumnName("NominalCrossSectionalAreaofScreen")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalVoltageratingUOorU")
                        .HasColumnName("NominalVoltageratingUOorU")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OfScreen")
                        .HasColumnName("OfScreen")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OverallDiameterApproximately")
                        .HasColumnName("OverallDiameterApproximately")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OverallDiameterofRope")
                        .HasColumnName("OverallDiameterofRope")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ShortCircuitCurrentOfConductor")
                        .HasColumnName("ShortCircuitCurrentOfConductor")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SingleCoreStranding")
                        .HasColumnName("SingleCoreStranding")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Source132or33kVSubStationID")
                        .HasColumnName("Source132or33kVSubStationID")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Source33or11kVSubStationID")
                        .HasColumnName("Source33or11kVSubStationID")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StrandedBundleApproximately")
                        .HasColumnName("StrandedBundleApproximately")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Stranding")
                        .HasColumnName("Stranding")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SwitchGearID")
                        .HasColumnName("SwitchGearID")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ThicknessofCovering")
                        .HasColumnName("ThicknessofCovering")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ThicknessofInsulation")
                        .HasColumnName("ThicknessofInsulation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ThicknessofOverSheath")
                        .HasColumnName("ThicknessofOverSheath")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ThreeCoresStrandedAroundSuspensionUnitDiameterof")
                        .HasColumnName("ThreeCoresStrandedAroundSuspensionUnitDiameterof")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TotalWeightApproximately")
                        .HasColumnName("TotalWeightApproximately")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WorkingCapacitance")
                        .HasColumnName("WorkingCapacitance")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WorkingInductance")
                        .HasColumnName("WorkingInductance")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("XLPEaluminiumCopperGalvanize11KVId");

                    b.HasIndex("SwitchGearID");

                    b.ToTable("TblXLPEaluminiumCopperGalvanize11KV");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.TblFeederLine", b =>
                {
                    b.Property<string>("FeederLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FeederLineTypeId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FeederLineUId")
                        .HasColumnName("FeederLineUId")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FeederLocation")
                        .HasColumnName("FeederLocation")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FeedermeterNumber")
                        .HasColumnName("FeedermeterNumber")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FeederName")
                        .HasColumnName("FeederName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaximumDemand")
                        .HasColumnName("MaximumDemand")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MaximumLoad")
                        .HasColumnName("MaximumLoad")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MeterCurrentRating")
                        .HasColumnName("MeterCurrentRating")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MeterVoltageRating")
                        .HasColumnName("MeterVoltageRating")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NominalVoltage")
                        .HasColumnName("NominalVoltage")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PeakDemand")
                        .HasColumnName("PeakDemand")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RouteCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SanctionedLoad")
                        .HasColumnName("SanctionedLoad")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("FeederLineId");

                    b.HasIndex("FeederLineTypeId");

                    b.HasIndex("RouteCode");

                    b.ToTable("TblFeederLine");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.TblPole", b =>
                {
                    b.Property<string>("PoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BackSpan")
                        .HasColumnName("BackSpan")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FeederLineId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FeederLineUid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnName("Latitude")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnName("Longitude")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MSJNo")
                        .HasColumnName("MSJNo")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Neutral")
                        .HasColumnName("Neutral")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PhaseAId")
                        .IsRequired()
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("PhaseBId")
                        .IsRequired()
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("PhaseCId")
                        .IsRequired()
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("PoleConditionId")
                        .IsRequired()
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("PoleNo")
                        .HasColumnName("PoleNo")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PoleTypeId")
                        .IsRequired()
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("PoleUid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PreviousPoleNo")
                        .HasColumnName("PreviousPoleNo")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("RouteCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SleeveNo")
                        .HasColumnName("SleeveNo")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("SourceCableId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("StreetLight")
                        .HasColumnName("StreetLight")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("SurveyDate")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SurveyorName")
                        .HasColumnName("SurveyorName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("TargetCableId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TwistNo")
                        .HasColumnName("TwistNo")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("PoleId");

                    b.HasIndex("FeederLineId");

                    b.HasIndex("PhaseAId");

                    b.HasIndex("PhaseBId");

                    b.HasIndex("PhaseCId");

                    b.HasIndex("PoleConditionId");

                    b.HasIndex("PoleTypeId");

                    b.HasIndex("RouteCode");

                    b.HasIndex("SourceCableId");

                    b.HasIndex("TargetCableId");

                    b.ToTable("TblPole");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.ConductorModels.TblConductor", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.ConductorModels.LookUpConductorType", "ConductorType")
                        .WithMany()
                        .HasForeignKey("ConductorTypeId");

                    b.HasOne("Pdb014App.Models.PDB.TblPole", "ConductorToPole")
                        .WithMany()
                        .HasForeignKey("PoleId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.CopperCableModels.TblCopperCables", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.CopperCableModels.LookUpCopperCablesType", "CopperCablesType")
                        .WithMany()
                        .HasForeignKey("CopperCablesTypeId");

                    b.HasOne("Pdb014App.Models.PDB.TblPole", "ConductorToPole")
                        .WithMany()
                        .HasForeignKey("PoleId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.DistributionTransformerModel.TblDistributionTransformer", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.TblFeederLine", "DtToFeederLine")
                        .WithMany()
                        .HasForeignKey("FeederLineId");

                    b.HasOne("Pdb014App.Models.PDB.TblPole", "DtToPole")
                        .WithMany()
                        .HasForeignKey("PoleId");

                    b.HasOne("Pdb014App.Models.PDB.DistributionTransformerModel.TblPoleStructureMountedSurgeArrestor", "PoleStructureMountedSurgeArrestor")
                        .WithMany()
                        .HasForeignKey("PoleStructureMountedSurgearrestorId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.DistributionTransformerModel.TblDistributionTransformerPicture", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.DistributionTransformerModel.TblDistributionTransformer", "DistributionTransformer")
                        .WithMany()
                        .HasForeignKey("DistributionTransformerId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.InsulatorModels.TblAacInsulator", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.InsulatorModels.LookUpAacInsulatorType", "AacInsulatorType")
                        .WithMany()
                        .HasForeignKey("AacInsulatorTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.TblPole", "AacInsulatorToPole")
                        .WithMany()
                        .HasForeignKey("PoleId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.InsulatorModels.TblInsulatorDisk", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.InsulatorModels.LookUpInsulatorDiskType", "LookUpInsulatorDiskType")
                        .WithMany()
                        .HasForeignKey("InsulatorDiskTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.TblPole", "InsulatorDiskToPole")
                        .WithMany()
                        .HasForeignKey("PoleId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.InsulatorModels.TblInsulatorPinAndPost", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.InsulatorModels.LookUpInsulatorPinAndPostType", "LookUpInsulatorPinAndPostType")
                        .WithMany()
                        .HasForeignKey("InsulatorPinAndPostTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.TblPole", "InsulatorPinAndPostToPole")
                        .WithMany()
                        .HasForeignKey("PoleId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.InsulatorModels.TblInsulatorShackleOrGuy", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.InsulatorModels.LookUpInsulatorShackleOrGuyType", "LookUpInsulatorShackleOrGuyType")
                        .WithMany()
                        .HasForeignKey("InsulatorShackleOrGuyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.TblPole", "InsulatorShackleOrGuyToPole")
                        .WithMany()
                        .HasForeignKey("PoleId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.TblCrossArm", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.TblPole", "CrossArmToPole")
                        .WithMany()
                        .HasForeignKey("PoleId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.LookUpModels.LookUpCircleInfo", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.LookUpModels.LookUpZoneInfo", "ZoneInfo")
                        .WithMany()
                        .HasForeignKey("ZoneCode");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.LookUpModels.LookUpRouteInfo", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.SubstrationModels.TblSubstation", "RouteToSubstation")
                        .WithMany()
                        .HasForeignKey("SubstationId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.LookUpModels.LookUpSnDInfo", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.LookUpModels.LookUpCircleInfo", "CircleInfo")
                        .WithMany()
                        .HasForeignKey("CircleCode");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.LookUpSideLockTieTerminalClampMerlin", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.TblPole", "SideLockTieTerminalClampMerlinToPole")
                        .WithMany()
                        .HasForeignKey("PoleId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentMeter", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentTypesOfMeter", "DifferentTypesOfMeter")
                        .WithMany()
                        .HasForeignKey("RelayTypeId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentRelay", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentTypesOfRelay", "DifferentTypesOfRelay")
                        .WithMany()
                        .HasForeignKey("RelayTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.MeteringPanelModels.TblMeteringPanel", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentMeter", "AmpereMeter")
                        .WithMany()
                        .HasForeignKey("AmpereMeterId");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookupAnnuciator", "AnnuciatorForFeeder")
                        .WithMany()
                        .HasForeignKey("AnnuciatorIdForFeeder");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookupAnnuciator", "AnnuciatorForTransformer")
                        .WithMany()
                        .HasForeignKey("AnnuciatorIdForTransformer");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentRelay", "AuxiliaryFlagRelayForTransformer")
                        .WithMany()
                        .HasForeignKey("AuxiliaryFlagRelayIdForTransformer");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookupControlSwitch", "ControlSwitchForFeeder")
                        .WithMany()
                        .HasForeignKey("ControlSwitchId");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookupControlSwitch", "ControlSwitchForTransformer")
                        .WithMany()
                        .HasForeignKey("ControlSwitchIdForTransformer");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentRelay", "DifferentialRelayForTransformer")
                        .WithMany()
                        .HasForeignKey("DifferentialRelayIdForTransformer");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDimensionAndWeight", "MeteringPanelToDimensionAndWeight")
                        .WithMany()
                        .HasForeignKey("DimensionAndWeightId");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentRelay", "IdmtOverCurrentAndEarthFaultRelayForFeeder")
                        .WithMany()
                        .HasForeignKey("IdmtOverCurrentAndEarthFaultRelayId");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentRelay", "IdmtOverCurrentAndEarthFaultRelayForTransformer")
                        .WithMany()
                        .HasForeignKey("IdmtOverCurrentAndEarthFaultRelayIdForTransformer");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentMeter", "KWHandkVARHMeter")
                        .WithMany()
                        .HasForeignKey("KWHandkVARHMeterId");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentMeter", "MegaVarMeter")
                        .WithMany()
                        .HasForeignKey("MegaVarMeterId");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentMeter", "MegaWattMeter")
                        .WithMany()
                        .HasForeignKey("MegaWattMeterId");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentRelay", "RestrictedEarthFaultRelayForTransformer")
                        .WithMany()
                        .HasForeignKey("RestrictedEarthFaultRelayIdForTransformer");

                    b.HasOne("Pdb014App.Models.PDB.SubstrationModels.TblSubstation", "MeteringPanelToSubstation")
                        .WithMany()
                        .HasForeignKey("SubstationId");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentRelay", "TripCircuitSupervisionRelayForFeeder")
                        .WithMany()
                        .HasForeignKey("TripCircuitSupervisionRelayId");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentRelay", "TripCircuitSupervisionRelayForTransformer")
                        .WithMany()
                        .HasForeignKey("TripCircuitSupervisionRelayIdForTransformer");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentRelay", "TripRelayForFeeder")
                        .WithMany()
                        .HasForeignKey("TripRelayId");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentRelay", "TripRelayForTransformer")
                        .WithMany()
                        .HasForeignKey("TripRelayIdForTransformer");

                    b.HasOne("Pdb014App.Models.PDB.MeteringPanelModels.LookUpDifferentMeter", "VoltMeterWithSelectorSwitch")
                        .WithMany()
                        .HasForeignKey("VoltMeterId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.Mount_BracketModels.TblSpecificationsOfMountBracket", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.TblPole", "SpecificationsOfMountBracketToPole")
                        .WithMany()
                        .HasForeignKey("PoleId");

                    b.HasOne("Pdb014App.Models.PDB.Mount_BracketModels.LookUpSpecificationsOfMountBracketType", "LookUpSpecificationsOfMountBracketType")
                        .WithMany()
                        .HasForeignKey("SpecificationsOfMountBracketTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.PhasePowerTransformerModel.TblPhasePowerTransformer", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.TblFeederLine", "PhasePowerTransformerTo33KvFeederLine")
                        .WithMany()
                        .HasForeignKey("FeederID33KvId");

                    b.HasOne("Pdb014App.Models.PDB.SubstrationModels.TblSubstation", "PhasePowerTransformerToSourceSubstation")
                        .WithMany()
                        .HasForeignKey("Source132or33kVSubstationId");

                    b.HasOne("Pdb014App.Models.PDB.SubstrationModels.TblSubstation", "PhasePowerTransformerToTblSubstation")
                        .WithMany()
                        .HasForeignKey("SubstationId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.PhasePowerTransformerModel.TblSurgeArrestor", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.PhasePowerTransformerModel.TblPhasePowerTransformer", "SurgeArrestorToPhasePowerTransformer")
                        .WithMany()
                        .HasForeignKey("PhasePowerTransformerId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.PoleModels.TblPoleMountedDofCutOutFuseLink", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.TblPole", "PoleMountedDofCutOutFuseLinkToPole")
                        .WithMany()
                        .HasForeignKey("PoleId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.PoleModels.TblPolePicture", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.TblPole", "PolePictureToPole")
                        .WithMany()
                        .HasForeignKey("PoleId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.ServicePointModels.TblConsumerData", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.TblFeederLine", "ConsumerDataToFeederLine")
                        .WithMany()
                        .HasForeignKey("FeederLineId");

                    b.HasOne("Pdb014App.Models.PDB.ServicePointModels.TblServicePoint", "ConsumerDataToServicePoint")
                        .WithMany()
                        .HasForeignKey("ServicePointId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.ServicePointModels.TblServicePoint", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.TblFeederLine", "ServicePointToFeederLine")
                        .WithMany()
                        .HasForeignKey("FeederLineId");

                    b.HasOne("Pdb014App.Models.PDB.TblPole", "ServicePointToPole")
                        .WithMany()
                        .HasForeignKey("PoleId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.LookUpAuxiliaryTransformer", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.SubstrationModels.TblSubstation", "AuxiliaryTransformerToSubstation")
                        .WithMany()
                        .HasForeignKey("SubstationId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.LookUpBatteryCharger", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.SubstrationModels.TblSubstation", "BatteryChargerToSubstation")
                        .WithMany()
                        .HasForeignKey("SubstationId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.LookUpNiCdBattery110vDc", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.SubstrationModels.TblSubstation", "NiCdBattery110VDcToSubstation")
                        .WithMany()
                        .HasForeignKey("SubstationId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.TblAutoCircuitReCloser", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.SubstrationModels.LookUpAutoCircuitReCloserType", "AutoCircuitReCloserType")
                        .WithMany()
                        .HasForeignKey("AutoCircuitReCloserTypeId");

                    b.HasOne("Pdb014App.Models.PDB.SubstrationModels.TblSubstation", "AutoCircuitReCloserIdToSubstation")
                        .WithMany()
                        .HasForeignKey("SubstationId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.TblOutDoorTypeVacumnCircuitBreaker", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.SubstrationModels.TblSubstation", "OutDoorTypeVacumnCircuitBreakerIdToSubstation")
                        .WithMany()
                        .HasForeignKey("SubstationId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.TblSubstation", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.LookUpModels.LookUpSnDInfo", "SubstrationToLookUpSnD")
                        .WithMany()
                        .HasForeignKey("SnDCode");

                    b.HasOne("Pdb014App.Models.PDB.SubstrationModels.LookUpSubstationType", "SubstationType")
                        .WithMany()
                        .HasForeignKey("SubstationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.TblSubstationPicture", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.SubstrationModels.TblSubstation", "SubstationPictureToSubstation")
                        .WithMany()
                        .HasForeignKey("SubstationId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SubstrationModels.TblSwitch33KvIsolator", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.SubstrationModels.TblSubstation", "Switch33KvIsolatorToSubstation")
                        .WithMany()
                        .HasForeignKey("SubstationId");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.LookUpPotentialTrans33KV", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.SwitchGearModels.TblSwitchGear", "PotentialTransformerToSwitchGear")
                        .WithMany()
                        .HasForeignKey("SwitchGearID");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.LookUpTerminationKits", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.SwitchGearModels.LookupBusBar", "LookupBusBar")
                        .WithMany()
                        .HasForeignKey("BusBarId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.TblIndoorOutdoorTypeProgrammableEnergyMeter", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.SwitchGearModels.TblSwitchGear", "IndoorOutdoorTypeProgrammableEnergyMeterToSwitchGear")
                        .WithMany()
                        .HasForeignKey("SwitchGearID");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.TblSwitchGear", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.SwitchGearModels.LookupBusBar", "SwitchGearToBusBar")
                        .WithMany()
                        .HasForeignKey("BusBarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.SwitchGearModels.LookUpCircuitBreaker", "SwitchGearToCircuitBreaker")
                        .WithMany()
                        .HasForeignKey("CircuitBreakerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.SwitchGearModels.LookUpCurrentTransformer", "SwitchGearToCurrentTransformer")
                        .WithMany()
                        .HasForeignKey("CurrentTransformerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.PhasePowerTransformerModel.TblPhasePowerTransformer", "SwitchGearToPhasePowerTransformer")
                        .WithMany()
                        .HasForeignKey("PhasePowerTransformerId");

                    b.HasOne("Pdb014App.Models.PDB.SubstrationModels.TblRelay", "SwitchGearToRelay")
                        .WithMany()
                        .HasForeignKey("RelayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.SwitchGearModels.LookupSf6SafetyAndLife", "SwitchGearToSf6SafetyAndLife")
                        .WithMany()
                        .HasForeignKey("Sf6SafetyAndLifeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.SwitchGearModels.LookUpSwitchGearType", "SwitchGearType")
                        .WithMany()
                        .HasForeignKey("SwitchGearTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.SwitchGearModels.LookUpSwitchGearUnit", "SwitchGearToSwitchGearUnit")
                        .WithMany()
                        .HasForeignKey("SwitchGearUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.SwitchGearModels.LookUpSwitchPosition", "SwitchGearToSwitchPosition")
                        .WithMany()
                        .HasForeignKey("SwitchPositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.SwitchGearModels.TblXLPEaluminiumCopperGalvanize11KV", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.SwitchGearModels.TblSwitchGear", "TblSwitchGear")
                        .WithMany()
                        .HasForeignKey("SwitchGearID");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.TblFeederLine", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.SubstrationModels.LookUpFeederLineType", "FeederLineType")
                        .WithMany()
                        .HasForeignKey("FeederLineTypeId");

                    b.HasOne("Pdb014App.Models.PDB.LookUpModels.LookUpRouteInfo", "FeederLineToRoute")
                        .WithMany()
                        .HasForeignKey("RouteCode");
                });

            modelBuilder.Entity("Pdb014App.Models.PDB.TblPole", b =>
                {
                    b.HasOne("Pdb014App.Models.PDB.TblFeederLine", "PoleToFeederLine")
                        .WithMany()
                        .HasForeignKey("FeederLineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.LookUpSagCondition", "PhaseACondition")
                        .WithMany()
                        .HasForeignKey("PhaseAId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.LookUpSagCondition", "PhaseBCondition")
                        .WithMany()
                        .HasForeignKey("PhaseBId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.LookUpSagCondition", "PhaseCCondition")
                        .WithMany()
                        .HasForeignKey("PhaseCId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.LookUpPoleCondition", "PoleCondition")
                        .WithMany()
                        .HasForeignKey("PoleConditionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.LookUpPoleType", "PoleType")
                        .WithMany()
                        .HasForeignKey("PoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pdb014App.Models.PDB.LookUpModels.LookUpRouteInfo", "PoleToRoute")
                        .WithMany()
                        .HasForeignKey("RouteCode");

                    b.HasOne("Pdb014App.Models.PDB.TblFeederLine", "PoleToSourceFeederLine")
                        .WithMany()
                        .HasForeignKey("SourceCableId");

                    b.HasOne("Pdb014App.Models.PDB.TblFeederLine", "PoleToTargetFeederLine")
                        .WithMany()
                        .HasForeignKey("TargetCableId");
                });
#pragma warning restore 612, 618
        }
    }
}
