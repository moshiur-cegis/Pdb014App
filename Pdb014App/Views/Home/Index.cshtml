@model IEnumerable<Pdb014App.Models.Report.ZoneWiseData>

@{
    ViewData["Title"] = "Home";
    Layout = "~/Views/Shared/_Layout.cshtml";

    System.Globalization.CultureInfo bdCulture = new System.Globalization.CultureInfo("bn-BD");
}


@section Styles {
    <style type="text/css">

        .title_txt {
            display: inline-block;
            width: 100%;
            min-height: 40px;
            margin: 0 auto 5px auto;
            padding: 0;
            color: #17a;
            letter-spacing: 0.5px;
            font: 600 17px/1.2 Roboto, "Helvetica Neue", Arial, sans-serif;
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
        }

        .num_txt {
            display: inline-block;
            margin: 0 auto;
            padding: 0;
            color: #05a;
            font: 700 20px/1.2 "Varela Round", "Open Sans", Lato, Helvetica, Arial, Lucida, sans-serif;
        }


        .table-info {
            margin: 0 auto;
            color: #024;
            font-size: 0.85rem;
        }

            .table-info th,
            .table-info thead th,
            .table-info thead tr th {
                border: 1px solid #ddd !important;
                padding: 3px 5px;
                text-align: center;
                font-weight: 600;
                color: #fff;
                background-color: #13758d;
                background-color: #08a;
            }

            .table-info td,
            .table-info tbody td,
            .table-info tbody tr td {
                border: 1px solid #ddd !important;
                padding: 2px 5px;
                color: #024;
                text-align: center;
                font-weight: 400;
                background-color: #fff;
            }

            .table-info tr.alt td,
            .table-info tbody tr.alt td {
                background-color: #f5fcfe;
                background-color: #e5f7fc;
            }
    </style>
}

<div class="row">
    <div class="col-md-3">
        <div class="card pd-10 bd-0 shadow-base text-center rounded overflow-hidden" style="border:1px solid rgba(0, 0, 0, 0.25);">
            <p class="title_txt">No. of Substation</p>
            <p class="num_txt">@ViewBag.SsCount.ToString("N0", bdCulture)</p>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card pd-10 bd-0 shadow-base text-center rounded overflow-hidden" style="border:1px solid rgba(0, 0, 0, 0.25);">
            <p class="title_txt">No. of Feeder</p>
            <p class="num_txt">@ViewBag.FlCount.ToString("N0", bdCulture)</p>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card pd-10 bd-0 shadow-base text-center rounded overflow-hidden" style="border:1px solid rgba(0, 0, 0, 0.25);">
            <p class="title_txt">Distribution Transformer</p>
            <p class="num_txt">@ViewBag.DtCount.ToString("N0", bdCulture)</p>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card pd-10 bd-0 shadow-base text-center rounded overflow-hidden" style="border:1px solid rgba(0, 0, 0, 0.25);">
            <p class="title_txt">No. of Poles</p>
            <p class="num_txt">@ViewBag.PlCount.ToString("N0", bdCulture)</p>
        </div>
    </div>
</div>
<!-- row -->

<div class="row">
    <div class="col-md-7">
        <div class="pd-x-0 pd-t-20">
            <div class="card pd-10 bd-0 shadow-base text-center overflow-y-auto">

                <table class="table-info" style="height: 320px; width: 100%">
                    <thead>
                        <tr>
                            <th rowspan="2">Zone</th>
                            <th colspan="3">S/S</th>
                            <th colspan="3">Feeder</th>
                            <th rowspan="2">P/T</th>
                            <th colspan="3">D/T</th>
                            <th rowspan="2">Pole</th>
                        </tr>
                        <tr>
                            <th>33kV/11kV</th>
                            <th>33kV</th>
                            <th>Total</th>

                            <th>11kV</th>
                            <th>33kV</th>
                            <th>Total</th>

                            <th>11kV</th>
                            <th>33kV</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int ic = 0;

                            foreach (var item in Model)
                            {
                                ++ic;
                                if (!item.Name.ToLower().Equals("total"))
                                {
                                    <tr @((ic % 2 == 0) ? " class=alt" : "")>
                                        <td style="text-align:left;">@item.Name</td>
                                        <td style="text-align:right;">@(item.St11?.ToString("N0", bdCulture))</td>
                                        <td style="text-align:right;">@(item.St33?.ToString("N0", bdCulture))</td>
                                        <td style="text-align:right;">@(item.St?.ToString("N0", bdCulture))</td>
                                        <td style="text-align:right;">@(item.Fl11?.ToString("N0", bdCulture))</td>
                                        <td style="text-align:right;">@(item.Fl33?.ToString("N0", bdCulture))</td>
                                        <td style="text-align:right;">@(item.Fl?.ToString("N0", bdCulture))</td>
                                        <td style="text-align:right;">@(item.Pt?.ToString("N0", bdCulture))</td>
                                        <td style="text-align:right;">@(item.Dt11?.ToString("N0", bdCulture))</td>
                                        <td style="text-align:right;">@(item.Dt33?.ToString("N0", bdCulture))</td>
                                        <td style="text-align:right;">@(item.Dt?.ToString("N0", bdCulture))</td>
                                        <td style="text-align:right;">@(item.Pl?.ToString("N0", bdCulture))</td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <th style="text-align:right;">@item.Name</th>
                                        <th style="text-align:right;">@(item.St11?.ToString("N0", bdCulture))</th>
                                        <th style="text-align:right;">@(item.St33?.ToString("N0", bdCulture))</th>
                                        <th style="text-align:right;">@(item.St?.ToString("N0", bdCulture))</th>
                                        <th style="text-align:right;">@(item.Fl11?.ToString("N0", bdCulture))</th>
                                        <th style="text-align:right;">@(item.Fl33?.ToString("N0", bdCulture))</th>
                                        <th style="text-align:right;">@(item.Fl?.ToString("N0", bdCulture))</th>
                                        <th style="text-align:right;">@(item.Pt?.ToString("N0", bdCulture))</th>
                                        <th style="text-align:right;">@(item.Dt11?.ToString("N0", bdCulture))</th>
                                        <th style="text-align:right;">@(item.Dt33?.ToString("N0", bdCulture))</th>
                                        <th style="text-align:right;">@(item.Dt?.ToString("N0", bdCulture))</th>
                                        <th style="text-align:right;">@(item.Pl?.ToString("N0", bdCulture))</th>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>

            </div>
        </div>
    </div>

    <div class="col-md-5">
        <div class="pd-x-0 pd-t-20">
            <div class="card pd-10 bd-0 shadow-base text-center">
                <div id="chart_1_2" class="text-center" style="max-height: 320px">
                    <div class="spinner-grow text-primary" role="status">
                        <span class="sr-only">Loading... . .</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<div class="row">
    <div class="col-md-6">
        <div class="pd-x-0 pd-t-20">
            <div class="card pd-10 bd-0 shadow-base text-center">
                <div id="chart_2_1" class="text-center">
                    <div class="spinner-grow text-danger" role="status">
                        <span class="sr-only">Loading... . . </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="pd-x-0 pd-t-20">
            <div class="card pd-10 bd-0 shadow-base text-center">
                <div id="chart_2_2" class="text-center">
                    <div class="spinner-grow text-info" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts
{
    <script src="~/lib/highcharts/highcharts.js"></script>

    <script type="text/javascript">

        var url = '@Url.Action("GetPoleData", "AdvancedReport")',
            reportName = "Pole",
            chartType = "bar",
            regionLevel = "zone",
            headerList = {},
            dataColumns = [],
            chartDataPie = [];


        $(function () {

            chartType = "pie";
            regionLevel = "circle";
            set_basic_info(regionLevel, "ss");
            load_chart_data("chart_1_2", reportName, chartType, regionLevel, headerList, dataColumns, url);


            chartType = "bar";
            regionLevel = "zone";

            set_basic_info(regionLevel, "fl");
            load_chart_data("chart_2_2", reportName, chartType, regionLevel, headerList, dataColumns, url);
            
            set_basic_info(regionLevel, "pl");
            load_chart_data("chart_2_1", reportName, chartType, regionLevel, headerList, dataColumns, url);

            //set_basic_info(regionLevel, "ss");
            //load_chart_data("chart_2_1", reportName, chartType, regionLevel, headerList, dataColumns, url);
            //load_chart_data("chart_2_2", reportName, chartType, regionLevel, headerList, dataColumns, url);
            //set_basic_info(regionLevel, "dt");
            //load_chart_data("chart_2_2", reportName, chartType, regionLevel, headerList, dataColumns, url);

        });



        function set_basic_info(regionLevel, reportOpt) {

            headerList = {};
            dataColumns = [];

            switch (regionLevel) {
            case "zone":
                headerList["zoneName"] = "Zone Name";
                break;

            case "circle":
                headerList["zoneName"] = "Zone Name";
                headerList["circleName"] = "Circle Name";
                break;

            case "snd":
                headerList["zoneName"] = "Zone Name";
                headerList["circleName"] = "Circle Name";
                headerList["sndName"] = "S&D Name";
                break;

            case "substation":
                headerList["zoneName"] = "Zone Name";
                headerList["circleName"] = "Circle Name";
                headerList["sndName"] = "S&D Name";
                headerList["substationName"] = "Sub-station Name";
                break;

            default:
                headerList["zoneName"] = "Zone Name";
                break;
            }


            switch (reportOpt) {
            case "pl":
                reportName = "Pole";
                url = '@Url.Action("GetPoleData", "AdvancedReport")';

                headerList["totalCount"] = "Total Pole";
                headerList["totalSpcCount"] = "SPC Pole";
                headerList["totalSpCount"] = "SP Pole";
                headerList["totalTowerCount"] = "Tower Pole";
                headerList["totalOthersCount"] = "Others Pole";
                headerList["totalAgedCount"] = "Aged Pole";
                headerList["totalBadCount"] = "Bad Pole";
                headerList["totalBrokenCount"] = "Broken Pole";
                headerList["totalGoodCount"] = "Good Pole";
                headerList["totalNeutralPole"] = "Has Neutral Cable";
                headerList["totalStreetLight"] = "Has Street Light";
                headerList["totalWireLength"] = "Wire Length (Km)";

                dataColumns = ["totalCount", "totalSpcCount", "totalSpCount", "totalTowerCount", "totalOthersCount", "totalAgedCount", "totalBadCount", "totalBrokenCount", "totalGoodCount", "totalNeutralPole", "totalStreetLight", "totalWireLength"];

                break;

            case "ss":
                reportName = "Sub-Station";
                url = '@Url.Action("GetSubstationData", "AdvancedReport")';

                headerList["totalCount"] = "Total Substation";
                headerList["total11Count"] = "33/11 kV Substation";
                headerList["total33Count"] = "132/33 kV Substation";
                headerList["totalCapacity"] = "Capacity (MVA)";
                headerList["totalDemand"] = "Demand (Max) (MW)";
                headerList["totalPeakLoad"] = "Peak Load (MW)";
                headerList["maxPeakLoad"] = "Max Peak Load (MW)";
                headerList["minPeakLoad"] = "Min Peak Load (MW)";

                dataColumns = ["totalCount", "total11Count", "total33Count", "totalCapacity", "totalDemand", "totalPeakLoad", "maxPeakLoad", "minPeakLoad"];

                break;

            case "fl":
                reportName = "Feeder Line";
                url = '@Url.Action("GetFeederLineData", "AdvancedReport")';

                headerList["totalCount"] = "Total Feeder Line";
                headerList["total11Count"] = "11KV Feeder Line";
                headerList["total33Count"] = "33KV Feeder Line";
                headerList["totalFeederLength"] = "Feeder Length (Km)";
                headerList["total11FeederLength"] = "11KV Feeder Length (Km)";
                headerList["total33FeederLength"] = "33KV Feeder Length (Km)";
                headerList["totalMaxDemand"] = "Maximum Demand (MW)";
                headerList["totalPeakDemand"] = "Peak Demand (MW)";
                headerList["totalMaxLoad"] = "Maximum Load (MW)";
                headerList["totalSanctionedLoad"] = "Sanctioned Load (MW)";

                dataColumns = ["totalCount", "total11Count", "total33Count", "totalFeederLength", "total11FeederLength", "total33FeederLength", "totalMaxDemand", "totalPeakDemand", "totalMaxLoad", "totalSanctionedLoad"];

                break;

            case "dt":
                reportName = "Distribution Transformer";
                url = '@Url.Action("GetDistributionTransformerData", "AdvancedReport")';


                headerList["totalIcPadCount"] = "Installed Condition (Pad)";
                headerList["totalIcPoleMountCount"] = "Installed Condition (Pole Mounted)";
                headerList["totalIpIndoorCount"] = "Installed Place (Indoor)";
                headerList["totalIpOutdoorCount"] = "Installed Place (Outdoor)";
                headerList["totalBpdbDtCount"] = "Owner (BPDB)";
                headerList["totalConsumerDtCount"] = "Owner (Consumer)";
                headerList["totalOlYesCount"] = "Oil Leakage (Yes)";
                headerList["totalOlNoCount"] = "Oil Leakage (No)";
                headerList["totalPmAngleCount"] = "Platform Material (Angle)";
                headerList["totalPmChannelCount"] = "Platform Material (Channel)";

                    dataColumns = ["totalCount", "totalIcPoleMountCount", "totalIpIndoorCount", "totalIpOutdoorCount", "totalBpdbDtCount", "totalOlYesCount", "totalOlNoCount", "totalPmAngleCount", "totalPmChannelCount"];

                break;

            default:

                reportName = "Pole";
                url = '@Url.Action("GetPoleData", "AdvancedReport")';

                headerList["totalCount"] = "Total Pole";
                headerList["totalSpcCount"] = "SPC Pole";
                headerList["totalSpCount"] = "SP Pole";
                headerList["totalTowerCount"] = "Tower Pole";
                headerList["totalOthersCount"] = "Others Pole";
                headerList["totalAgedCount"] = "Aged Pole";
                headerList["totalBadCount"] = "Bad Pole";
                headerList["totalBrokenCount"] = "Broken Pole";
                headerList["totalGoodCount"] = "Good Pole";
                headerList["totalNeutralPole"] = "Has Neutral Cable";
                headerList["totalStreetLight"] = "Has Street Light";
                headerList["totalWireLength"] = "Wire Length (Km)";

                dataColumns = ["totalCount", "totalSpcCount", "totalSpCount", "totalTowerCount", "totalOthersCount", "totalAgedCount", "totalBadCount", "totalBrokenCount", "totalGoodCount", "totalNeutralPole", "totalStreetLight", "totalWireLength"];

                break;
            }
        }


        function load_chart_data(containerId, reportName, chartType, regionLevel, headerList, dataColumns, url) {

            $.ajax({
                type: 'POST',
                url: url,
                dataType: "json",
                data: { "regionLevel": regionLevel },
                //before: $("#busy-indicator").fadeIn(150),
                success: function(data) {
                    $("#" + containerId).empty();
                    if (dataColumns && dataColumns.length > 0) {
                        if (chartType == 'bar') {
                            set_bar_chart(containerId, reportName, regionLevel, headerList, dataColumns, data);
                        } else {
                            set_pie_chart(containerId, reportName, regionLevel, headerList, dataColumns, data);
                        }
                    }
                    //else {
                    //    //$("#dataView").css('display', 'none');
                    //    //$("#chartAll").css('display', 'none');
                    //    //msg.init("warning", "Warning... . . !", "Select at least one data field... . . !! ");
                    //}
                    //$("#busy-indicator").fadeOut(150);
                },
                error: function(ex, status, error) {
                    ////$("#busy-indicator").fadeOut(150);
                    ////msg.init("error", "Error... . . !", "Failed to load data. <br/>" + ex.responseText);
                },
                //complete: $("#busy-indicator").fadeOut(150),
            });

            return true;
        }


        function set_bar_chart(containerId, reportName, regionLevel, headers, chartColumns, rawData) {

            var chartTitle = reportName + ' Report',
                chartSubTitle = '', //'Source: bpdb_app.com',
                chartCategories = [],
                chartDataSeries = [],
                barYAxises = [],
                barData = [],
                yAxisIndex = [],
                barYAxisLeft = false,
                ci = 0;

            for (ci = 0; ci < chartColumns.length; ci++) {
                barData[chartColumns[ci]] = [];
            }

            for (var di = 0; di < rawData.length; di++) {
                chartCategories.push(rawData[di][regionLevel + "Name"]);

                for (ci = 0; ci < chartColumns.length; ci++) {
                    var cellValue = rawData[di][chartColumns[ci]];
                    if (!cellValue || cellValue == null) {
                        cellValue = 0;
                    } else if (chartColumns[ci].toLocaleLowerCase().indexOf("capacity") !== -1) {
                        cellValue = cellValue.split('/')[0];
                    }

                    cellValue = 1 * cellValue;

                    barData[chartColumns[ci]].push(cellValue);
                }
            }

            for (ci = 0; ci < chartColumns.length; ci++) {

                var dataName = headers[[chartColumns[ci]]],
                    colData = {
                        name: dataName,
                        data: barData[chartColumns[ci]],
                        type: 'column'
                    };

                if (chartColumns[ci].toLocaleLowerCase().indexOf("length") !== -1) {
                    if (yAxisIndex[1] == undefined) {
                        yAxisIndex[1] = yAxisIndex[0] == undefined
                            ? (yAxisIndex[2] == undefined ? 0 : 1)
                            : (yAxisIndex[2] == undefined ? 1 : 2);

                        barYAxises.push({ // Secondary yAxis
                            gridLineWidth: 1,
                            title: {
                                text: 'Length',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            labels: {
                                format: '{value:,.0f} (Km)',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            opposite: barYAxisLeft
                        });

                        barYAxisLeft = true;
                    }

                    colData.yAxis = yAxisIndex[1];
                    colData.tooltip = {
                        headerFormat:
                            '<span style="width:100%; text-align:center; font-size:13px; font-weight:600; color:#15a;">{point.key}</span><table>',
                        pointFormat:
                            '<tr><td><span style="display:block; width:10px; height:10px; border-radius:10px; background-color:{series.color}"></span></td>' +
                                '<td style="color:{series.color}">{series.name}: </td>' +
                                '<td style="padding-left:8px; text-align:right"><b>{point.y:,.0f}</b></td><td>(Km)</td></tr>',
                        footerFormat: '</table>',
                        valueSuffix: ' (Km)'
                    }

                } else if (chartColumns[ci].toLocaleLowerCase().indexOf("capacity") !== -1) {
                    if (yAxisIndex[1] == undefined) {
                        yAxisIndex[1] = yAxisIndex[0] == undefined
                            ? (yAxisIndex[2] == undefined ? 0 : 1)
                            : (yAxisIndex[2] == undefined ? 1 : 2);

                        barYAxises.push({ // Secondary yAxis
                            gridLineWidth: 1,
                            title: {
                                text: 'Capacity',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            labels: {
                                format: '{value:,.1f} (MVA)',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            opposite: barYAxisLeft
                        });

                        barYAxisLeft = true;
                    }

                    colData.yAxis = yAxisIndex[1];
                    colData.tooltip = {
                        headerFormat:
                            '<span style="width:100%; text-align:center; font-size:13px; font-weight:600; color:#15a;">{point.key}</span><table>',
                        pointFormat:
                            '<tr><td><span style="display:block; width:10px; height:10px; border-radius:10px; background-color:{series.color}"></span></td>' +
                                '<td style="color:{series.color}">{series.name}: </td>' +
                                '<td style="padding-left:8px; text-align:right"><b>{point.y:,.1f}</b></td><td>(MVA)</td></tr>',
                        footerFormat: '</table>',
                        valueSuffix: ' (MVA)'
                    }

                } else if (chartColumns[ci].toLocaleLowerCase().indexOf("demand") !== -1 ||
                    chartColumns[ci].toLocaleLowerCase().indexOf("load") !== -1) {

                    if (yAxisIndex[2] == undefined) {
                        yAxisIndex[2] = yAxisIndex[0] == undefined
                            ? (yAxisIndex[1] == undefined ? 0 : 1)
                            : (yAxisIndex[1] == undefined ? 1 : 2);

                        barYAxises.push({ // Tertiary yAxis
                            gridLineWidth: 1,
                            title: {
                                text: 'Demand / Load',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            labels: {
                                format: '{value:,.1f} (MW)',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            opposite: barYAxisLeft
                        });

                        barYAxisLeft = true;
                    }

                    colData.yAxis = yAxisIndex[2];
                    colData.tooltip = {
                        headerFormat:
                            '<span style="width:100%; text-align:center; font-size:13px; font-weight:600; color:#15a;">{point.key}</span><table>',
                        pointFormat:
                            '<tr><td><span style="display:block; width:10px; height:10px; border-radius:10px; background-color:{series.color}"></span></td>' +
                                '<td style="color:{series.color}">{series.name}: </td>' +
                                '<td style="padding-left:8px; text-align:right"><b>{point.y:,.1f}</b></td><td>(MW)</td></tr>',
                        footerFormat: '</table>',
                        valueSuffix: ' (MW)'
                    }

                } else {
                    if (yAxisIndex[0] == undefined) {
                        yAxisIndex[0] = yAxisIndex[1] == undefined
                            ? (yAxisIndex[2] == undefined ? 0 : 1)
                            : (yAxisIndex[2] == undefined ? 1 : 2);

                        barYAxises.push({ // Primary yAxis
                            gridLineWidth: 1,
                            title: {
                                text: 'Unit Count',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            labels: {
                                format: '{value:,.0f}',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            opposite: barYAxisLeft
                        });

                        barYAxisLeft = true;
                    }

                    colData.yAxis = yAxisIndex[0];
                    colData.tooltip = {
                        headerFormat:
                            '<span style="width:100%; text-align:center; font-size:13px; font-weight:600; color:#15a;">{point.key}</span><table>',
                        pointFormat:
                            '<tr><td><span style="display:block; width:10px; height:10px; border-radius:10px; background-color:{series.color}"></span></td>' +
                                '<td style="color:{series.color}">{series.name}: </td>' +
                                '<td style="padding-left:8px; text-align:right"><b>{point.y:,.0f}</b></td><td></td></tr>',
                        footerFormat: '</table>',
                        valueSuffix: ''
                    }

                }

                chartDataSeries.push(colData);
            }

            //[ "#F7464A", "#45BFBD", "#FDB45C", "#FEDCBA","#ABCDEF", "#DDDDDD", "#ABCABC"  ]
            Highcharts.setOptions({
                colors: [
                    '#50B534', '#F04A3D', '#8085E8', '#DDDF00', '#0C9BCE', '#70ED5D', "#ED454A", '#7CB5EC', "#FDB35C",
                    "#45BFBD", '#ED562B', '#24CBE5', '#63E573', '#F29855', '#F0ED5E', '#6AF9C5', "#FEDCBA", "#ABCDEF",
                    "#DDDDEE", "#ABCABC"
                ]
            });


            Highcharts.chart(containerId,
                {
                    chart: {
                        zoomType: 'xy'
                    },
                    title: {
                        text: chartTitle,
                        align: 'center'
                    },
                    subtitle: {
                        text: chartSubTitle,
                        align: 'center'
                    },
                    credits: {
                        enabled: false
                    },
                    tooltip: {
                        shared: true,
                        useHTML: true,
                        headerFormat:
                            '<span style="width:100%; text-align:center; font-size:13px; font-weight:600; color:#15a;">{point.key}</span><br/>',
                    },
                    xAxis: [
                        {
                            categories: chartCategories,
                            crosshair: true,
                        }
                    ],
                    yAxis: barYAxises,
                    series: chartDataSeries,
                    responsive: {
                        rules: [
                            {
                                condition: {
                                    maxWidth: 500
                                },
                                chartOptions: {
                                    legend: {
                                        floating: false,
                                        layout: 'horizontal',
                                        align: 'center',
                                        verticalAlign: 'bottom',
                                        x: 0,
                                        y: 0
                                    }
                                }
                            }
                        ]
                    },
                    exporting: {
                        enabled: false,
                        buttons: {
                        }
                    }

                });

            return;
        }


        function set_pie_chart(containerId, reportName, regionLevel, headers, chartColumns, rawData) {

            //var $pieOpts = $("#" + containerId + "_pie_opts");

            var chartTitle = reportName + ' Report',
                chartSubTitle = '',
                chartCategories = [],
                pieData = [],
                ci = 0;

            for (ci = 0; ci < chartColumns.length; ci++) {
                pieData[chartColumns[ci]] = [];
            }

            for (var di = 0; di < rawData.length; di++) {
                chartCategories.push(rawData[di][regionLevel + "Name"]);

                for (ci = 0; ci < chartColumns.length; ci++) {
                    var cellValue = rawData[di][chartColumns[ci]];
                    if (!cellValue || cellValue == null) {
                        cellValue = 0;
                    } else if (chartColumns[ci].toLocaleLowerCase().indexOf("capacity") !== -1) {
                        cellValue = cellValue.split('/')[0];
                    }

                    cellValue = 1 * cellValue;

                    pieData[chartColumns[ci]].push({
                        name: rawData[di][regionLevel + "Name"],
                        y: cellValue
                    });
                }
            }


            chartDataPie = [];

            for (ci = 0; ci < chartColumns.length; ci++) {

                var dataName = headers[[chartColumns[ci]]],
                    pisData = {
                        title: dataName,
                        series: [
                            {
                                name: dataName,
                                colorByPoint: true,
                                data: pieData[chartColumns[ci]]
                            }
                        ],
                    };

                if (chartColumns[ci].toLocaleLowerCase().indexOf("length") !== -1) {
                    pisData.pointFormat =
                        '<span style="color:{point.color}">{series.name}</span>: {point.y:,.0f}Km (<b>{point.percentage:.2f}%</b>)';
                    pisData.plotFormat = '{point.name}: {point.y:,.0f}Km (<b>{point.percentage:.1f}%</b>)';

                } else if (chartColumns[ci].toLocaleLowerCase().indexOf("capacity") !== -1) {
                    pisData.pointFormat =
                        '<span style="color:{point.color}">{series.name}</span>: {point.y:,.1f}MVA (<b>{point.percentage:.2f}%</b>)';
                    pisData.plotFormat = '{point.name}: {point.y:,.1f}MVA (<b>{point.percentage:.1f}%</b>)';

                } else if (chartColumns[ci].toLocaleLowerCase().indexOf("demand") !== -1 ||
                    chartColumns[ci].toLocaleLowerCase().indexOf("load") !== -1) {
                    pisData.pointFormat =
                        '<span style="color:{point.color}">{series.name}</span>: {point.y:,.1f}MW (<b>{point.percentage:.2f}%</b>)';
                    pisData.plotFormat = '{point.name}: {point.y:,.1f}MW (<b>{point.percentage:.1f}%</b>)';
                } else {
                    pisData.pointFormat =
                        '<span style="color:{point.color}">{series.name}</span>: {point.y:,.0f} (<b>{point.percentage:.2f}%</b>)';
                    pisData.plotFormat = '{point.name}: {point.y:,.0f} (<b>{point.percentage:.1f}%)</b>';
                }

                chartDataPie.push(pisData);
            }

            //[ "#F7464A", "#45BFBD", "#FDB45C", "#FEDCBA","#ABCDEF", "#DDDDDD", "#ABCABC"  ]
            Highcharts.setOptions({
                colors: [
                    '#50B534', '#F04A3D', '#8085E8', '#DDDF00', '#0C9BCE', '#70ED5D', "#ED454A", '#7CB5EC', "#FDB35C",
                    "#45BFBD", '#ED562B', '#24CBE5', '#63E573', '#F29855', '#F0ED5E', '#6AF9C5', "#FEDCBA", "#ABCDEF",
                    "#DDDDEE", "#ABCABC"
                ]
            });


            Highcharts.chart(containerId,
                {
                    chart: {
                        plotBackgroundColor: null,
                        plotBorderWidth: null,
                        plotShadow: false,
                        type: 'pie'
                    },
                    title: {
                        text: chartTitle,
                        align: 'center',
                    },
                    subtitle: {
                        text: chartDataPie[0].title,
                        align: 'center'
                    },
                    credits: {
                        enabled: false
                    },
                    tooltip: {
                        shared: true,
                        headerFormat:
                            '<span style="color:#15a; font-size:13px; font-weight:600;">{point.key}</span><br>',
                        pointFormat: chartDataPie[0].pointFormat
                    },
                    plotOptions: {
                        pie: {
                            showInLegend: true,
                            dataLabels: {
                                enabled: true,
                                format: chartDataPie[0].plotFormat,
                                //distance: -50,
                                style: {
                                    color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                                }
                            }
                        }
                    },
                    series: chartDataPie[0].series,
                    responsive: {
                        rules: [
                            {
                                condition: {
                                    maxWidth: 500
                                },
                                chartOptions: {
                                    legend: {
                                        floating: false,
                                        layout: 'horizontal',
                                        align: 'center',
                                        verticalAlign: 'bottom',
                                        x: 0,
                                        y: 0
                                    }
                                }
                            }
                        ]
                    },
                    exporting: {
                        enabled: false,
                        buttons: {
                        },
                    }
                });


            return;
        }


    </script>


}