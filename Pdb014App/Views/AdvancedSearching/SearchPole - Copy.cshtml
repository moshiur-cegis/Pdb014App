@model PagingList<Pdb014App.Models.PDB.TblPole>

@using ReflectionIT.Mvc.Paging
@addTagHelper *, ReflectionIT.Mvc.Paging


@{
    ViewData["Title"] = "Search Pole Information";
    Layout = "~/Views/Shared/_Layout.cshtml";

    Model.Action = "SearchPole";

    var totalRecords = ViewBag.TotalRecords;
    var searchRecords = Model.TotalRecordCount;


    var rlCount = 5;
    var regionList = ViewBag.RegionList as List<string>;
    if (regionList == null || regionList.Count < 1)
    {
        regionList = new List<string>(rlCount) { "", "", "", "", "" };
    }
    else if (regionList.Count < rlCount)
    {
        for (int rc = regionList.Count; rc < rlCount; ++rc)
        {
            regionList.Add("");
        }
    }

    var spCount = 3;
    var searchParameters = ViewBag.SearchParameters as List<List<string>>;
    if (searchParameters == null || searchParameters.Count < 1)
    {
        searchParameters = new List<List<string>>(spCount);
    }
}


@section Styles {
    <link href="~/css/datastyle.css" rel="stylesheet" />
    <link href="~/css/search.style.css" rel="stylesheet" />
}


<h2>@ViewData["Title"]</h2>

<hr />

<div class="row">
    <div class="col-md-12">
        <form method="get" asp-controller="AdvancedSearching" asp-action="SearchPole">

            <div class="row">
                <div class="col-md-6">

                    <input type="hidden" name="cai" value="@Model.RouteValue["cai"]" />

                    <fieldset>
                        <legend>▣ Regional Boundaries</legend>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">Zone</label>
                                    <select id="ZoneCode" asp-for="@regionList[0]" class="form-control" asp-items="ViewBag.ZoneList">
                                        <option value="" selected="selected">----- all zone -----</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">Circle</label>
                                    <select id="CircleCode" asp-for="@regionList[1]" class="form-control" asp-items="ViewBag.CircleList">
                                        <option value="" selected="selected">----- all circle -----</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">S&D</label>
                                    <select id="SnDCode" asp-for="@regionList[2]" class="form-control" asp-items="ViewBag.SnDList">
                                        <option value="" selected="selected">----- all S&D -----</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">Substation</label>
                                    <select id="SubstationId" asp-for="@regionList[3]" class="form-control" asp-items="ViewBag.SubstationList">
                                        <option value="" selected="selected">----- all substation -----</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">Route</label>
                                    <select id="RouteCode" asp-for="@regionList[4]" class="form-control" asp-items="ViewBag.RouteList">
                                        <option value="" selected="selected">----- all route -----</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </fieldset>

                </div>

                <div class="col-md-6">

                    <fieldset>
                        <legend>▣ Search Options</legend>
                        <table id="tblSearchOptions" class="table table-responsive" cellpadding="0" cellspacing="0">
                            <thead>
                                <tr>
                                    <th style="width: 48%">Field Name</th>
                                    <th style="width: 70px">Operator</th>
                                    <th style="width: 50%">Field Value</th>
                                    <th style="width: 70px">Join (AND/OR)</th>
                                </tr>
                            </thead>

                            <tbody>

                                @for (int spc = 0; spc < spCount; ++spc)
                                {
                                    if (searchParameters.Count <= spc)
                                    {
                                        searchParameters.Add(new List<string>(4) { "", "", "", "" });
                                    }

                                    <tr>
                                        <td>
                                            <select id="fieldName" asp-for="@searchParameters[spc][0]" class="form-control text-left field-name" asp-items="ViewBag.FieldList">
                                                <option value="">--- Select ---</option>
                                            </select>
                                        </td>
                                        <td>
                                            <select id="operator" asp-for="@searchParameters[spc][1]" class="form-control text-center" asp-items="ViewBag.OperatorList">
                                                <option selected="" value=""></option>
                                            </select>
                                        </td>
                                        <td>
                                            <input id="fieldValue" asp-for="@searchParameters[spc][2]" autocomplete="off" class="form-control text-left field-value" />
                                        </td>
                                        <td>
                                            <select id="joinOption" asp-for="@searchParameters[spc][3]" class="form-control text-center">
                                                <option value="AND">AND</option>
                                                <option value="OR">OR</option>
                                            </select>
                                        </td>
                                    </tr>
                                }
                            </tbody>

                        </table>

                    </fieldset>

                    <div class="form-group" style="margin-top: 10px;">
                        <input type="submit" value="Search" class="btn btn-primary float-right" />
                    </div>
                </div>
            </div>

        </form>
    </div>
</div>


<div class="row">
    <div class="col-md-12">

        <hr />
        @if (searchRecords == totalRecords)
        {
            <strong>Total Records: <span style="font-size: 110%; color: #13d;">@totalRecords</span></strong>
        }
        else
        {
            <strong>Find <span style="font-size: 110%; color: #15c;">@searchRecords</span> Records out of <span style="font-size: 110%; color: #13d;">@totalRecords</span> Records</strong>
        }
        <hr />

        <div class="form-view" id="updatePanel">
            <div id="multi-form-wrapper" class="data-view multi-form-wrapper">
                <table id="multi-form-view" class="table table-responsive multi-form-view">

                    <thead>
                        <tr>
                            <th>
                                @Html.SortableHeaderFor(model => model.PoleId)
                            </th>

                            <th>
                                @Html.SortableHeaderFor(model => model.PoleToRoute.RouteToSubstation.SubstationToLookUpSnD.CircleInfo.ZoneInfo.ZoneName)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.PoleToRoute.RouteToSubstation.SubstationToLookUpSnD.CircleInfo.CircleName)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.PoleToRoute.RouteToSubstation.SubstationToLookUpSnD.LookUpAdminBndDistrict.DistrictName)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.PoleToRoute.RouteToSubstation.SubstationToLookUpSnD.SnDName)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.PoleToRoute.RouteToSubstation.SubstationName)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.PoleToRoute.RouteName)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.PoleToFeederLine.FeederName)
                            </th>


                            <th>
                                @Html.SortableHeaderFor(model => model.PoleNo)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.PreviousPoleNo)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.PoleTypeId)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.PoleConditionId)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.MSJNo)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.SleeveNo)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.TwistNo)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.PhaseAId)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.PhaseBId)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.PhaseCId)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.Neutral)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.StreetLight)
                            </th>
                            @*<th>
                                    @Html.SortableHeaderFor(model => model.SourceCableId)
                                </th>
                                <th>
                                    @Html.SortableHeaderFor(model => model.TargetCableId)
                                </th>*@
                            <th>
                                @Html.SortableHeaderFor(model => model.Latitude)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.Longitude)
                            </th>
                            <th>
                                @Html.SortableHeaderFor(model => model.SurveyDate)
                            </th>
                            @*@if (Context.Request.Query["cai"]=="de_pi_ed_01")
                                {
                                    <td>
                                        Action
                                    </td>
                                }*@
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    <a target="_blank" asp-controller="TblPoles" asp-action="Details" asp-route-id="@item.PoleId" asp-route-cai="@Model.RouteValue["cai"]" class="text-success hover-dark" data-toggle="tooltip" data-placement="top" title="Details">
                                        @Html.DisplayFor(modelItem => item.PoleId)
                                    </a>
                                    @*<a asp-controller="TblPoles" asp-action="Details" asp-all-route-data="@parms" asp-route-id="@item.PoleId" class="text-success hover-dark" data-toggle="tooltip" data-placement="top" title="Details">
                                            @Html.DisplayFor(modelItem => item.PoleId)
                                        </a>*@
                                </td>

                                <td>
                                    @Html.DisplayFor(modelItem => item.PoleToRoute.RouteToSubstation.SubstationToLookUpSnD.CircleInfo.ZoneInfo.ZoneName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PoleToRoute.RouteToSubstation.SubstationToLookUpSnD.CircleInfo.CircleName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PoleToRoute.RouteToSubstation.SubstationToLookUpSnD.LookUpAdminBndDistrict.DistrictName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PoleToRoute.RouteToSubstation.SubstationToLookUpSnD.SnDName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PoleToRoute.RouteToSubstation.SubstationName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PoleToRoute.RouteName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PoleToFeederLine.FeederName)
                                </td>

                                <td>
                                    @Html.DisplayFor(modelItem => item.PoleNo)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PreviousPoleNo)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PoleType.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PoleCondition.Name)
                                </td>

                                <td>
                                    @Html.DisplayFor(modelItem => item.MSJNo)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.SleeveNo)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.TwistNo)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PhaseACondition.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PhaseBCondition.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PhaseBCondition.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Neutral)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.StreetLight)
                                </td>
                                @*<td>
                                        @Html.DisplayFor(modelItem => item.PoleToSourceFeederLine.FeederName)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.PoleToTargetFeederLine.FeederName)
                                    </td>*@
                                <td>
                                    @Html.DisplayFor(modelItem => item.Latitude)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Longitude)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.SurveyDate)
                                </td>

                                @*@if(Context.Request.Query["cai"]=="de_pi_ed_01")
                                    {
                                    <td>
                                        <a asp-action="Edit" asp-route-id="@item.PoleId">Edit</a>
                                    </td>
                                    }*@

                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div style="text-align: center;">
            <vc:pager paging-list="@Model" />
        </div>


    </div>
</div>


@section Scripts{

    <script src="~/lib/jquery-ui/jquery-ui.min.js"></script>

    <script type="text/javascript">

        $(function () {

            $(".field-name").on("change",
                function () {
                    var fieldInfo = $(this).val(),
                        $fieldValue = $(this).closest("tr").find("input[type='text'].field-value"),
                        url = '@Url.Content("~/api/AutoComplete/search/")' + fieldInfo;

                    @*
                    //var l = '@Url.Action("Search", "AutoComplete", new { httproute = "api" })';
                    //console.log(l);
                        *@

                    $fieldValue.empty();

                    //$fieldValue.autocomplete({
                    //    //source: options,
                    //    source: function (request, response) {
                    //        $.getJSON(url,
                    //            request,
                    //            function (opts) {
                    //                opts = opts && opts.length > 500 ? opts.slice(0, 500) : opts;
                    //                response($.map(opts, function(opt) { return { label: opt, value: opt } }));
                    //            });
                    //    },

                    //    highlight: "highlight-text",
                    //    minLength: 0,
                    //    //autoFocus: true,
                    //    //focus: function () { $(this).trigger("keydown"); }
                    //}).on("focus", function () { $(this).trigger("keydown"); });

                    //return false;

                    $.ajax({
                        type: "GET",
                        url: url,
                        data: JSON.stringify({ fieldInfo: fieldInfo }),
                        dataType: "json",
                        contentType: "application/json",
                        //before: $("#busy-indicator").fadeIn(150),
                        success: function (options) {
                            if (!options)
                                return;

                            var ml = options.length < 500 ? 0 : options.length < 2500 ? 1 : options.length < 5000 ? 2 : 3;
                            $fieldValue.autocomplete({
                                source: options.length < 2500
                                    ? options
                                    : function(request, response) {
                                        $.getJSON(url + "/" + request.term,
                                            request,
                                            function(opts) {
                                                opts = opts && opts.length > 500 ? opts.slice(0, 500) : opts;
                                                response($.map(opts, function(opt) { return { label: opt, value: opt } }));
                                            });
                                    },
                                highlight: "highlight-text",
                                minLength: ml
                            }).on("focus", function() { $(this).trigger("keydown"); });
                        },
                        error: function (ex) {
                            window.msg.init("error", "Error... . . !", "Failed to load option list. " + ex.error);
                        },
                        //complete: $("#busy-indicator").fadeOut(150)
                    });
                    return false;
                });


            @*

            ////$(".field-name").on("change",
            //$("#fieldName").on("change",
            //    function () {
            //        var fieldInfo = $(this).val(),
            //            $fieldValue = $(this).closest("tr").find("input[type='text']#fieldValue");

                $("#selector").autocomplete({
                    source: function (request, response) {
                         $.ajax({
                             url: "my_server_side_resource.php",
                             type: "GET",
                             data: request,
                             success: function (data) {
                                 response($.map(data, function (el) {
                                     return {
                                         label: el.color,
                                         value: el.value
                                     };
                                 }));
                             }
                         });
                    },
                    select: function (event, ui) {
                        // Prevent value from being put in the input:
                        this.value = ui.item.label;
                        // Set the next input's value to the "value" of the item.
                        $(this).next("input").val(ui.item.value);
                        event.preventDefault();
                    }
                });


                $( "#city" ).autocomplete({
                      source: function( request, response ) {
                        $.ajax({
                          url: "http://gd.geobytes.com/AutoCompleteCity",
                          dataType: "jsonp",
                          data: {
                            q: request.term
                          },
                          success: function( data ) {
                            response( data );
                          }
                        });
                      },
                      minLength: 3,
                      select: function( event, ui ) {
                        log( ui.item ?
                          "Selected: " + ui.item.label :
                          "Nothing selected, input was " + this.value);
                      },
                      open: function() {
                        $( this ).removeClass( "ui-corner-all" ).addClass( "ui-corner-top" );
                      },
                      close: function() {
                        $( this ).removeClass( "ui-corner-top" ).addClass( "ui-corner-all" );
                      }
                    });




            $(".field-name").on("change",
                function () {
                    var fieldInfo = $(this).val(),
                        $fieldValue = $(this).closest("tr").find("input[type='text'].field-value");

                    $fieldValue.empty();

                    var url = '@Url.Content("~/api/AutoComplete/search/")' + fieldInfo;

                    $.ajax({
                        type: "GET",
                        url: url,
                        data: { fieldInfo: fieldInfo },
                        dataType: "json",
                        //before: $("#busy-indicator").fadeIn(150),
                        success: function (options) {
                            //console.log(options);
                            if (!options)
                                return;
                            var ml = options.length < 500 ? 0 : options.length < 1500 ? 1 : options.length < 5000 ? 2 : options.length < 25000 ? 3 : 4;
                            $fieldValue.autocomplete({
                                source: options,
                                highlight: "highlight-text",
                                minLength: ml
                            }).on("focus", function() { $(this).trigger("keydown"); });
                        },
                        error: function (ex) {
                            window.msg.init("error", "Error... . . !", "Failed to load option list. " + ex.error);
                        },
                        //complete: $("#busy-indicator").fadeOut(150)
                    });
                    return false;
                });


                *@



            $("#ZoneCode").on("change",
                function() {
                    var zoneCode = $("#ZoneCode").val(),
                        $circle = $("#CircleCode");

                    $circle.empty();
                    $("#SnDCode").empty();
                    $("#SubstationId").empty();
                    $("#RouteCode").empty();

                    if (!zoneCode)
                        return false;

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("GetCircleList", "LookUpCircleInfoes")',
                        dataType: "json",
                        data: { zoneCode: zoneCode },
                        before: $("#busy-indicator").fadeIn(150),
                        success: function(circles) {
                            $circle.append(
                                '<option value="" selected="selected">----- all circle -----</option>');
                            $.each(circles,
                                function(i, circle) {
                                    $("<option />").val(circle.value).html(circle.text)
                                        .appendTo($circle);
                                });
                        },
                        error: function(ex, status, error) {
                            msg.init("error",
                                "Error... . . !",
                                "Failed to load Circle list. " + ex.responseText);
                        },
                        complete: $("#busy-indicator").fadeOut(150)
                    });
                    return false;
                });

            $("#CircleCode").on("change",
                function() {
                    var circleCode = $("#CircleCode").val(),
                        $snd = $("#SnDCode");

                    $snd.empty();
                    $("#SubstationId").empty();
                    $("#RouteCode").empty();

                    if (!circleCode)
                        return false;

                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("GetSnDList", "LookUpSnDInfoes")",
                        dataType: "json",
                        data: { circleCode: circleCode },
                        before: $("#busy-indicator").fadeIn(150),
                        success: function(snds) {
                            $snd.append(
                                '<option value="" selected="selected">----- all SnD -----</option>');
                            $.each(snds,
                                function(i, snd) {
                                    $("<option />").val(snd.value).html(snd.text).appendTo($snd);
                                });
                        },
                        error: function(ex, status, error) {
                            msg.init("error",
                                "Error... . . !",
                                "Failed to load SnD list. " + ex.responseText);
                        },
                        complete: $("#busy-indicator").fadeOut(150)
                    });
                    return false;
                });

            $("#SnDCode").on("change",
                function() {
                    var sndCode = $("#SnDCode").val(),
                        $substation = $("#SubstationId");

                    $substation.empty();
                    $("#RouteCode").empty();

                    if (!sndCode)
                        return false;

                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("GetSubStationList", "LookUpZoneInfoes")",
                        dataType: "json",
                        data: { sndCode: sndCode },
                        before: $("#busy-indicator").fadeIn(150),
                        success: function(substations) {
                            $substation.append(
                                '<option value="" selected="selected">----- all sub-station -----</option>');
                            $.each(substations,
                                function(i, substation) {
                                    $("<option />").val(substation.value).html(substation.text).appendTo($substation);
                                });
                        },
                        error: function(ex, status, error) {
                            msg.init("error",
                                "Error... . . !",
                                "Failed to load Sub-Station list. " + ex.responseText);
                        },
                        complete: $("#busy-indicator").fadeOut(150)
                    });
                    return false;
                });

            $("#SubstationId").on("change",
                function() {
                    var substationId = $("#SubstationId").val(),
                        $route = $("#RouteCode");

                    $route.empty();

                    if (!substationId)
                        return false;

                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("GetRouteList", "LookUpRouteInfoes")",
                        dataType: "json",
                        data: { substationId: substationId },
                        before: $("#busy-indicator").fadeIn(150),
                        success: function(routes) {
                            $route.append(
                                '<option value="" selected="selected">----- all route -----</option>');
                            $.each(routes,
                                function(i, route) {
                                    $("<option />").val(route.value).html(route.text).appendTo($route);
                                });
                        },
                        error: function(ex, status, error) {
                            msg.init("error", "Error... . . !", "Failed to load Route list. " + ex.responseText);
                        },
                        complete: $("#busy-indicator").fadeOut(150)
                    });
                    return false;
                });


        });


    </script>


    <script>
        (function ($) {
            $.widget('ui.combobox', $.ui.autocomplete,
                {
                    options: {
                        minLength: 2,
                        ajaxGetAll: { get: 'all' }
                    },

                    _create: function () {
                        if (this.element.is('SELECT')) {
                            this._selectInit();
                            return;
                        }

                        $.ui.autocomplete.prototype._create.call(this);
                        var input = this.element;
                        input.addClass('ui-widget ui-widget-content ui-corner-left');

                        this.button = $('<button type="button">&nbsp;</button>')
                            .attr('tabIndex', -1)
                            .attr('title', 'Show All Items')
                            .insertAfter(input)
                            .button({
                                icons: { primary: 'ui-icon-triangle-1-s' },
                                text: false
                            })
                            .removeClass('ui-corner-all')
                            .addClass('ui-corner-right ui-button-icon')
                            .click(function (event) {
                                if (input.combobox('widget').is(':visible')) {
                                    input.combobox('close');
                                    return;
                                }
                                var data = input.data('combobox');
                                clearTimeout(data.closing);
                                if (!input.isFullMenu) {
                                    data._swapMenu();
                                    input.isFullMenu = true;
                                }
                                input.combobox('widget').css('display', 'block')
                                    .position($.extend({ of: input },
                                        data.options.position
                                    ));
                                input.focus();
                                data._trigger('open');
                            });

                        $(document).queue(function () {
                            var data = input.data('combobox');
                            if ($.isArray(data.options.source)) {
                                $.ui.combobox.prototype._renderFullMenu.call(data, data.options.source);
                            } else if (typeof data.options.source === 'string') {
                                $.getJSON(data.options.source, data.options.ajaxGetAll, function (source) {
                                    $.ui.combobox.prototype._renderFullMenu.call(data, source);
                                });
                            } else {
                                $.ui.combobox.prototype._renderFullMenu.call(data, data.source());
                            }
                        });
                    },

                    _renderFullMenu: function (source) {
                        var self = this,
                            input = this.element,
                            ul = input.data('combobox').menu.element,
                            lis = [];
                        source = this._normalize(source);
                        input.data('combobox').menuAll = input.data('combobox').menu.element.clone(true).appendTo('body');
                        for (var i = 0; i < source.length; i++) {
                            lis[i] = '<li class="ui-menu-item" role="menuitem"><a class="ui-corner-all" tabindex="-1">' + source[i].label + '</a></li>';
                        }
                        ul.append(lis.join(''));
                        this._resizeMenu();
                        setTimeout(function () {
                            self._setupMenuItem.call(self, ul.children('li'), source);
                        }, 0);
                        input.isFullMenu = true;
                    },

                    _setupMenuItem: function (items, source) {
                        var self = this,
                            itemsChunk = items.splice(0, 500),
                            sourceChunk = source.splice(0, 500);
                        for (var i = 0; i < itemsChunk.length; i++) {
                            $(itemsChunk[i])
                                .data('item.autocomplete', sourceChunk[i])
                                .mouseenter(function (event) {
                                    self.menu.activate(event, $(this));
                                })
                                .mouseleave(function () {
                                    self.menu.deactivate();
                                });
                        }
                        if (items.length > 0) {
                            setTimeout(function () {
                                self._setupMenuItem.call(self, items, source);
                            }, 0);
                        } else {
                            $(document).dequeue();
                        }
                    },

                    _renderItem: function (ul, item) {
                        var label = item.label.replace(new RegExp(
                            '(?![^&;]+;)(?!<[^<>]*)(' + $.ui.autocomplete.escapeRegex(this.term) +
                            ')(?![^<>]*>)(?![^&;]+;)', 'gi'), '<strong>$1</strong>');
                        return $('<li></li>')
                            .data('item.autocomplete', item)
                            .append('<a>' + label + '</a>')
                            .appendTo(ul);
                    },

                    destroy: function () {
                        if (this.element.is('SELECT')) {
                            this.input.remove();
                            this.element.removeData().show();
                            return;
                        }
                        $.ui.autocomplete.prototype.destroy.call(this);
                        this.element.removeClass('ui-widget ui-widget-content ui-corner-left');
                        this.button.remove();
                    },

                    search: function (value, event) {
                        var input = this.element;
                        if (input.isFullMenu) {
                            this._swapMenu();
                            input.isFullMenu = false;
                        }
                        $.ui.autocomplete.prototype.search.call(this, value, event);
                    },

                    _change: function (event) {
                        abc = this;
                        if (!this.selectedItem) {
                            var matcher = new RegExp('^' + $.ui.autocomplete.escapeRegex(this.element.val()) + '$', 'i'),
                                match = $.grep(this.options.source, function (value) {
                                    return matcher.test(value.label);
                                });
                            if (match.length) {
                                match[0].option.selected = true;
                            } else {
                                this.element.val('');
                                if (this.options.selectElement) {
                                    this.options.selectElement.val('');
                                }
                            }
                        }
                        $.ui.autocomplete.prototype._change.call(this, event);
                    },

                    _swapMenu: function () {
                        var input = this.element,
                            data = input.data('combobox'),
                            tmp = data.menuAll;
                        data.menuAll = data.menu.element.hide();
                        data.menu.element = tmp;
                    },

                    _selectInit: function () {
                        var select = this.element.hide(),
                            selected = select.children(':selected'),
                            value = selected.val() ? selected.text() : '';
                        this.options.source = select.children('option[value!=""]').map(function () {
                            return { label: $.trim(this.text), option: this };
                        }).toArray();
                        var userSelectCallback = this.options.select;
                        var userSelectedCallback = this.options.selected;
                        this.options.select = function (event, ui) {
                            ui.item.option.selected = true;
                            if (userSelectCallback) userSelectCallback(event, ui);
                            if (userSelectedCallback) userSelectedCallback(event, ui);
                        };
                        this.options.selectElement = select;
                        this.input = $('<input>').insertAfter(select)
                            .val(value).combobox(this.options);
                    }
                }
            );
        })(jQuery);
    </script>

    <script type="text/javascript">

        $(document).ready(function () {
            //$('[data-toggle="tooltip"]').tooltip();
            //var actions = $("table td:last-child").html();

            // Append table with add row form on add new button click
            $(".add-new").click(function () {
                var $lastRow = $("#tblSearchOptions tbody tr:last-child"),
                    index = $lastRow.index(),
                    tds = $lastRow.find('td');

                var $newRow = $("<tr>");//.append(tds)


                console.log($newRow.html());

                var $fieldName = $lastRow.find("#fieldName"),
                    $operator = $lastRow.find("#operator"),
                    $fieldValue = $lastRow.find("#fieldValue"),
                    $joinOption = $lastRow.find("#joinOption"),
                    $lastTd = $lastRow.find("td:last-child");


                //console.log($fieldName);
                //console.log($operator);
                //console.log($fieldValue);
                //console.log($joinOption);

                console.log($fieldName[0].outerHTML());
                console.log($operator[0].outerHTML());
                console.log($fieldValue[0].outerHTML());
                console.log($joinOption[0].outerHTML());

                //$fieldName.attr('name', 'searchParameters[' + (index + 1) + '][0]');
                //$operator.attr('name', 'searchParameters[' + (index + 1) + '][1]');
                //$fieldValue.attr('name', 'searchParameters[' + (index + 1) + '][2]');
                //$joinOption.attr('name', 'searchParameters[' + (index + 1) + '][3]');

                $newRow.append($("td").append($fieldName));
                $newRow.append($("td").append($operator));
                $newRow.append($("td").append($fieldValue));
                $newRow.append($("td").append($joinOption));
                //$newRow.append($lastTd);

                console.log($newRow.html());

                $("#tblSearchOptions tbody").append($newRow);


                //$("#tblSearchOptions tbody").append($("<tr>").append(tds));
                //$("#tblSearchOptions tbody tr").eq(index + 1).find(".add, .edit").toggle();

                //$('[data-toggle="tooltip"]').tooltip();
            });

            // Add row on add button click
            $(document).on("click", ".add", function () {
                var empty = false;
                var input = $(this).parents("tr").find('input[type="text"]');
                input.each(function () {
                    if (!$(this).val()) {
                        $(this).addClass("error");
                        empty = true;
                    } else {
                        $(this).removeClass("error");
                    }
                });
                $(this).parents("tr").find(".error").first().focus();
                if (!empty) {
                    input.each(function () {
                        $(this).parent("td").html($(this).val());
                    });
                    $(this).parents("tr").find(".add, .edit").toggle();
                    $(".add-new").removeAttr("disabled");
                }
            });

            // Edit row on edit button click
            //$(document).on("click", ".edit", function () {
            //    $(this).parents("tr").find("td:not(:last-child)").each(function () {
            //        $(this).html('<input type="text" class="form-control" value="' + $(this).text() + '">');
            //    });
            //    $(this).parents("tr").find(".add, .edit").toggle();
            //    $(".add-new").attr("disabled", "disabled");
            //});

            // Delete row on delete button click
            $(document).on("click", ".delete", function () {
                if (confirm('Are you sure to delete ?'))
                    return false;

                $(this).parents("tr").remove();
                //$(".add-new").removeAttr("disabled");
                return true;
            });

        });

    </script>


    @*<script>
            (function ($) {
                $.widget("ui.combobox", $.ui.autocomplete,
                    {
                        options: {
                            /* override default values here */
                            minLength: 2,
                            /* the argument to pass to ajax to get the complete list */
                            ajaxGetAll: { get: "all" }
                        },

                        _create: function () {
                            if (this.element.is("SELECT")) {
                                this._selectInit();
                                return;
                            }

                            $.ui.autocomplete.prototype._create.call(this);
                            var input = this.element;
                            input.addClass("ui-widget ui-widget-content ui-corner-left");

                            this.button = $("<button type='button'>&nbsp;</button>")
                                .attr("tabIndex", -1)
                                .attr("title", "Show All Items")
                                .insertAfter(input)
                                .button({
                                    icons: { primary: "ui-icon-triangle-1-s" },
                                    text: false
                                })
                                .removeClass("ui-corner-all")
                                .addClass("ui-corner-right ui-button-icon")
                                .click(function (event) {
                                    // close if already visible
                                    if (input.combobox("widget").is(":visible")) {
                                        input.combobox("close");
                                        return;
                                    }
                                    // when user clicks the show all button, we display the cached full menu
                                    var data = input.data("combobox");
                                    clearTimeout(data.closing);
                                    if (!input.isFullMenu) {
                                        data._swapMenu();
                                        input.isFullMenu = true;
                                    }
                                    /* input/select that are initially hidden (display=none, i.e. second level menus),
                                       will not have position cordinates until they are visible. */
                                    input.combobox("widget").css("display", "block")
                                        .position($.extend({ of: input },
                                            data.options.position
                                        ));
                                    input.focus();
                                    data._trigger("open");
                                });

                            /* to better handle large lists, put in a queue and process sequentially */
                            $(document).queue(function () {
                                var data = input.data("combobox");
                                if ($.isArray(data.options.source)) {
                                    $.ui.combobox.prototype._renderFullMenu.call(data, data.options.source);
                                } else if (typeof data.options.source === "string") {
                                    $.getJSON(data.options.source, data.options.ajaxGetAll, function (source) {
                                        $.ui.combobox.prototype._renderFullMenu.call(data, source);
                                    });
                                } else {
                                    $.ui.combobox.prototype._renderFullMenu.call(data, data.source());
                                }
                            });
                        },

                        /* initialize the full list of items, this menu will be reused whenever the user clicks the show all button */
                        _renderFullMenu: function (source) {
                            var self = this,
                                input = this.element,
                                ul = input.data("combobox").menu.element,
                                lis = [];
                            source = this._normalize(source);
                            input.data("combobox").menuAll = input.data("combobox").menu.element.clone(true).appendTo("body");
                            for (var i = 0; i < source.length; i++) {
                                lis[i] = "<li class=\"ui-menu-item\" role=\"menuitem\"><a class=\"ui-corner-all\" tabindex=\"-1\">" + source[i].label + "</a></li>";
                            }
                            ul.append(lis.join(""));
                            this._resizeMenu();
                            // setup the rest of the data, and event stuff
                            setTimeout(function () {
                                self._setupMenuItem.call(self, ul.children("li"), source);
                            }, 0);
                            input.isFullMenu = true;
                        },

                        /* incrementally setup the menu items, so the browser can remains responsive when processing thousands of items */
                        _setupMenuItem: function (items, source) {
                            var self = this,
                                itemsChunk = items.splice(0, 500),
                                sourceChunk = source.splice(0, 500);
                            for (var i = 0; i < itemsChunk.length; i++) {
                                $(itemsChunk[i])
                                    .data("item.autocomplete", sourceChunk[i])
                                    .mouseenter(function (event) {
                                        self.menu.activate(event, $(this));
                                    })
                                    .mouseleave(function () {
                                        self.menu.deactivate();
                                    });
                            }
                            if (items.length > 0) {
                                setTimeout(function () {
                                    self._setupMenuItem.call(self, items, source);
                                }, 0);
                            } else { // renderFullMenu for the next combobox.
                                $(document).dequeue();
                            }
                        },

                        /* overwrite. make the matching string bold */
                        _renderItem: function (ul, item) {
                            var label = item.label.replace(new RegExp(
                                "(?![^&;]+;)(?!<[^<>]*)(" + $.ui.autocomplete.escapeRegex(this.term) +
                                ")(?![^<>]*>)(?![^&;]+;)", "gi"), "<strong>$1</strong>");
                            return $("<li></li>")
                                .data("item.autocomplete", item)
                                .append("<a>" + label + "</a>")
                                .appendTo(ul);
                        },

                        /* overwrite. to cleanup additional stuff that was added */
                        destroy: function () {
                            if (this.element.is("SELECT")) {
                                this.input.remove();
                                this.element.removeData().show();
                                return;
                            }
                            // super()
                            $.ui.autocomplete.prototype.destroy.call(this);
                            // clean up new stuff
                            this.element.removeClass("ui-widget ui-widget-content ui-corner-left");
                            this.button.remove();
                        },

                        /* overwrite. to swap out and preserve the full menu */
                        search: function (value, event) {
                            var input = this.element;
                            if (input.isFullMenu) {
                                this._swapMenu();
                                input.isFullMenu = false;
                            }
                            // super()
                            $.ui.autocomplete.prototype.search.call(this, value, event);
                        },

                        _change: function (event) {
                            abc = this;
                            if (!this.selectedItem) {
                                var matcher = new RegExp("^" + $.ui.autocomplete.escapeRegex(this.element.val()) + "$", "i"),
                                    match = $.grep(this.options.source, function (value) {
                                        return matcher.test(value.label);
                                    });
                                if (match.length) {
                                    match[0].option.selected = true;
                                } else {
                                    // remove invalid value, as it didn't match anything
                                    this.element.val("");
                                    if (this.options.selectElement) {
                                        this.options.selectElement.val("");
                                    }
                                }
                            }
                            // super()
                            $.ui.autocomplete.prototype._change.call(this, event);
                        },

                        _swapMenu: function () {
                            var input = this.element,
                                data = input.data("combobox"),
                                tmp = data.menuAll;
                            data.menuAll = data.menu.element.hide();
                            data.menu.element = tmp;
                        },

                        /* build the source array from the options of the select element */
                        _selectInit: function () {
                            var select = this.element.hide(),
                                selected = select.children(":selected"),
                                value = selected.val() ? selected.text() : "";
                            this.options.source = select.children("option[value!='']").map(function () {
                                return { label: $.trim(this.text), option: this };
                            }).toArray();
                            var userSelectCallback = this.options.select;
                            var userSelectedCallback = this.options.selected;
                            this.options.select = function (event, ui) {
                                ui.item.option.selected = true;
                                if (userSelectCallback) userSelectCallback(event, ui);
                                // compatibility with jQuery UI's combobox.
                                if (userSelectedCallback) userSelectedCallback(event, ui);
                            };
                            this.options.selectElement = select;
                            this.input = $("<input>").insertAfter(select)
                                .val(value).combobox(this.options);
                        }
                    }
                );
            })(jQuery);
        </script>*@

}
