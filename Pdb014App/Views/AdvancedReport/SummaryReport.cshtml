@using Pdb014App.Models.Report

@{
    //ViewBag.ReportAction = "GetSubstationData";
    string rptName = ViewBag.ReportName, rptAction = ViewBag.ReportAction, rptController = ViewBag.ReportController;

    ViewData["Title"] = rptName + "Report";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var fieldList = ViewBag.FieldList != null
    ? ViewBag.FieldList as List<ReportField>
        : null;


    int oc = 4;
    var regionList = ViewBag.RegionList != null
    ? ViewBag.RegionList as List<string>
        : new List<string>
            (oc) { "", "", "", "" };

    if (regionList == null || regionList.Count < 1)
    {
        regionList = new List<string>
            (oc) { "", "", "", "" };
    }
    else if (regionList.Count < oc)
    {
        for (int rc = regionList.Count; rc < oc; rc++)
        {
            regionList.Add("");
        }
    }

}

@section Styles {

    <link href="~/css/multi.checkbox.tree.css" rel="stylesheet" />
    <link href="~/css/report.style.css" rel="stylesheet" />

    <link href="~/lib/bracket/lib/perfect-scrollbar/css/perfect-scrollbar.css" rel="stylesheet" />

}


<form asp-action="SummaryReport" asp-controller="SummaryReport">

    <div class="row">
        <div class="col-md-1"></div>

        <div class="col-md-4">

            <fieldset>
                <legend>▣ Report Fields</legend>

                @if (fieldList != null && fieldList.Count > 0)
                {
                    <p class="tree">
                        <label for="all_fields" style="margin: 0 4px 0 0;">▣ All Fields</label>
                        <input type="checkbox" id="all_fields" class="all-checked" />
                    </p>

                    <ul id="field_list" class="tree" style=" min-height: 127px; max-height: 250px; overflow: auto;">
                        @for (int fc = 0; fc < fieldList.Count; ++fc)
                        {
                            if (fieldList[fc].Visible)
                            {
                                <li class="@fieldList[fc].GroupName">
                                    <input type="checkbox" asp-for="@fieldList[fc].Selected" data-field-name="@fieldList[fc].Name" data-field-title="@fieldList[fc].Title" data-field-group="@fieldList[fc].GroupName" class="multi-checkbox" />

                                    @{
                                        var grpName = fieldList[fc].Name;
                                        if (fieldList[fc].Name.StartsWith("group") && fieldList.Any(f => !string.IsNullOrEmpty(f.GroupName) && f.GroupName.Equals(grpName)))
                                        {
                                            <label asp-for="@fieldList[fc].Selected">@fieldList[fc].Title <span class="multi-item active"></span></label>
                                            <ul id="field_list_@grpName" class="sub-list" style="max-height: 75px; overflow: auto;">
                                                @{
                                                    var grpFieldList = fieldList.Where(f => !string.IsNullOrEmpty(f.GroupName) && f.GroupName.Equals(grpName)).ToList();
                                                    for (int gfc = 0; gfc < grpFieldList.Count; ++gfc)
                                                    {
                                                        <li class="@grpName">
                                                            <input type="checkbox" id="grpFields_@($"{grpName}_{gfc}")" data-field-name="@grpFieldList[gfc].Name" data-field-title="@grpFieldList[gfc].Title" data-field-group="@grpFieldList[gfc].GroupName" class="multi-checkbox" />
                                                            <label for="grpFields_@($"{grpName}_{gfc}")">@grpFieldList[gfc].Title</label>
                                                        </li>
                                                    }
                                                    fc += grpFieldList.Count;
                                                }
                                            </ul>
                                        }
                                        else
                                        {
                                            <label asp-for="@fieldList[fc].Selected">@fieldList[fc].Title</label>
                                        }
                                    }
                                </li>
                            }
                            else
                            {
                                <li class="@fieldList[fc].GroupName" style="display: none;">
                                    <input type="checkbox" asp-for="@fieldList[fc].Selected" data-field-name="@fieldList[fc].Name" data-field-title="@fieldList[fc].Title" data-field-group="@fieldList[fc].GroupName" class="multi-checkbox" />
                                    <label asp-for="@fieldList[fc].Selected">@fieldList[fc].Title</label>
                                </li>
                            }
                        }
                    </ul>
                }

            </fieldset>

        </div>

        <div class="col-md-6">

            <fieldset>
                <legend>▣ Regional Boundaries</legend>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Zone</label>
                            <select id="ZoneCode" class="form-control" asp-items="ViewBag.ZoneList" value="@ViewBag.ZoneCode">
                                <option value="" selected="selected">----- all zone -----</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Circle</label>
                            <select id="CircleCode" class="form-control" asp-items="ViewBag.CircleList" value="@ViewBag.CircleCode">
                                <option value="" selected="selected">----- all circle -----</option>
                            </select>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">S&D</label>
                            <select id="SnDCode" class="form-control" asp-items="ViewBag.SnDList" value="@ViewBag.SnDCode">
                                <option value="" selected="selected">----- all S&D -----</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Substation</label>
                            <select id="SubstationId" class="form-control" asp-items="ViewBag.SubstationList" value="@ViewBag.SubstationCode">
                                <option value="" selected="selected">----- all substation -----</option>
                            </select>
                        </div>
                    </div>
                </div>
            </fieldset>

            <div>
                <button id="btnRefresh" onclick="return false;" class="btn btn-primary float-right mt-2">Refresh</button>
            </div>

        </div>

        <div class="col-md-1"></div>
    </div>

</form>


<div class="row">
    <div class="col-md-12 pl-3 pr-3">
        <fieldset>
            <legend>▣ Report</legend>

            <div id="dataView" class="form-view">
                <button class="btn btn-primary" style="float:right; margin-top:-.8rem; margin-bottom:.2rem;" onclick="return exportToExcel('report_view', 'report-data');return false;">Export To Excel</button>
                <div id="multi_form_wrapper" class="data-view multi-form-wrapper">
                    <table id="report_view" class="table table-responsive multi-form-view table-info"></table>
                </div>
            </div>
        </fieldset>
    </div>
</div>



@section Scripts {

    <script src="~/js/multi.checkbox.tree.js"></script>

    <script type="text/javascript">

        var rptName = "@rptName",
            url = '@Url.Action(rptAction, rptController)';

        $(function() {

            $("#btnRefresh").on("click", function() { return load_data(url); });

            $("#all_fields").on("change", function() { CheckAllMultiCheckBox(this); });

            $(".multi-checkbox").on("change", function() { CheckMultiCheckBox(this); }).trigger("change");

            OpenCloseAll($(".multi-checkbox"), false);

            load_data(url);
        });


        var regionList = [],
            headerGroups = {},
            headerList = {},
            headerGroupList = {},
            basicColumns = [],
            dataColumns = [];


        function export_to_excel(tableId, fileName) {
            if (!tableId) return false;

            $("#" + tableId).exportToexcel({
                containerid: tableId,
                datatype: 'table',
                fileName: fileName ? fileName : "Report Data",
                worksheetName: "PDB Report Data"
            });
            return true;
        }

        function exportToExcel(tableId, filename) {
            var dataType = 'application/vnd.ms-excel',
                tableSelect = document.getElementById(tableId),
                tableHtml = tableSelect.outerHTML.replace(/ /g, '%20'),
                downloadLink = document.createElement("a");

            // Specify file name
            filename = filename ? filename + '.xls' : 'report_data.xls';

            // Create download link element
            document.body.appendChild(downloadLink);

            if (navigator.msSaveOrOpenBlob) {
                var blob = new Blob(['\ufeff', tableHtml],
                    {
                        type: dataType
                    });
                navigator.msSaveOrOpenBlob(blob, filename);
            } else {
                // Create a link to the file
                downloadLink.href = 'data:' + dataType + ', ' + tableHtml;

                // Setting the file name
                downloadLink.download = filename;

                //triggering the function
                downloadLink.click();
            }

            return false;
        }


        function load_data(url) {

            set_basic_info();

            $("#report_view").empty();
            if (!dataColumns || dataColumns.length < 1) {
                $("#dataView").css('display', 'none');
                msg.init("warning", "Warning... . . !", "Select at least one data field... . . !! ");
                return;
            }

            $.ajax({
                type: 'POST',
                url: url,
                dataType: "json",
                data: { "regionList": regionList },
                before: $("#busy-indicator").fadeIn(150),
                success: function (data) {
                    if (data && data.length > 0) {
                        init_data_table("#report_view", headerList, basicColumns, dataColumns, data);
                    } else {
                        msg.init("warning", "Warning... . . !", "Report data not available... . . !! ");
                    }
                    $("#busy-indicator").fadeOut(150);
                },
                error: function(ex, status, error) {
                    $("#busy-indicator").fadeOut(150);
                    msg.init("error", "Error... . . !", "Failed to load data. <br/>" + ex.responseText);
                },
                //complete: $("#busy-indicator").fadeOut(150),
            });

            return true;
        }

        function set_basic_info() {

            regionList = [];
            regionList[0] = $("#ZoneCode").val();
            regionList[1] = $("#CircleCode").val();
            regionList[2] = $("#SnDCode").val();
            regionList[3] = $("#SubstationId").val();

            headerGroups = {};
            headerList = {};
            headerGroupList = {};
            basicColumns = [];
            dataColumns = [];

            basicColumns.push("zoneName");
            basicColumns.push("isCity");
            basicColumns.push("circleName");
            basicColumns.push("distName");
            basicColumns.push("sndName");

            headerList["zoneName"] = "Zone Name";
            headerList["isCity"] = "City/Except City";
            headerList["circleName"] = "Circle Name";
            headerList["distName"] = "District Name";
            headerList["sndName"] = "S&D Name";

            //headerList["isCity"] = "In City ?";

            $("#field_list input[type='checkbox']").each(function() {

                if (!$(this).prop("checked") && !$(this).prop("indeterminate"))
                    return;

                var fldName = $(this).attr("data-field-name"),
                    fldTitle = $(this).attr("data-field-title"),
                    fldGroup = $(this).attr("data-field-group");

                if (fldName.indexOf('group') === 0) {
                    headerGroups[fldName] = {};
                    headerList[fldName] = fldTitle;
                    return;
                } else if (fldGroup) {
                    headerGroups[fldGroup] = headerGroups[fldGroup] || {};
                    headerGroups[fldGroup][fldName] = fldTitle;
                }

                dataColumns.push(fldName);
                headerList[fldName] = fldTitle;
                headerGroupList[fldName] = headerList[fldGroup] || "";

            });
        }

        function init_data_table(selector, headerList, basicColumns, dataColumns, data) {
            $(selector).empty();

            if (!dataColumns || !data || dataColumns.length < 1 || data.length < 1) {
                $("#dataView").css('display', 'none');
                return;
            }
            $("#dataView").css('display', '');

            var headRow$ = $("<tr/>"),
                //totalRow$ = $("<tr/>"),
                tbody$ = $("<tbody/>"),
                hi = 0,
                hwr = Math.floor((100 / ((basicColumns.length * 1.5) + dataColumns.length)) * 1000) / 1000;

            //** Table Header **//
            if (headerGroups.length < 1) {
                headRow$.append($("<th/>").css("width", '25px').html("Sl. No."));
                $.each(headerList,
                    function(headerNam, headerTxt) {
                        var hw = hi++ < basicColumns.length ? hwr * 1.5 : hwr;
                        headRow$.append($("<th/>").css("width", hw + '%').html(headerTxt));
                    });
                $(selector).append($("<thead/>").append(headRow$));
            } else {
                var gfc = 0,
                    headerSubList = {},
                    headRowSub$ = $("<tr/>");

                $.each(headerGroups, function(groupNam, groupFields) { gfc += Object.keys(groupFields).length - 1; });

                hwr = Math.floor((100 / ((basicColumns.length * 1.5) + dataColumns.length + gfc + 0.333)) * 1000) /
                    1000;

                headRow$.append($("<th/>")
                    .attr("rowSpan", 2).css({ "width": (hwr * 0.333) + '%', "min-width": '25px' })
                    .html("Sl. No."));

                $.each(headerList,
                    function(headerNam, headerTxt) {
                        if (headerSubList[headerNam]) {
                            headerList[headerNam] = headerGroupList[headerNam]
                                ? headerGroupList[headerNam] + ' (' + headerList[headerNam] + ')'
                                : headerList[headerNam];
                            return;
                        }

                        var gwfc = 0,
                            hw = hi++ < basicColumns.length ? hwr * 1.5 : hwr;

                        if (headerNam.indexOf('group') === 0 && headerGroups[headerNam]) {
                            $.each(headerGroups[headerNam],
                                function(headerSubNam, headerSubTxt) {
                                    gwfc++;
                                    headRowSub$.append($("<th/>").css("width", hw + '%').html(headerSubTxt));
                                    headerSubList[headerSubNam] = headerSubTxt;
                                });

                            headRow$.append($("<th/>")
                                .attr("colSpan", gwfc)
                                .css("width", (hw * gwfc) + '%')
                                .html(headerTxt));
                        } else {
                            headRow$.append($("<th/>")
                                .attr("rowSpan", 2).css("width", hw + '%')
                                .html(headerTxt));
                        }
                    });

                $(selector).append($("<thead/>").append(headRow$).append(headRowSub$));
            }
            //** Table Header End **//


            //** Data Grouping **//
            var dataColumnGroups = {};
            for (var fi = 0; fi < dataColumns.length; fi++) {
                if ([fi] && dataColumns[fi].indexOf('.') > 0) {
                    var dColumn = dataColumns[fi],
                        gName = dColumn.split('.')[0],
                        fName = dColumn.split('.')[1];

                    if (!dataColumnGroups[gName]) {
                        dataColumnGroups[gName] = {};

                        var grpName = "";
                        $.each(headerGroups,
                            function(groupNam, groupFields) {
                                if (Object.keys(groupFields).includes(dColumn)) {
                                    grpName = groupNam;
                                    return;
                                }
                            });
                    }
                    dataColumnGroups[gName][fName] = fName;
                } else {
                    dataColumnGroups[dataColumns[fi]] = dataColumns[fi];
                }
            }

            var groupedData = {};
            data.forEach(function(d) {
                var zone = basicColumns[0],
                    circle = basicColumns[2],
                    snd = basicColumns[4],
                    sst = "substationCode";

                groupedData[d[zone]] = groupedData[d[zone]] || {};
                groupedData[d[zone]][d[circle]] = groupedData[d[zone]][d[circle]] || {};
                groupedData[d[zone]][d[circle]][d[snd]] = groupedData[d[zone]][d[circle]][d[snd]] || {};
                groupedData[d[zone]][d[circle]][d[snd]][d[sst]] = d;
            });
            //** Data Grouping End **//

            //** Table Body **//
            var slNo = 1, rsZone = 0, $zoneTrs = "", $allTrs = "";
            $.each(groupedData,
                function(zoneName, zoneInfo) {

                    var rsCircle = 0, $circleTrs = "";
                    $.each(zoneInfo,
                        function(circleName, circleInfo) {

                            var rsSnD = 0, $sndTrs = "", isCity = "", dist = "";
                            $.each(circleInfo,
                                function(sndName, sndInfo) {

                                    var rsSSt = 1, $sstTrs = "";
                                    $.each(sndInfo,
                                        function(sstCode, sstInfo) {
                                            if (!sstInfo)
                                                return;

                                            isCity = sstInfo.isCity || "";
                                            dist = sstInfo.distName || "";

                                            var rsGrp = {}, isLast = {}, isRight, dataValue = "", $infoTrs = "";

                                            $.each(dataColumnGroups,
                                                function(groupName, dtColumns) {
                                                    rsSSt = sstInfo[groupName] && sstInfo[groupName].length > rsSSt ? sstInfo[groupName].length : rsSSt;
                                                });

                                            $.each(dataColumnGroups,
                                                function(groupName, dtColumns) {
                                                    isLast[groupName] = false;
                                                    rsGrp[groupName] = parseInt(rsSSt / (sstInfo[groupName] && sstInfo[groupName].length ? sstInfo[groupName].length : 1));
                                                });

                                            for (var rc = 0; rc < rsSSt; rc++) {
                                                var $infoTds = "";

                                                $.each(dataColumnGroups,
                                                    function(groupName, dtColumns) {

                                                        //if (!sstInfo[groupName] || rc % rsGrp[groupName] != 0) return;
                                                        if (rc % rsGrp[groupName] != 0) return;

                                                        var di = rc / rsGrp[groupName],
                                                            dc = sstInfo[groupName] && sstInfo[groupName].length ? sstInfo[groupName].length : 1;

                                                        if (dc > di && !isLast[groupName]) {
                                                            switch (typeof dtColumns) {
																case "object":
																	$.each(dtColumns,
																		function(ci, dataColumn) {
																			dataValue = typeof (sstInfo[groupName]) == "undefined"
																				? ""
																				: typeof (sstInfo[groupName][di]) != "undefined"
																				? sstInfo[groupName][di][dataColumn]
																				: typeof (sstInfo[groupName][dataColumn]) != "undefined"
																				? sstInfo[groupName][dataColumn]
																				: "";

																			if (dataValue) {
																				isRight = (dataValue === parseInt(dataValue, 10));
																				$infoTds += rsGrp[groupName] > 1
																					? "<td rowspan='" + rsGrp[groupName] + "' style='text-align:" + (isRight ? "right" : "left") + ";'>" + dataValue + "</td>"
																					: "<td style='text-align:" + (isRight ? "right" : "left") + ";'>" + dataValue + "</td>";
																			} else {
																				$infoTds += rsGrp[groupName] > 1 ? "<td rowspan='" + rsGrp[groupName] + "'></td>" : "<td></td>";
																			}
																		});
																	break;

																case "string":
																	if (sstInfo[dtColumns]) {
																		dataValue = sstInfo[dtColumns];
																		isRight = (dataValue === parseInt(dataValue, 10));
																		$infoTds += rsGrp[groupName] > 1
																			? "<td rowspan='" + rsGrp[groupName] + "' style='text-align:" + (isRight ? "right" : "left") + ";'>" + dataValue + "</td>"
																			: "<td style='text-align:" + (isRight ? "right" : "left") + ";'>" + dataValue + "</td>";
																	} else {
																		$infoTds += rsGrp[groupName] > 1 ? "<td rowspan='" + rsGrp[groupName] + "'></td>" : "<td></td>";
																	}
																	break;

																default:
																	$infoTds += rsGrp[groupName] > 1 ? "<td rowspan='" + rsGrp[groupName] + "'></td>" : "<td></td>";
																	break;
                                                            }

                                                            if (dc == di + 1 && rsSSt > rsGrp[groupName])
                                                                isLast[groupName] = true;

                                                        } else if (isLast[groupName]) {
                                                            isLast[groupName] = false;
                                                            if (rsSSt > (rsGrp[groupName] * di)) {
                                                                var rsExt = rsSSt - (rsGrp[groupName] * di);
                                                                switch (typeof dtColumns) {
																	case "object":
																		$.each(dtColumns,
																			function(ci, dataColumn) {
																				$infoTds += rsExt > 1 ? "<td rowspan='" + rsExt + "'></td>" : "<td></td>";
																			});
																		break;

																	default:
																		$infoTds += rsExt > 1 ? "<td rowspan='" + rsExt + "'></td>" : "<td></td>";
																		break;
                                                                }
                                                            }
                                                            rsGrp[groupName] = rsSSt + 999;
                                                        }
                                                    });


                                                if ($infoTrs) {
                                                    $infoTrs += "<tr>";
                                                }

                                                $infoTrs += $infoTds;
                                                $infoTrs += '</tr>';
                                                $infoTds = "";

                                                $infoTrs += $infoTds;
                                                $infoTrs += '</tr>';
                                                $infoTds = "";
                                            }

                                            rsSnD += rsSSt;

                                            if ($sstTrs) {
                                                $sstTrs += "<tr>";
                                            }

                                            $sstTrs += $infoTrs;
                                            $sstTrs += '</tr>';

                                            rsSSt = 0;
                                        });

                                    rsCircle += rsSnD;

                                    if ($sndTrs) {
                                        $sndTrs += "<tr>";
                                    }

                                    $sndTrs += rsSnD > 1
                                        ? "<td rowspan='" + rsSnD + "' style='text-align:left;'>" + sndName + "</td>"
                                        : "<td style='text-align:left;'>" + sndName + "</td>";

                                    $sndTrs += $sstTrs;
                                    $sndTrs += '</tr>';

                                    $sstTrs = "";
                                    rsSnD = 0;
                                });

                            rsZone += rsCircle;

                            if ($circleTrs) {
                                $circleTrs += "<tr>";
                            }

                            $circleTrs += "<td rowspan='" + rsCircle + "' style='text-align:center;'>" + isCity + "</td>" + "<td rowspan='" + rsCircle + "' style='text-align:left;'>" + circleName + "</td>" + "<td rowspan='" + rsCircle + "' style='text-align:left;'>" + dist + "</td>";
                            $circleTrs += $sndTrs;
                            $circleTrs += '</tr>';
                            $sndTrs = "";
                            rsCircle = 0;
                        });


                    if ($zoneTrs) {
                        $zoneTrs += "<tr>";
                    }

                    $zoneTrs += "<td rowspan='" + rsZone + "' style='text-align:right;'>" + slNo + ".</td>";
                    $zoneTrs += "<td rowspan='" + rsZone + "' style='text-align:left;'>" + zoneName + "</td>";
                    $zoneTrs += $circleTrs;
                    $zoneTrs += '</tr>';
                    $circleTrs = "";


                    if (!$allTrs) {
                        $allTrs += "<tr>";
                    }
                    $allTrs += $zoneTrs;
                    $zoneTrs = "";
                    rsZone = 0;
                    ++slNo;
                });

            tbody$.append($allTrs);

            $(selector).append(tbody$);

            //** Table Body End **//

        }


        function init_data_table_full_ok(selector, headerList, basicColumns, dataColumns, data) {
            $(selector).empty();

            if (!dataColumns || !data || dataColumns.length < 1 || data.length < 1) {
                $("#dataView").css('display', 'none');
                return;
            }
            $("#dataView").css('display', '');

            var headRow$ = $("<tr/>"),
                //totalRow$ = $("<tr/>"),
                tbody$ = $("<tbody/>"),
                hi = 0,
                hwr = Math.floor((100 / ((basicColumns.length * 1.5) + dataColumns.length)) * 1000) / 1000;

            //** Table Header **//
            if (headerGroups.length < 1) {
                headRow$.append($("<th/>").css("width", '25px').html("Sl. No."));
                $.each(headerList,
                    function(headerNam, headerTxt) {
                        var hw = hi++ < basicColumns.length ? hwr * 1.5 : hwr;
                        headRow$.append($("<th/>").css("width", hw + '%').html(headerTxt));
                    });
                $(selector).append($("<thead/>").append(headRow$));
            } else {
                var gfc = 0,
                    headerSubList = {},
                    headRowSub$ = $("<tr/>");

                $.each(headerGroups, function(groupNam, groupFields) { gfc += Object.keys(groupFields).length - 1; });

                hwr = Math.floor((100 / ((basicColumns.length * 1.5) + dataColumns.length + gfc + 0.333)) * 1000) /
                    1000;

                headRow$.append($("<th/>")
                    .attr("rowSpan", 2).css({ "width": (hwr * 0.333) + '%', "min-width": '25px' })
                    .html("Sl. No."));

                $.each(headerList,
                    function(headerNam, headerTxt) {
                        if (headerSubList[headerNam]) {
                            headerList[headerNam] = headerGroupList[headerNam]
                                ? headerGroupList[headerNam] + ' (' + headerList[headerNam] + ')'
                                : headerList[headerNam];
                            return;
                        }

                        var gwfc = 0,
                            hw = hi++ < basicColumns.length ? hwr * 1.5 : hwr;

                        if (headerNam.indexOf('group') === 0 && headerGroups[headerNam]) {
                            $.each(headerGroups[headerNam],
                                function(headerSubNam, headerSubTxt) {
                                    gwfc++;
                                    headRowSub$.append($("<th/>").css("width", hw + '%').html(headerSubTxt));
                                    headerSubList[headerSubNam] = headerSubTxt;
                                });

                            headRow$.append($("<th/>")
                                .attr("colSpan", gwfc)
                                .css("width", (hw * gwfc) + '%')
                                .html(headerTxt));
                        } else {
                            headRow$.append($("<th/>")
                                .attr("rowSpan", 2).css("width", hw + '%')
                                .html(headerTxt));
                        }
                    });

                $(selector).append($("<thead/>").append(headRow$).append(headRowSub$));
            }
            //** Table Header End **//


            //** Data Grouping **//
            var inTableGroup = "";
            var dataColumnGroups = {};
            for (var fi = 0; fi < dataColumns.length; fi++) {
                if ([fi] && dataColumns[fi].indexOf('.') > 0) {
                    var dColumn = dataColumns[fi],
                        gName = dColumn.split('.')[0],
                        fName = dColumn.split('.')[1];

                    if (!dataColumnGroups[gName]) {
                        dataColumnGroups[gName] = {};

                        var grpName = "";
                        $.each(headerGroups,
                            function(groupNam, groupFields) {
                                if (Object.keys(groupFields).includes(dColumn)) {
                                    grpName = groupNam;
                                    return;
                                }
                            });
                        if (grpName.indexOf("groupInTable") >= 0) inTableGroup = gName;
                    }
                    dataColumnGroups[gName][fName] = fName;
                } else {
                    dataColumnGroups[dataColumns[fi]] = dataColumns[fi];
                }
            }

            var groupedData = {};
            data.forEach(function(d) {
                var zone = basicColumns[0],
                    circle = basicColumns[2],
                    snd = basicColumns[4],
                    sst = "substationCode";

                groupedData[d[zone]] = groupedData[d[zone]] || {};
                groupedData[d[zone]][d[circle]] = groupedData[d[zone]][d[circle]] || {};
                groupedData[d[zone]][d[circle]][d[snd]] = groupedData[d[zone]][d[circle]][d[snd]] || {};
                groupedData[d[zone]][d[circle]][d[snd]][d[sst]] = d;
            });
            //** Data Grouping End **//


            //** Table Body **//
            var slNo = 1, rsZone = 0, $zoneTrs = "", $allTrs = "";
            $.each(groupedData,
                function(zoneName, zoneInfo) {

                    var rsCircle = 0, $circleTrs = "";
                    $.each(zoneInfo,
                        function(circleName, circleInfo) {

                            var rsSnD = 0, $sndTrs = "", isCity = "", dist = "";
                            $.each(circleInfo,
                                function(sndName, sndInfo) {

                                    var rsSSt = 0, $sstTrs = "";
                                    $.each(sndInfo,
                                        function(sstCode, sstInfo) {
                                            if (!sstInfo)
                                                return;

                                            var ic = 0, isRight, dataValue = "", $infoTrs = "", $infoTds = "";

                                            rsSSt = sstInfo[inTableGroup] && sstInfo[inTableGroup].length > 0 ? sstInfo[inTableGroup].length : 1;

                                            isCity = sstInfo.isCity || "";
                                            dist = sstInfo.distName || "";

                                            $.each(dataColumnGroups,
                                                function(groupName, dtColumns) {
                                                    if (!sstInfo[groupName]) return;

                                                    switch (typeof dtColumns) {
														case "object":
															if (groupName == inTableGroup) {
																if (sstInfo[groupName].length > 0) {
																	for (ic = 0; ic < sstInfo[groupName].length; ic++) {
																		$.each(dtColumns,
																			function(dc, dataColumn) {
																				dataValue = sstInfo[groupName][ic][dataColumn];
																				isRight = (dataValue === parseInt(dataValue, 10));

																				$infoTds += "<td style='text-align:" + (isRight ? "right" : "left") + ";'>" + dataValue + "</td>";
																			});

																		if ($infoTrs) {
																			$infoTrs += "<tr>";
																		}

																		$infoTrs += $infoTds;
																		$infoTrs += '</tr>';
																		$infoTds = "";
																	}
																} else {
																	$.each(dtColumns,
																		function(dc, dataColumn) {
																			$infoTds += "<td></td>";
																		});
																}
															} else {
																$.each(dtColumns,
																	function(dc, dataColumn) {
																		dataValue = "";
																		if (sstInfo[groupName][dataColumn]) {
																			dataValue = sstInfo[groupName][dataColumn];
																		} else {
																			for (ic = 0; ic < sstInfo[groupName].length; ic++) {
																				dataValue += sstInfo[groupName][ic][dataColumn] + "<br />";
																			}
																		}

																		isRight = (dataValue === parseInt(dataValue, 10));

																		$infoTds += "<td rowspan='" + rsSSt + "' style='text-align:" + (isRight ? "right" : "left") + ";'>" + dataValue + "</td>";
																	});
															}
															break;

														case "string":
															dataValue = sstInfo[dtColumns] || "";
															isRight = (dataValue === parseInt(dataValue, 10));

															$infoTds += "<td rowspan='" + rsSSt + "' style='text-align:" + (isRight ? "right" : "left") + ";'>" + dataValue + "</td>";
															break;

														default:
															$infoTds += "<td rowspan='" + rsSSt + "'></td>";
															break;
                                                    }

                                                });

                                            if (!sstInfo[inTableGroup] || sstInfo[inTableGroup].length < 1) {
                                                if ($infoTrs) {
                                                    $infoTrs += "<tr>";
                                                }

                                                $infoTrs += $infoTds;
                                                $infoTrs += '</tr>';
                                                $infoTds = "";

                                            }

                                            rsSnD += rsSSt;

                                            if ($sstTrs) {
                                                $sstTrs += "<tr>";
                                            }

                                            $sstTrs += $infoTrs;
                                            $sstTrs += '</tr>';

                                            $infoTrs = "";
                                            rsSSt = 0;
                                        });

                                    rsCircle += rsSnD;

                                    if ($sndTrs) {
                                        $sndTrs += "<tr>";
                                    }

                                    $sndTrs += "<td rowspan='" + rsSnD + "' style='text-align:left;'>" + sndName + "</td>";
                                    $sndTrs += $sstTrs;
                                    $sndTrs += '</tr>';

                                    $sstTrs = "";
                                    rsSnD = 0;
                                });

                            rsZone += rsCircle;

                            if ($circleTrs) {
                                $circleTrs += "<tr>";
                            }

                            $circleTrs += "<td rowspan='" +
                                rsCircle +
                                "' style='text-align:center;'>" +
                                isCity +
                                "</td>" +
                                "<td rowspan='" +
                                rsCircle +
                                "' style='text-align:left;'>" +
                                circleName +
                                "</td>" +
                                "<td rowspan='" +
                                rsCircle +
                                "' style='text-align:left;'>" +
                                dist +
                                "</td>";
                            $circleTrs += $sndTrs;
                            $circleTrs += '</tr>';
                            $sndTrs = "";
                            rsCircle = 0;
                        });


                    if ($zoneTrs) {
                        $zoneTrs += "<tr>";
                    }

                    $zoneTrs += "<td rowspan='" + rsZone + "' style='text-align:right;'>" + slNo + ".</td>";
                    $zoneTrs += "<td rowspan='" + rsZone + "' style='text-align:left;'>" + zoneName + "</td>";
                    $zoneTrs += $circleTrs;
                    $zoneTrs += '</tr>';
                    $circleTrs = "";


                    if (!$allTrs) {
                        $allTrs += "<tr>";
                    }
                    $allTrs += $zoneTrs;
                    $zoneTrs = "";
                    rsZone = 0;
                    ++slNo;
                });

            tbody$.append($allTrs);

            $(selector).append(tbody$);

            //** Table Body End **//

        }


        $("#ZoneCode").on("change",
            function() {
                var zoneCode = $("#ZoneCode").val(),
                    $circle = $("#CircleCode");

                $circle.empty();
                $("#SnDCode").empty();
                $("#SubstationId").empty();
                $("#RouteCode").empty();

                if (!zoneCode)
                    return false;

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetCircleList", "LookUpCircleInfoes")',
                    dataType: "json",
                    data: { zoneCode: zoneCode },
                    before: $("#busy-indicator").fadeIn(150),
                    success: function(circles) {
                        $circle.append(
                            '<option value="" selected="selected">----- all circle -----</option>');
                        $.each(circles,
                            function(i, circle) {
                                $("<option />").val(circle.value).html(circle.text)
                                    .appendTo($circle);
                            });
                    },
                    error: function(ex, status, error) {
                        msg.init("error",
                            "Error... . . !",
                            "Failed to load Circle list. " + ex.responseText);
                    },
                    complete: $("#busy-indicator").fadeOut(150)
                });
                return false;
            });

        $("#CircleCode").on("change",
            function() {
                var circleCode = $("#CircleCode").val(),
                    $snd = $("#SnDCode");

                $snd.empty();
                $("#SubstationId").empty();
                $("#RouteCode").empty();

                if (!circleCode)
                    return false;

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetSnDList", "LookUpSnDInfoes")",
                    dataType: "json",
                    data: { circleCode: circleCode },
                    before: $("#busy-indicator").fadeIn(150),
                    success: function(snds) {
                        $snd.append(
                            '<option value="" selected="selected">----- all SnD -----</option>');
                        $.each(snds,
                            function(i, snd) {
                                $("<option />").val(snd.value).html(snd.text).appendTo($snd);
                            });
                    },
                    error: function(ex, status, error) {
                        msg.init("error",
                            "Error... . . !",
                            "Failed to load SnD list. " + ex.responseText);
                    },
                    complete: $("#busy-indicator").fadeOut(150)
                });
                return false;
            });

        $("#SnDCode").on("change",
            function() {
                var sndCode = $("#SnDCode").val(),
                    $substation = $("#SubstationId");

                $substation.empty();
                $("#RouteCode").empty();

                if (!sndCode)
                    return false;

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetSubStationList", "LookUpZoneInfoes")",
                    dataType: "json",
                    data: { sndCode: sndCode },
                    before: $("#busy-indicator").fadeIn(150),
                    success: function(substations) {
                        $substation.append(
                            '<option value="" selected="selected">----- all sub-station -----</option>');
                        $.each(substations,
                            function(i, substation) {
                                $("<option />").val(substation.value).html(substation.text)
                                    .appendTo($substation);
                            });
                    },
                    error: function(ex, status, error) {
                        msg.init("error",
                            "Error... . . !",
                            "Failed to load Sub-Station list. " + ex.responseText);
                    },
                    complete: $("#busy-indicator").fadeOut(150)
                });
                return false;
            });

    </script>

}

