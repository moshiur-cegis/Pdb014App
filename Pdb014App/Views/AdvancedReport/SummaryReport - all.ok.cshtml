@using Pdb014App.Models.Report

@{
    string rptName = ViewBag.ReportName, rptAction = ViewBag.ReportAction, rptController = ViewBag.ReportController;

    ViewData["Title"] = rptName + "Report";
    Layout = "~/Views/Shared/_Layout.cshtml";


    //var regionLevel = ViewBag.RegionLevel as string;

    //var regionInfo = ViewBag.RegionInfo != null
    //    ? ViewBag.RegionInfo as List<ReportField>
    //    : new List<ReportField>
    //    {
    //        new ReportField {Name = "zone", Title = "Zone"},
    //        new ReportField {Name = "circle", Title = "Circle"},
    //        new ReportField {Name = "snd", Title = "S&D"},
    //        new ReportField {Name = "substation", Title = "Substation"},
    //                    };

    var fieldList = ViewBag.FieldList != null
    ? ViewBag.FieldList as List<ReportField>
        : null;


    int oc = 5;
    var regionList = ViewBag.RegionList != null
    ? ViewBag.RegionList as List<string>
        : new List<string>
            (oc) { "", "", "", "", "" };

    if (regionList == null || regionList.Count < 1)
    {
        regionList = new List<string>
            (oc) { "", "", "", "", "" };
    }
    else if (regionList.Count < oc)
    {
        for (int rc = regionList.Count; rc < oc; rc++)
        {
            regionList.Add("");
        }
    }

}

@section Styles {

    <link href="~/lib/jquery-tablesorter/css/theme.blue.min.css" rel="stylesheet" />
    <link href="~/css/multi.checkbox.tree.css" rel="stylesheet" />
    <link href="~/css/report.style.css" rel="stylesheet" />

    <link href="~/lib/bracket/lib/perfect-scrollbar/css/perfect-scrollbar.css" rel="stylesheet" />

}


<form asp-action="SummaryReport" asp-controller="SummaryReport">

    <div class="row">
        <div class="col-md-1"></div>

        <div class="col-md-4">

            <fieldset style="margin-top: 0;">
                <legend>▣ Report Fields</legend>

                @if (fieldList != null && fieldList.Count > 0)
                {
                    <p class="tree">
                        <label for="all_fields" style="margin: 0 4px 0 0;">▣ All Fields</label>
                        <input type="checkbox" id="all_fields" class="all-checked" />
                    </p>

                    <ul id="field_list" class="tree" style=" min-height: 295px; max-height: 340px; overflow: auto;">
                        @for (int fc = 0; fc < fieldList.Count; ++fc)
                        {
                            if (fieldList[fc].Visible)
                            {
                                <li class="@fieldList[fc].GroupName">
                                    <input type="checkbox" asp-for="@fieldList[fc].Selected" data-field-name="@fieldList[fc].Name" data-field-title="@fieldList[fc].Title" data-field-group="@fieldList[fc].GroupName" class="multi-checkbox" />

                                    @{
                                        var grpName = fieldList[fc].Name;
                                        if (fieldList[fc].Name.StartsWith("group") && fieldList.Any(f => !string.IsNullOrEmpty(f.GroupName) && f.GroupName.Equals(grpName)))
                                        {
                                            @*<label asp-for="@fieldList[fc].Selected">@fieldList[fc].Title <span class="multi-item"></span></label>
                                                <ul id="field_list_@grpName" class="sub-list" style="max-height: 75px; overflow: auto; display: none;">*@
                                            <label asp-for="@fieldList[fc].Selected">@fieldList[fc].Title <span class="multi-item active"></span></label>
                                            <ul id="field_list_@grpName" class="sub-list" style="max-height: 75px; overflow: auto;">
                                                @{
                                                    var grpFieldList = fieldList.Where(f => !string.IsNullOrEmpty(f.GroupName) && f.GroupName.Equals(grpName)).ToList();
                                                    for (int gfc = 0; gfc < grpFieldList.Count; ++gfc)
                                                    {
                                                        <li class="@grpName">
                                                            <input type="checkbox" id="grpFields_@($"{grpName}_{gfc}")" data-field-name="@grpFieldList[gfc].Name" data-field-title="@grpFieldList[gfc].Title" data-field-group="@grpFieldList[gfc].GroupName" class="multi-checkbox" />
                                                            <label for="grpFields_@($"{grpName}_{gfc}")">@grpFieldList[gfc].Title</label>
                                                        </li>
                                                    }
                                                    fc += grpFieldList.Count;
                                                }
                                            </ul>
                                        }
                                        else
                                        {
                                            <label asp-for="@fieldList[fc].Selected">@fieldList[fc].Title</label>
                                        }
                                    }
                                </li>
                            }
                            else
                            {
                                <li class="@fieldList[fc].GroupName" style="display: none;">
                                    <input type="checkbox" asp-for="@fieldList[fc].Selected" data-field-name="@fieldList[fc].Name" data-field-title="@fieldList[fc].Title" data-field-group="@fieldList[fc].GroupName" class="multi-checkbox" />
                                    <label asp-for="@fieldList[fc].Selected">@fieldList[fc].Title</label>
                                </li>
                            }
                        }
                    </ul>
                }

            </fieldset>

        </div>

        <div class="col-md-6">

            @*<fieldset style="margin-top: 0;">
                    <legend>▣ Report by Region</legend>

                    <div id="region_level" class="ml-3">
                        @for (var i = 0; i < 4; i++)
                        {
                            @if (regionInfo?[i] == null)
                            {
                                continue;
                            }

                            <div class="custom-control-inline mr-3">
                                @if (!string.IsNullOrEmpty(regionLevel) && regionLevel.Equals(regionInfo[i].Name))
                                {
                                    <input type="radio" id="@regionInfo[i].Name" name="regionLevel" value="@regionInfo[i].Name" checked />
                                }
                                else
                                {
                                    <input type="radio" id="@regionInfo[i].Name" name="regionLevel" value="@regionInfo[i].Name" />
                                }
                                <label for="@regionInfo[i].Name" style="margin: .2rem;">@regionInfo[i].Title</label>
                            </div>
                        }
                    </div>
                </fieldset>*@

            <fieldset style="margin-top: 1.15rem;">
                <legend>▣ Regional Boundaries</legend>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Zone</label>
                            <select id="ZoneCode" class="form-control" asp-items="ViewBag.ZoneList" value="@ViewBag.ZoneCode">
                                <option value="" selected="selected">----- all zone -----</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Circle</label>
                            <select id="CircleCode" class="form-control" asp-items="ViewBag.CircleList" value="@ViewBag.CircleCode">
                                <option value="" selected="selected">----- all circle -----</option>
                            </select>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">S&D</label>
                            <select id="SnDCode" class="form-control" asp-items="ViewBag.SnDList" value="@ViewBag.SnDCode">
                                <option value="" selected="selected">----- all S&D -----</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Substation</label>
                            <select id="SubstationId" class="form-control" asp-items="ViewBag.SubstationList" value="@ViewBag.SubstationCode">
                                <option value="" selected="selected">----- all substation -----</option>
                            </select>
                        </div>
                    </div>
                </div>

                @*<div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="control-label">Route</label>
                                <select id="RouteCode" class="form-control" asp-items="ViewBag.RouteList" value="@ViewBag.RouteCode">
                                    <option value="" selected="selected">----- all route -----</option>
                                </select>
                            </div>
                        </div>
                    </div>*@
            </fieldset>

            <div>
                <button id="btnRefresh" onclick="return false;" class="btn btn-primary float-right mt-2">Refresh</button>
            </div>

        </div>

        <div class="col-md-1"></div>
    </div>

</form>


<div class="row">
    <div class="col-md-12 pl-3 pr-3">
        <fieldset>
            <legend>▣ Report</legend>

            <div id="dataView" class="form-view">
                <button class="btn btn-primary" style="float:right; margin-top:-.8rem; margin-bottom:.2rem;" onclick="return exportToExcel('report_view', 'report-data');return false;">Export To Excel</button>
                <div id="multi-form-wrapper" class="data-view multi-form-wrapper">
                    <table id="report_view" class="table table-responsive multi-form-view table-info"></table>
                </div>
            </div>

            @*<div id="chartAll">
                    <div id="chartBar" style="min-width: 320px; height: 40vh; margin: 1.5rem auto"></div>

                    <div class="form-group" style="margin-top: 1rem; margin-bottom: .25rem;">
                        <label class="control-label">Pie Chart by:</label>
                        <select id="PieChartOptions" class="form-control" style="display: inline; max-width: 230px;"></select>
                    </div>
                    <div id="chartPie" style="min-width: 320px; height: 400px; margin: 0 auto"></div>
                </div>*@

        </fieldset>
    </div>
</div>


@section Scripts {

    @*<script src="~/lib/bootstrap/dist/js/bootstrap-select.js"></script>*@

    <script src="~/lib/jquery-rowspanizer/rowspanizer.min.js"></script>

    <script src="~/lib/jquery-tablesorter/js/tablesorter.min.js"></script>
    <script src="~/lib/jquery-tablesorter/js/tablesorter.widgets.min.js"></script>

    <script src="~/lib/highcharts/highcharts.js"></script>
    <script src="~/lib/highcharts/modules/exporting.js"></script>
    <script src="~/lib/highcharts/modules/export-data.js"></script>

    <script src="~/js/multi.checkbox.tree.js"></script>
    @*<partial name="_MultiCheckBoxScriptsPartial" />*@

    <script type="text/javascript">

        var rptName = "@rptName",
            url = '@Url.Action(rptAction, rptController)';

        $(function() {

            $("#btnRefresh").on("click", function() { return load_data(url); });

            $("#all_fields").on("change", function() { CheckAllMultiCheckBox(this); });

            $(".multi-checkbox").on("change", function() { CheckMultiCheckBox(this); }).trigger("change");

            OpenCloseAll($(".multi-checkbox"), false);

            load_data(url);
        });


        var //regionLevel,
            regionList = [],
            headerGroups = {},
            headerList = {},
            headerGroupList = {},
            basicColumns = [],
            dataColumns = [],
            chartDataPie = [];


        function export_to_excel(tableId, fileName) {
            if (!tableId) return false;

            $("#" + tableId).exportToexcel({
                containerid: tableId,
                datatype: 'table',
                fileName: fileName ? fileName : "Report Data",
                worksheetName: "PDB Report Data"
            });
            return true;
        }

        function exportToExcel(tableId, filename) {
            var dataType = 'application/vnd.ms-excel',
                tableSelect = document.getElementById(tableId),
                tableHtml = tableSelect.outerHTML.replace(/ /g, '%20'),
                downloadLink = document.createElement("a");

            // Specify file name
            filename = filename ? filename + '.xls' : 'report_data.xls';

            // Create download link element

            document.body.appendChild(downloadLink);

            if (navigator.msSaveOrOpenBlob) {
                var blob = new Blob(['\ufeff', tableHtml],
                    {
                        type: dataType
                    });
                navigator.msSaveOrOpenBlob(blob, filename);
            } else {
                // Create a link to the file
                downloadLink.href = 'data:' + dataType + ', ' + tableHtml;

                // Setting the file name
                downloadLink.download = filename;

                //triggering the function
                downloadLink.click();
            }

            return false;
        }


        function load_data(url) {

            set_basic_info();

            $.ajax({
                type: 'POST',
                url: url,
                dataType: "json",
                data: { "regionList": regionList },
                before: $("#busy-indicator").fadeIn(150),
                success: function(data) {
                    console.log(data);

                    $("#report_view").empty();
                    $("#chartBar").empty();
                    $("#chartPie").empty();
                    $("#PieChartOptions").empty();

                    if (dataColumns && dataColumns.length > 0) {
                        $("#dataView").css('display', '');
                        $("#chartAll").css('display', '');

                        init_data_table("#report_view", headerList, basicColumns, dataColumns, data);
                        //init_chart_data(headerList, dataColumns, data);
                    } else {
                        $("#dataView").css('display', 'none');
                        $("#chartAll").css('display', 'none');
                    }
                    $("#busy-indicator").fadeOut(150);
                },
                error: function(ex, status, error) {
                    $("#busy-indicator").fadeOut(150);
                    msg.init("error", "Error... . . !", "Failed to load data. <br/>" + ex.responseText);
                },
                //complete: $("#busy-indicator").fadeOut(150),
            });

            return true;
        }

        function set_basic_info() {

            //regionLevel = $("input[name='regionLevel']:checked").val();

            regionList = [];
            regionList[0] = $("#ZoneCode").val();
            regionList[1] = $("#CircleCode").val();
            regionList[2] = $("#SnDCode").val();
            regionList[3] = $("#SubstationId").val();
            regionList[4] = $("#RouteCode").val();

            headerGroups = {};
            headerList = {};
            headerGroupList = {};
            basicColumns = [];
            dataColumns = [];

            basicColumns.push("zoneName");
            basicColumns.push("isCity");
            basicColumns.push("circleName");
            basicColumns.push("distName");
            basicColumns.push("sndName");

            headerList["zoneName"] = "Zone Name";
            headerList["isCity"] = "City/Except City";
            headerList["circleName"] = "Circle Name";
            headerList["distName"] = "District Name";
            headerList["sndName"] = "S&D Name";

            //headerList["isCity"] = "In City ?";


            //switch (regionLevel) {
            //case "zone":
            //    basicColumns.push("zoneName");

            //    headerList["zoneName"] = "Zone Name";
            //    break;

            //case "circle":
            //    basicColumns.push("zoneName");
            //    basicColumns.push("circleName");

            //    headerList["zoneName"] = "Zone Name";
            //    headerList["circleName"] = "Circle Name";
            //    break;

            //case "snd":
            //    basicColumns.push("zoneName");
            //    basicColumns.push("circleName");
            //    basicColumns.push("sndName");

            //    headerList["zoneName"] = "Zone Name";
            //    headerList["circleName"] = "Circle Name";
            //    headerList["sndName"] = "S&D Name";
            //    break;

            //case "substation":
            //    basicColumns.push("zoneName");
            //    basicColumns.push("circleName");
            //    basicColumns.push("sndName");
            //    //basicColumns.push("substationName");

            //    headerList["zoneName"] = "Zone Name";
            //    headerList["circleName"] = "Circle Name";
            //    headerList["sndName"] = "S&D Name";
            //    //headerList["substationName"] = "Sub-station Name";
            //    break;

            //default:
            //    basicColumns.push("zoneName");
            //    headerList["zoneName"] = "Zone Name";
            //    break;
            //}

            //$("#field_list input[type='checkbox']:checked").each(function() {
            $("#field_list input[type='checkbox']").each(function() {

                if (!$(this).prop("checked") && !$(this).prop("indeterminate"))
                    return;

                var fldName = $(this).attr("data-field-name"),
                    fldTitle = $(this).attr("data-field-title"),
                    fldGroup = $(this).attr("data-field-group");

                if (fldName.indexOf('group') === 0) {
                    headerGroups[fldName] = {};
                    headerList[fldName] = fldTitle;
                    return;
                } else if (fldGroup) {
                    //if (fldName && fldName.indexOf('.') > 0) {
                    //    fldGroup = fldName.split('.')[0];
                    //    //fldName = fldName.split('.')[1];

                    //    headerGroups[fldGroup] = headerGroups[fldGroup] || {};
                    //    headerGroups[fldGroup][fldName.split('.')[1]] = fldTitle;
                    //} else {
                    //    headerGroups[fldGroup] = headerGroups[fldGroup] || {};
                    //    headerGroups[fldGroup][fldName] = fldTitle;
                    //}

                    headerGroups[fldGroup] = headerGroups[fldGroup] || {};
                    headerGroups[fldGroup][fldName] = fldTitle;

                    //if (!headerGroups[fldGroup]) {
                    //    headerGroups[fldGroup] = {};
                    //}

                    //headerGroups[fldGroup][fldName] = fldTitle;
                }

                dataColumns.push(fldName);
                headerList[fldName] = fldTitle;
                headerGroupList[fldName] = headerList[fldGroup] || "";
                //headerGroupList[fldName] = headerList[fldGroup] ? headerList[fldGroup] : "";
            });
        }

        function init_data_table(selector, headerList, basicColumns, dataColumns, data) {
            $(selector).empty();

            if (!dataColumns || !data || dataColumns.length < 1 || data.length < 1) {
                $("#dataView").css('display', 'none');
                return;
            }
            $("#dataView").css('display', '');

            var headRow$ = $("<tr/>"),
                totalRow$ = $("<tr/>"),
                tbody$ = $("<tbody/>"),
                hi = 0,
                hwr = Math.floor((100 / ((basicColumns.length * 1.5) + dataColumns.length)) * 1000) / 1000;

            //console.log(headerGroups);
            //console.log(basicColumns);
            //console.log(dataColumns);

            //** Table Header **//
            if (headerGroups.length < 1) {
                headRow$.append($("<th/>").css("width", '25px').html("Sl. No."));
                $.each(headerList,
                    function(headerNam, headerTxt) {
                        var hw = hi++ < basicColumns.length ? hwr * 1.5 : hwr;
                        headRow$.append($("<th/>").css("width", hw + '%').html(headerTxt));
                    });
                $(selector).append($("<thead/>").append(headRow$));
            } else {
                var gfc = 0,
                    headerSubList = {},
                    headRowSub$ = $("<tr/>");

                $.each(headerGroups, function (groupNam, groupFields) { gfc += Object.keys(groupFields).length - 1; });
                //const elCount = (tel, grpFields) => tel + Object.keys(grpFields).length - 1;
                //gfc = headerGroups.reduce(function(fc, grpFields) {
                //        return fc + Object.keys(grpFields).length - 1;
                //    }, 0);

                hwr = Math.floor((100 / ((basicColumns.length * 1.5) + dataColumns.length + gfc + 0.333)) * 1000) /
                    1000;

                //headRow$.append($("<th/>")
                //    .attr("rowSpan", 2).css({ "width": (hwr * 0.333) + '%', "min-width": '25px' })
                //    .html("Sl. No."));

                $.each(headerList,
                    function(headerNam, headerTxt) {
                        if (headerSubList[headerNam]) {
                            //headerList[headerNam] += ' ' + rptName;
                            //headerList[headerNam] += ' ' + headerGroupList[headerNam];
                            headerList[headerNam] = headerGroupList[headerNam]
                                ? headerGroupList[headerNam] + ' (' + headerList[headerNam] + ')'
                                : headerList[headerNam];
                            return;
                        }

                        var gwfc = 0,
                            hw = hi++ < basicColumns.length ? hwr * 1.5 : hwr;

                        if (headerNam.indexOf('group') === 0 && headerGroups[headerNam]) {
                            $.each(headerGroups[headerNam],
                                function(headerSubNam, headerSubTxt) {
                                    gwfc++;
                                    headRowSub$.append($("<th/>").css("width", hw + '%').html(headerSubTxt));
                                    headerSubList[headerSubNam] = headerSubTxt;
                                    //delete headerList[headerSubNam];
                                });

                            headRow$.append($("<th/>")
                                .attr("colSpan", gwfc)
                                .css("width", (hw * gwfc) + '%')
                                .html(headerTxt));
                        } else {
                            headRow$.append($("<th/>")
                                .attr("rowSpan", 2).css("width", hw + '%')
                                .html(headerTxt));
                        }
                    });

                $(selector).append($("<thead/>").append(headRow$).append(headRowSub$));
            }
            //** Table Header End **//


            //console.log(headerGroups);
            //console.log(headerGroups);
            //console.log(basicColumns);
            //console.log(dataColumns);

            var dataColumnsNew = [];

            for (var fi = 0; fi < dataColumns.length; fi++) {
                if ([fi] && dataColumns[fi].indexOf('.') > 0) {
                    var gName = dataColumns[fi].split('.')[0],
                        fName = dataColumns[fi].split('.')[1];
                    dataColumnsNew[gName] = dataColumnsNew[gName] || [];
                    //dataColumnsNew[gName][fName] = dataColumnsNew[gName][fName] || [];
                    dataColumnsNew[gName].push(fName);
                } else {
                    //dataColumnsNew.push(dataColumns[fi]);
                    dataColumnsNew[dataColumns[fi]] = dataColumnsNew[dataColumns[fi]] || [];
                    dataColumnsNew[dataColumns[fi]].push(dataColumnsNew[dataColumns[fi]]);
                    //dataColumnsNew[dataColumns[fi]] = dataColumnsNew[dataColumns[fi]];
                }
            }

            var groupedData = {};
            data.forEach(function(d) {
                //basicColumns.push("zoneName");
                //basicColumns.push("circleName");
                //basicColumns.push("sndName");
                var zone = basicColumns[0],
                    circle = basicColumns[2],
                    snd = basicColumns[4],
                    sst = "substationCode";

                groupedData[d[zone]] = groupedData[d[zone]] || {};
                groupedData[d[zone]][d[circle]] = groupedData[d[zone]][d[circle]] || {};
                groupedData[d[zone]][d[circle]][d[snd]] = groupedData[d[zone]][d[circle]][d[snd]] || {};
                groupedData[d[zone]][d[circle]][d[snd]][d[sst]] = d;
                //groupedData[d[zone]][d[circle]][d[snd]][d[sst]] = groupedData[d[zone]][d[circle]][d[snd]][d[sst]] || [];
                //groupedData[d[zone]][d[circle]][d[snd]][d[sst]].push(d);

                //groupedData[d[zone]][d[circle]][d[snd]].push(d);
            });

            //console.log(grpName);



            //console.log(dataColumnsNew);
            console.log(groupedData);

            //return Object.keys(groupedData).map(function(group) {
            //    return groupedData[zone];
            //});



            //var grpName = "";
            //console.log("---------");
            //$.each(headerGroups, function(groupNam, groupFields) { if (Object.keys(groupFields).includes("f11kInfo.name")) { grpName = groupNam;return; } });

            //console.log(grpName);


            //$each.
            //groupedData[d[zone]][d[circle]][d[snd]] = groupedData[d[zone]][d[circle]][d[snd]] || [];

                //var drZone$ = $("<tr/>");

                //drZone$.attr({ "class": di % 2 == 1 ? "alt" : "" });

            //var rsZone = 0, rsCircle = 0, rsSnD = 0, rsSSt = 0, rcInfo = 0;

            //$.each(groupedData, )

            var $allTrs = "";
            var rsZone = 0, $zoneTrs = "";
            $.each(groupedData, function (zoneName, zoneInfo) {

                //console.log("---------------------------");
                //console.log(zoneName);
                //console.log(zoneInfo);

                var rsCircle = 0, $circleTrs = "";
                $.each(zoneInfo, function (circleName, circleInfo) {

                    //console.log(circleName);
                    //console.log(circleInfo);

                    var isCity = "", dist = "";
                    var rsSnD = 0, $sndTrs = "";
                    $.each(circleInfo, function (sndName, sndInfo) {
                        //console.log(sndName);
                        console.log(sndInfo);

                        var rsSSt = 0, $sstTrs = "";
                        $.each(sndInfo,
                            function(sstCode, sstInfo) {

                                if (!sstInfo || !sstInfo.f11kInfo || sstInfo.f11kInfo.length < 1)
                                    return;

                                //console.log(sstCode);
                                //console.log(sstInfo);
                                //console.log(sstInfo[0].f11kInfo);
                                //console.log("---------------------------");


                                var rcInfo = 0, $infoTrs = "", $infoTds = "";

                                rcInfo = sstInfo.f11kInfo.length;

                                console.log("------------f11kInfo---------------");
                                console.log(rcInfo);
                                console.log(sstInfo.f11kInfo);
                                console.log("---------------------------");

                                isCity = sstInfo.isCity;
                                dist = sstInfo.distName;

                                var ic = 0, name = "", type = "", length = "", capacity = "";
                                for (ic = 0; ic < sstInfo.f33kInInfo.length; ic++) {
                                    name += sstInfo.f33kInInfo[ic]["name"] + "<br />";
                                    type += sstInfo.f33kInInfo[ic]["type"] + "<br />";
                                    length += sstInfo.f33kInInfo[ic]["length"] + "<br />";
                                }
                                $infoTds += "<td rowspan='" +
                                    rcInfo +
                                    "' style='text-align:left;'>" +
                                    name +
                                    "</td><td rowspan='" +
                                    rcInfo +
                                    "' style='text-align:left;'>" +
                                    type +
                                    "</td><td rowspan='" +
                                    rcInfo +
                                    "' style='text-align:right;'>" +
                                    length +
                                    "</td>";

                                //console.log(sstInfo);
                                //console.log(sstInfo.substation);
                                //console.log("---------------------------");

                                name = "";
                                capacity = "";
                                if (sstInfo.substation) {
                                    name = sstInfo.substation["name"];
                                    capacity = sstInfo.substation["capacity"];
                                }
                                $infoTds += "<td rowspan='" +
                                    rcInfo +
                                    "' style='text-align:left;'>" +
                                    name +
                                    "</td><td rowspan='" +
                                    rcInfo +
                                    "' style='text-align:left;'>" +
                                    capacity +
                                    "</td>";

                                name = "";
                                type = "";
                                length = "";
                                for (ic = 0; ic < sstInfo.f33kOutInfo.length; ic++) {
                                    name += sstInfo.f33kOutInfo[ic]["name"] + "<br />";
                                    type += sstInfo.f33kOutInfo[ic]["type"] + "<br />";
                                    length += sstInfo.f33kOutInfo[ic]["length"] + "<br />";
                                }
                                $infoTds += "<td rowspan='" +
                                    rcInfo +
                                    "' style='text-align:left;'>" +
                                    name +
                                    "</td><td rowspan='" +
                                    rcInfo +
                                    "' style='text-align:left;'>" +
                                    type +
                                    "</td><td rowspan='" +
                                    rcInfo +
                                    "' style='text-align:right;'>" +
                                    length +
                                    "</td>";


                                for (ic = 0; ic < sstInfo.f11kInfo.length; ic++) {
                                    //++rcInfo;
                                    $infoTds += "<td style='text-align:left;'>" +
                                        sstInfo.f11kInfo[ic]["name"] +
                                        "</td><td style='text-align:left;'>" +
                                        sstInfo.f11kInfo[ic]["type"] +
                                        "</td><td style='text-align:right;'>" +
                                        sstInfo.f11kInfo[ic]["length"] +
                                        "</td>";

                                    if ($infoTrs) {
                                        $infoTrs += "<tr>";
                                    }

                                    //$infoTrs += "<td style='text-align:left;'><strong style='min-width:120px; display:inline-block;'>$sub_sub_cat_title</strong></td>";
                                    $infoTrs += $infoTds;
                                    $infoTrs += '</tr>';
                                    $infoTds = "";
                                }

                                rsSSt += rcInfo;
                                rsSnD += rsSSt;

                                if ($sstTrs) {
                                    $sstTrs += "<tr>";
                                }

                                //$sstTrs += "<td style='text-align:left;'><strong style='min-width:120px; display:inline-block;'>$sub_sub_cat_title</strong></td>";
                                $sstTrs += $infoTrs;
                                $sstTrs += '</tr>';

                                $infoTrs = "";
                                rsSSt = 0;

                                //return;
                            });

                        rsCircle += rsSnD;

                        if ($sndTrs) {
                            $sndTrs += "<tr>";
                        }

                        $sndTrs += "<td rowspan='" + rsSnD + "' style='text-align:left;'>" + sndName + "</td>";
                        $sndTrs += $sstTrs;
                        $sndTrs += '</tr>';

                        $sstTrs = "";
                        rsSnD = 0;

                        //return;
                    });

                    rsZone += rsCircle;

                    if ($circleTrs) {
                        $circleTrs += "<tr>";
                    }

                    $circleTrs += "<td rowspan='" + rsCircle + "' style='text-align:left;'>" + isCity + "</td>" +
                        "<td rowspan='" + rsCircle + "' style='text-align:left;'>" + circleName + "</td>" +
                        "<td rowspan='" + rsCircle + "' style='text-align:left;'>" + dist + "</td>";
                    $circleTrs += $sndTrs;
                    $circleTrs += '</tr>';
                    $sndTrs = "";
                    rsCircle = 0;
                });


                if ($zoneTrs) {
                    $zoneTrs += "<tr>";
                }

                $zoneTrs += "<td rowspan='" + rsZone + "' style='text-align:left;'>" + zoneName + "</td>";
                $zoneTrs += $circleTrs;
                $zoneTrs += '</tr>';
                $circleTrs = "";


                if (!$allTrs) {
                    $allTrs += "<tr>";
                }
                $allTrs += $zoneTrs;
                $zoneTrs = "";
                rsZone = 0;
            });


            tbody$.append($allTrs);

            $(selector).append(tbody$);


            return;
            /**
             *
            groupedData.forEach(function (zoneName, zoneInfo) {

                console.log(zoneName);
                console.log(zoneInfo);

                var rsCircle = 0, $circleTrs = "";

                zoneInfo.forEach(function (circleName, circleInfo) {

                    console.log(circleName);
                    console.log(circleInfo);

                    var rsSnD = 0, $sndTrs = "";

                    circleInfo.forEach(function (sndName, sndInfo) {

                        console.log(sndName);
                        console.log(sndInfo);

                        var rsSSt = 0, $sstTrs = "";
                        sndInfo.forEach(function (sstName, sstInfo) {

                            console.log(sstName);
                            console.log(sstInfo);


                            var rcInfo = 0, $infoTrs = "" , $infoTds = "";

                            for (ci = 0; ci < sstInfo.length; ci++) {

                                for (var i = 0; i < sstInfo.f11kInfo; i++) {
                                    //var dataValue = ssInfo.f11kInfo[ci] && data[di][dataColumns[ci]] : null;
                                    //dataValue = dataValue
                                    //    ? (('' + dataValue).indexOf('/') !== -1 || dataValue === parseInt(dataValue, 10)
                                    //        ? dataValue
                                    //        : Math.round(dataValue * 100) / 100)
                                    //    : "";

                                    $infoTds += "<td style='{$td_style}'>" + dataValue+"</td>";
                                }

                                ++rcInfo;

                                if ($infoTrs) {
                                    $infoTrs += "<tr>";
                                }

                                //$infoTrs += "<td style='text-align:left;'><strong style='min-width:120px; display:inline-block;'>$sub_sub_cat_title</strong></td>";
                                $infoTrs += $infoTds;
                                $infoTrs += '</tr>';
                            }


                            if ($sstTrs) {
                                $sstTrs += "<tr rowspan='" + rcInfo + "'>";
                            }

                            $sstTrs += "<td style='text-align:left;'><strong style='min-width:120px; display:inline-block;'>$sub_sub_cat_title</strong></td>";
                            $sstTrs += $infoTds;
                            $sstTrs += '</tr>';

                        });

                        var $rowSpan = $sub_sub_row_count + 1;

                        if ($sndTrs) {
                            $sndTrs += "<tr>";
                        }

                        $sndTrs += "<td rowspan='{$rowSpan}' class='td_header'><span style='min-width:{$tdHeadMinWidth}; display:inline-block;'>$sub_cat_title</span></td>";
                        $sndTrs += $sstTrs;

                        $all_sub_rowspan += $rowSpan;

                            //tbody$.append(dataRow$);

                    });

                });


            });


             *
             */
            //grpName = headerGroups.forEach(function (groupNam, groupFields) {
            //    if (Object.keys(groupFields).includes("f11kInfo.name")) return groupNam;
            //    });


            //** Table Body **//
            var ci = 0;
            for (var di = 0; di < data.length; di++) {
                var dataRow$ = $("<tr/>");
                if (di % 2 == 1)
                    dataRow$.attr({ "class": "alt" });

                //dataRow$
                //    .append($("<td/>")
                //        .attr({ "style": "text-align:right; font-weight:600;" })
                //        .html((di + 1) + '.'));

                for (ci = 0; ci < basicColumns.length; ci++) {
                    var basicValue = basicColumns[ci] && data[di][basicColumns[ci]] ? data[di][basicColumns[ci]] : "";
                    dataRow$.append($("<td/>").attr({ "style": "text-align:left;" }).html(basicValue));
                }

                for (ci = 0; ci < dataColumns.length; ci++) {

                    //var dataValue = dataColumns[ci] && data[di][dataColumns[ci]] ? data[di][dataColumns[ci]] : "";
                    //dataValue = Math.round(dataValue * 100) / 100;

                    //console.log(dataColumns[ci]);
                    //console.log(data[di][dataColumns[ci]]);
                    //console.log();

                    if (dataColumns[ci] && dataColumns[ci].indexOf('.') > 0) {

                        var groupName = dataColumns[ci].split('.')[0];
                        var dataValues = data[di][groupName]
                            ? data[di][groupName]
                            : null;

                        if (dataValues != null) {
                            if (groupName.indexOf("groupInTable") === 0) {
                                dataRow$.append($("<td/>").attr({ "style": "text-align:right;" }).html(dataValue));
                                for (ri = 0; ri < dataValues.length; ri++) {
                                }
                            } else {

                            }
                        }

                        //console.log(dataColumns[ci].split('.')[0]);
                        //console.log(dataValues);
                        //console.log(dataColumns[ci].split('.')[1]);
                        //console.log(dataValues[dataColumns[ci].split('.')[1]]?dataValues[dataColumns[ci].split('.')[1]]:null);

                        var dataValue = dataValues != null && dataValues[dataColumns[ci].split('.')[1]]
                            ? dataValues[dataColumns[ci].split('.')[1]]
                            : null;

                        //console.log(dataValue);

                        dataValue = dataValue
                            ? (('' + dataValue).indexOf('/') !== -1 || dataValue === parseInt(dataValue, 10)
                                ? dataValue
                                : Math.round(dataValue * 100) / 100)
                            : "";
                        dataRow$.append($("<td/>").attr({ "style": "text-align:right;" }).html(dataValue));

                    } else {
                        var dataValue = dataColumns[ci] && data[di][dataColumns[ci]] ? data[di][dataColumns[ci]] : null;
                        dataValue = dataValue
                            ? (('' + dataValue).indexOf('/') !== -1 || dataValue === parseInt(dataValue, 10)
                                ? dataValue
                                : Math.round(dataValue * 100) / 100)
                            : "";
                        dataRow$.append($("<td/>").attr({ "style": "text-align:right;" }).html(dataValue));
                    }


                }
                tbody$.append(dataRow$);
            }
            $(selector).append(tbody$);
            //** Table Body End **//


            ////** Table Footer/Total **//
            //totalRow$.attr({ "class": "total", "style": "font-weight:bold;" });
            //totalRow$.append(
            //    $("<td/>")
            //    .attr({ "colSpan": basicColumns.length + 1, "style": "text-align:right;" })
            //    .html("Total:")
            //);
            //for (ci = 0; ci < dataColumns.length; ci++) {
            //    var totalValue = "",
            //        colName = dataColumns[ci];

            //    if (colName) {
            //        if (colName.toLocaleLowerCase().indexOf("max") !== -1) {
            //            totalValue = data.reduce((max, num) =>
            //                num[colName] && (max == null || max < num[colName]) ? num[colName] : max,
            //                null);
            //        } else if (colName.toLocaleLowerCase().indexOf("min") !== -1) {
            //            totalValue = data.reduce((min, num) =>
            //                num[colName] && (min == null || min > num[colName]) ? num[colName] : min,
            //                null);
            //        } else if (colName.toLocaleLowerCase().indexOf("capacity") !== -1) {
            //            totalValue = data.reduce((total, num) =>
            //                total && num[colName] && num[colName].split('/').length > 1
            //                //? Math.round((1 * total.split('/')[0] + 1 * num[colName].split('/')[0]), 2) +
            //                ? (1 * total.split('/')[0] + 1 * num[colName].split('/')[0]).toFixed(2) +
            //                '/' +
            //                //Math.round((1 * total.split('/')[1] + 1 * num[colName].split('/')[1]), 2)
            //                (1 * total.split('/')[1] + 1 * num[colName].split('/')[1]).toFixed(2)
            //                : num[colName],
            //                0);
            //        } else {
            //            totalValue = data.reduce((total, num) => total + (num[colName] || 0), 0);
            //        }
            //    }

            //    //totalValue = totalValue ? Math.round(totalValue * 100) / 100 : "";
            //    //totalValue = totalValue ? (totalValue === parseInt(totalValue, 10) ? totalValue : Math.round(totalValue * 100) / 100) : "";
            //    totalValue = totalValue
            //        ? (('' + totalValue).indexOf('/') !== -1 || totalValue === parseInt(totalValue, 10) ? totalValue : (1 * totalValue).toFixed(2))
            //        : "";
            //    totalRow$.append($("<td/>").attr({ "style": "text-align:right;" }).html(totalValue));
            //}
            //$(selector).append($("<tfoot/>").append(totalRow$));
            ////** Table Footer/Total End **//


            //console.log(basicColumns);
            //console.log(basicColumns.reduce(function(il, el, i) {
            //        il.push(i + 1);
            //        return il;
            //    },
            //    []));
            //** Set/Re-set RowSpan **//
            
            //** Set/Re-set Table Sorter End **//
            $(selector)
                .tablesorter({
                    usNumberFormat: true,
                    theme: 'blue',
                    widgets: ['zebra', 'columns'],
                    //widgetZebra: { css: ["normal-row", "alt-row"] },
                    //widgetOptions: {
                    //    zebra: ['even', 'odd']  // zebra widget alternating row class names
                    //},
                    //sortList: [], //[[0, 0], [1, 0]],
                    //sortReset: true,
                    //sortRestart: true,
                })
                .trigger("updateAll")
                .trigger("sortReset");
            //** Set/Re-set Table Sorter End **//
        }


        function init_chart_data(headers, chartColumns, rawData) {

            $("#chartBar").empty();
            $("#chartPie").empty();
            $("#PieChartOptions").empty();

            if (!chartColumns || !rawData || chartColumns.length < 1 || rawData.length < 1) {
                $("#chartAll").css('display', 'none');
                return;
            }
            $("#chartAll").css('display', '');


            var chartTitle = rptName + ' Report',
                chartSubTitle = 'Source: bpdb_app.com',
                chartCategories = [],
                chartDataBar = [],
                barYAxises = [],
                barData = [],
                pieData = [],
                yAxisIndex = [],
                barYAxisLeft = false,
                ci = 0;

            for (ci = 0; ci < chartColumns.length; ci++) {
                barData[chartColumns[ci]] = [];
                pieData[chartColumns[ci]] = [];
            }

            for (var di = 0; di < rawData.length; di++) {
                chartCategories.push(rawData[di]["substationName"]);

                for (ci = 0; ci < chartColumns.length; ci++) {
                    var cellValue = rawData[di][chartColumns[ci]];
                    if (!cellValue || cellValue == null) {
                        cellValue = 0;
                    } else if (chartColumns[ci].toLocaleLowerCase().indexOf("capacity") !== -1) {
                        cellValue = cellValue.split('/')[0];
                    }

                    cellValue = 1 * cellValue;

                    barData[chartColumns[ci]].push(cellValue);

                    pieData[chartColumns[ci]].push({
                        name: rawData[di]["substationName"],
                        y: cellValue
                    });
                }
            }

            chartDataPie = [];
            $("#PieChartOptions").empty();

            for (ci = 0; ci < chartColumns.length; ci++) {

                var dataName = headers[[chartColumns[ci]]],
                    colData = {
                        name: dataName,
                        data: barData[chartColumns[ci]],
                        type: 'column'
                    },
                    pisData = {
                        title: dataName,
                        series: [
                            {
                                name: dataName,
                                colorByPoint: true,
                                data: pieData[chartColumns[ci]]
                            }
                        ],
                    };

                $("<option />").val(ci).html(dataName)
                    .appendTo($("#PieChartOptions"));


                if (chartColumns[ci].toLocaleLowerCase().indexOf("length") !== -1) {
                    if (yAxisIndex[1] == undefined) {
                        yAxisIndex[1] = yAxisIndex[0] == undefined
                            ? (yAxisIndex[2] == undefined ? 0 : 1)
                            : (yAxisIndex[2] == undefined ? 1 : 2);

                        barYAxises.push({ // Secondary yAxis
                            gridLineWidth: 1,
                            title: {
                                text: 'Length',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            labels: {
                                format: '{value:,.0f} (Km)',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            opposite: barYAxisLeft
                        });

                        barYAxisLeft = true;
                    }

                    colData.yAxis = yAxisIndex[1];
                    colData.tooltip = {
                        headerFormat:
                            '<span style="width:100%; text-align:center; font-size:13px; font-weight:600; color:#15a;">{point.key}</span><table>',
                        pointFormat:
                            '<tr><td><span style="display:block; width:10px; height:10px; border-radius:10px; background-color:{series.color}"></span></td>' +
                                '<td style="color:{series.color}">{series.name}: </td>' +
                                '<td style="padding-left:8px; text-align:right"><b>{point.y:,.0f}</b></td><td>(Km)</td></tr>',
                        footerFormat: '</table>',
                        valueSuffix: ' (Km)'
                    }

                    pisData.pointFormat =
                        '<span style="color:{point.color}">{series.name}</span>: {point.y:,.0f}Km (<b>{point.percentage:.2f}%</b>)';
                    pisData.plotFormat = '{point.name}: {point.y:,.0f}Km (<b>{point.percentage:.1f}%</b>)';

                } else if (chartColumns[ci].toLocaleLowerCase().indexOf("capacity") !== -1) {
                    if (yAxisIndex[1] == undefined) {
                        yAxisIndex[1] = yAxisIndex[0] == undefined
                            ? (yAxisIndex[2] == undefined ? 0 : 1)
                            : (yAxisIndex[2] == undefined ? 1 : 2);

                        barYAxises.push({ // Secondary yAxis
                            gridLineWidth: 1,
                            title: {
                                text: 'Capacity',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            labels: {
                                format: '{value:,.1f} (MVA)',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            opposite: barYAxisLeft
                        });

                        barYAxisLeft = true;
                    }

                    colData.yAxis = yAxisIndex[1];
                    colData.tooltip = {
                        headerFormat:
                            '<span style="width:100%; text-align:center; font-size:13px; font-weight:600; color:#15a;">{point.key}</span><table>',
                        pointFormat:
                            '<tr><td><span style="display:block; width:10px; height:10px; border-radius:10px; background-color:{series.color}"></span></td>' +
                                '<td style="color:{series.color}">{series.name}: </td>' +
                                '<td style="padding-left:8px; text-align:right"><b>{point.y:,.1f}</b></td><td>(MVA)</td></tr>',
                        footerFormat: '</table>',
                        valueSuffix: ' (MVA)'
                    }

                    pisData.pointFormat =
                        '<span style="color:{point.color}">{series.name}</span>: {point.y:,.1f}MVA (<b>{point.percentage:.2f}%</b>)';
                    pisData.plotFormat = '{point.name}: {point.y:,.1f}MVA (<b>{point.percentage:.1f}%</b>)';

                } else if (chartColumns[ci].toLocaleLowerCase().indexOf("demand") !== -1 ||
                    chartColumns[ci].toLocaleLowerCase().indexOf("load") !== -1) {

                    if (yAxisIndex[2] == undefined) {
                        yAxisIndex[2] = yAxisIndex[0] == undefined
                            ? (yAxisIndex[1] == undefined ? 0 : 1)
                            : (yAxisIndex[1] == undefined ? 1 : 2);

                        barYAxises.push({ // Tertiary yAxis
                            gridLineWidth: 1,
                            title: {
                                text: 'Demand / Load',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            labels: {
                                format: '{value:,.1f} (MW)',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            opposite: barYAxisLeft
                        });

                        barYAxisLeft = true;
                    }

                    colData.yAxis = yAxisIndex[2];
                    colData.tooltip = {
                        headerFormat:
                            '<span style="width:100%; text-align:center; font-size:13px; font-weight:600; color:#15a;">{point.key}</span><table>',
                        pointFormat:
                            '<tr><td><span style="display:block; width:10px; height:10px; border-radius:10px; background-color:{series.color}"></span></td>' +
                                '<td style="color:{series.color}">{series.name}: </td>' +
                                '<td style="padding-left:8px; text-align:right"><b>{point.y:,.1f}</b></td><td>(MW)</td></tr>',
                        footerFormat: '</table>',
                        valueSuffix: ' (MW)'
                    }

                    pisData.pointFormat =
                        '<span style="color:{point.color}">{series.name}</span>: {point.y:,.1f}MW (<b>{point.percentage:.2f}%</b>)';
                    pisData.plotFormat = '{point.name}: {point.y:,.1f}MW (<b>{point.percentage:.1f}%</b>)';
                } else {
                    if (yAxisIndex[0] == undefined) {
                        yAxisIndex[0] = yAxisIndex[1] == undefined
                            ? (yAxisIndex[2] == undefined ? 0 : 1)
                            : (yAxisIndex[2] == undefined ? 1 : 2);

                        barYAxises.push({ // Primary yAxis
                            gridLineWidth: 1,
                            title: {
                                text: 'Unit Count',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            labels: {
                                format: '{value:,.0f}',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            opposite: barYAxisLeft
                        });

                        barYAxisLeft = true;
                    }

                    colData.yAxis = yAxisIndex[0];
                    colData.tooltip = {
                        headerFormat:
                            '<span style="width:100%; text-align:center; font-size:13px; font-weight:600; color:#15a;">{point.key}</span><table>',
                        pointFormat:
                            '<tr><td><span style="display:block; width:10px; height:10px; border-radius:10px; background-color:{series.color}"></span></td>' +
                                '<td style="color:{series.color}">{series.name}: </td>' +
                                '<td style="padding-left:8px; text-align:right"><b>{point.y:,.0f}</b></td><td></td></tr>',
                        footerFormat: '</table>',
                        valueSuffix: ''
                    }

                    pisData.pointFormat =
                        '<span style="color:{point.color}">{series.name}</span>: {point.y:,.0f} (<b>{point.percentage:.2f}%</b>)';
                    pisData.plotFormat = '{point.name}: {point.y:,.0f} (<b>{point.percentage:.1f}%)</b>';
                }

                chartDataBar.push(colData);
                chartDataPie.push(pisData);
            }

            //[ "#F7464A", "#45BFBD", "#FDB45C", "#FEDCBA","#ABCDEF", "#DDDDDD", "#ABCABC"  ]
            Highcharts.setOptions({
                colors: [
                    '#50B534', '#F04A3D', '#8085E8', '#DDDF00', '#0C9BCE', '#70ED5D', "#ED454A", '#7CB5EC', "#FDB35C",
                    "#45BFBD", '#ED562B', '#24CBE5', '#63E573', '#F29855', '#F0ED5E', '#6AF9C5', "#FEDCBA", "#ABCDEF",
                    "#DDDDEE", "#ABCABC"
                ]
            });

            generate_bar_chart(chartTitle, chartSubTitle, chartCategories, barYAxises, chartDataBar);
            generate_pie_chart(chartTitle, chartSubTitle, chartDataPie[0]);

            return;
        }

        function generate_bar_chart(chartTitle, chartSubTitle, chartCategories, barYAxises, chartDataSeries) {

            Highcharts.chart('chartBar',
                {
                    chart: {
                        zoomType: 'xy'
                    },
                    title: {
                        text: chartTitle,
                        align: 'center'
                    },
                    subtitle: {
                        text: chartSubTitle,
                        align: 'center'
                    },
                    credits: {
                        enabled: false
                    },
                    tooltip: {
                        shared: true,
                        useHTML: true,
                        headerFormat:
                            '<span style="width:100%; text-align:center; font-size:13px; font-weight:600; color:#15a;">{point.key}</span><br/>',
                    },
                    xAxis: [
                        {
                            categories: chartCategories,
                            crosshair: true,
                        }
                    ],
                    yAxis: barYAxises,
                    series: chartDataSeries,
                    responsive: {
                        rules: [
                            {
                                condition: {
                                    maxWidth: 500
                                },
                                chartOptions: {
                                    legend: {
                                        floating: false,
                                        layout: 'horizontal',
                                        align: 'center',
                                        verticalAlign: 'bottom',
                                        x: 0,
                                        y: 0
                                    }
                                }
                            }
                        ]
                    },
                    exporting: {
                        enabled: true,
                        buttons: {
                            contextButton: {
                                menuItems: [
                                    'viewFullscreen', 'printChart', {
                                        separator: true
                                    }, 'downloadPNG', 'downloadJPEG', {
                                        separator: true
                                    }, 'downloadPDF', 'downloadSVG', {
                                        separator: true
                                    }, 'downloadCSV', 'downloadXLS', {
                                        textKey: 'viewData',
                                        onclick: function() {
                                            this.viewData();

                                            //** Set/Re-set Table Sorter End **//
                                            $("table[id^='highcharts-data']")
                                                .tablesorter({
                                                    usNumberFormat: true,
                                                    theme: 'blue',
                                                    widgets: ['zebra', 'columns'],
                                                    sortList: [[0, 0]],
                                                })
                                                .trigger("updateAll")
                                                .trigger("sortReset");
                                            //** Set/Re-set Table Sorter End **//
                                        }
                                    }
                                ]
                            }
                        }
                    }

                });

            return;
        }

        function generate_pie_chart(chartTitle, chartSubTitle, chartData) {

            Highcharts.chart('chartPie',
                {
                    chart: {
                        plotBackgroundColor: null,
                        plotBorderWidth: null,
                        plotShadow: false,
                        type: 'pie'
                    },
                    title: {
                        text: chartTitle,
                        align: 'center'
                    },
                    subtitle: {
                        text: chartData.title + "<br/>" + chartSubTitle,
                        align: 'center'
                    },
                    credits: {
                        enabled: false
                    },
                    tooltip: {
                        shared: true,
                        headerFormat:
                            '<span style="color:#15a; font-size:13px; font-weight:600;">{point.key}</span><br>',
                        pointFormat: chartData.pointFormat
                    },
                    plotOptions: {
                        pie: {
                            showInLegend: true,
                            dataLabels: {
                                enabled: true,
                                format: chartData.plotFormat,
                                //distance: -50,
                                style: {
                                    color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                                }
                            }
                        }
                    },
                    series: chartData.series,
                    responsive: {
                        rules: [
                            {
                                condition: {
                                    maxWidth: 500
                                },
                                chartOptions: {
                                    legend: {
                                        floating: false,
                                        layout: 'horizontal',
                                        align: 'center',
                                        verticalAlign: 'bottom',
                                        x: 0,
                                        y: 0
                                    }
                                }
                            }
                        ]
                    },
                    exporting: {
                        enabled: true,
                        buttons: {
                            contextButton: {
                                menuItems: [
                                    'viewFullscreen', 'printChart', {
                                        separator: true
                                    }, 'downloadPNG', 'downloadJPEG', {
                                        separator: true
                                    }, 'downloadPDF', 'downloadSVG', {
                                        separator: true
                                    }, 'downloadCSV', 'downloadXLS', {
                                        textKey: 'viewData',
                                        onclick: function() {
                                            this.viewData();

                                            //** Set/Re-set Table Sorter End **//
                                            $("table[id^='highcharts-data']")
                                                .tablesorter({
                                                    usNumberFormat: true,
                                                    theme: 'blue',
                                                    widgets: ['zebra', 'columns'],
                                                    sortList: [[0, 0]],
                                                })
                                                .trigger("updateAll")
                                                .trigger("sortReset");
                                            //** Set/Re-set Table Sorter End **//
                                        }
                                    }
                                ]
                            }
                        },
                    }
                });

            return;
        }


        $("#PieChartOptions").on("change",
            function() {

                var chartTitle = rptName + ' Report',
                    chartSubTitle = 'Source: bpdb_app.com',
                    pieIndex = $(this).val();

                if (chartDataPie && chartDataPie[pieIndex]) {
                    generate_pie_chart(chartTitle, chartSubTitle, chartDataPie[pieIndex]);
                } else {
                    generate_pie_chart('',
                        '',
                        {
                            title: '',
                            series: [
                                {
                                    name: '',
                                    colorByPoint: true,
                                    data: null
                                }
                            ],
                            pointFormat: '',
                            plotFormat: '',
                        });
                }

                return false;
            });


        $("#ZoneCode").on("change",
            function() {
                var zoneCode = $("#ZoneCode").val(),
                    $circle = $("#CircleCode");

                $circle.empty();
                $("#SnDCode").empty();
                $("#SubstationId").empty();
                $("#RouteCode").empty();

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetCircleList", "LookUpCircleInfoes")',
                    dataType: "json",
                    data: { zoneCode: zoneCode },
                    before: $("#busy-indicator").fadeIn(150),
                    success: function(circles) {
                        $circle.append(
                            '<option value="" selected="selected">----- all circle -----</option>');
                        $.each(circles,
                            function(i, circle) {
                                $("<option />").val(circle.value).html(circle.text)
                                    .appendTo($circle);
                            });
                    },
                    error: function(ex, status, error) {
                        msg.init("error",
                            "Error... . . !",
                            "Failed to load Circle list. " + ex.responseText);
                    },
                    complete: $("#busy-indicator").fadeOut(150)
                });
                return false;
            });

        $("#CircleCode").on("change",
            function() {
                var circleCode = $("#CircleCode").val(),
                    $snd = $("#SnDCode");

                $snd.empty();
                $("#SubstationId").empty();
                $("#RouteCode").empty();

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetSnDList", "LookUpSnDInfoes")",
                    dataType: "json",
                    data: { circleCode: circleCode },
                    before: $("#busy-indicator").fadeIn(150),
                    success: function(snds) {
                        $snd.append(
                            '<option value="" selected="selected">----- all SnD -----</option>');
                        $.each(snds,
                            function(i, snd) {
                                $("<option />").val(snd.value).html(snd.text).appendTo($snd);
                            });
                    },
                    error: function(ex, status, error) {
                        msg.init("error",
                            "Error... . . !",
                            "Failed to load SnD list. " + ex.responseText);
                    },
                    complete: $("#busy-indicator").fadeOut(150)
                });
                return false;
            });

        $("#SnDCode").on("change",
            function() {
                var sndCode = $("#SnDCode").val(),
                    $substation = $("#SubstationId");

                $substation.empty();
                $("#RouteCode").empty();

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetSubStationList", "LookUpZoneInfoes")",
                    dataType: "json",
                    data: { sndCode: sndCode },
                    before: $("#busy-indicator").fadeIn(150),
                    success: function(substations) {
                        $substation.append(
                            '<option value="" selected="selected">----- all sub-station -----</option>');
                        $.each(substations,
                            function(i, substation) {
                                $("<option />").val(substation.value).html(substation.text)
                                    .appendTo($substation);
                            });
                    },
                    error: function(ex, status, error) {
                        msg.init("error",
                            "Error... . . !",
                            "Failed to load Sub-Station list. " + ex.responseText);
                    },
                    complete: $("#busy-indicator").fadeOut(150)
                });
                return false;
            });


        @*$("#SubstationId").on("change",
            function() {
                var substationId = $("#SubstationId").val(),
                    $route = $("#RouteCode");

                $route.empty();

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetRouteList", "LookUpRouteInfoes")",
                    dataType: "json",
                    data: { substationId: substationId },
                    before: $("#busy-indicator").fadeIn(150),
                    success: function(routes) {
                        $route.append(
                            '<option value="" selected="selected">----- all route -----</option>');
                        $.each(routes,
                            function(i, route) {
                                $("<option />").val(route.value).html(route.text).appendTo($route);
                            });
                    },
                    error: function(ex, status, error) {
                        msg.init("error", "Error... . . !", "Failed to load Route list. " + ex.responseText);
                    },
                    complete: $("#busy-indicator").fadeOut(150)
                });
                return false;
            });*@


/*

        $('span.multi-item').on('click',
            function (e) {
                e.preventDefault();
                e.stopPropagation();

                if ($(this).hasClass('active')) {
                    $(this).closest("li").find("ul").slideUp(250);
                    $(this).removeClass('active');
                } else {
                    $(this).closest("li").find("ul").slideDown(250);
                    $(this).addClass('active');
                }
                return false;
            });


        function OpenCloseAll(obj, opt) {
            if ($(obj).closest("fieldset").find("ul ul[id^='field_list_']")) {
                if (opt) {
                    $(obj).closest("fieldset").find("ul ul[id^='field_list_']").slideDown(250);
                    $(obj).closest("fieldset").find("ul ul[id^='field_list_']")
                        .closest("li").find("span.multi-item").addClass('active');
                } else {
                    $(obj).closest("fieldset").find("ul ul[id^='field_list_']").slideUp(250);
                    $(obj).closest("fieldset").find("ul ul[id^='field_list_']")
                        .closest("li").find("span.multi-item").removeClass('active');
                }
            }
            return false;
        }

        function CheckAllMultiCheckBox(obj) {
            $(obj).closest("fieldset").find("input[type='checkbox'].multi-checkbox")
                .prop("indeterminate", false)
                .prop("checked", $(obj).prop("checked"));

            if ($(obj).closest("fieldset").find("ul ul[id^='field_list_']")) {
                if ($(obj).prop("checked")) {
                    $(obj).closest("fieldset").find("ul ul[id^='field_list_']").slideDown(250);
                    $(obj).closest("fieldset").find("ul ul[id^='field_list_']")
                        .closest("li").find("span.multi-item").addClass('active');
                } else {
                    $(obj).closest("fieldset").find("ul ul[id^='field_list_']").slideUp(250);
                    $(obj).closest("fieldset").find("ul ul[id^='field_list_']")
                        .closest("li").find("span.multi-item").removeClass('active');
                }
            }
        }

        function CheckMultiCheckBox(obj) {
            var optChecked = null,
                objChecked = $(obj).prop("checked"),
                $chkbParent = $(obj).closest("fieldset"),
                noOfCheckBoxes = $chkbParent.find("input[type='checkbox'].multi-checkbox").length;

            //// for Sub-CheckBoxes ///////
            var chkbName = $(obj).attr("data-field-name"),
                chkbGroup = $(obj).attr("data-field-group");

            if (chkbName.indexOf("group") == 0 && chkbGroup == "" && $chkbParent.find("ul[id$='" + chkbName + "']")) {
                var $chkbGropuParentUl = $chkbParent.find("ul[id$='" + chkbName + "']");

                if (objChecked) {
                    $chkbGropuParentUl.slideDown(250);
                    $chkbGropuParentUl.closest("li").find("span.multi-item").addClass('active');

                    $chkbGropuParentUl.find("input[type='checkbox'].multi-checkbox").prop("checked", true);
                } else {
                    $chkbGropuParentUl.slideUp(250);
                    $chkbGropuParentUl.closest("li").find("span.multi-item").removeClass('active');

                    $chkbGropuParentUl.find("input[type='checkbox'].multi-checkbox").prop("checked", false);
                }
            } else if (chkbGroup && chkbGroup != "" && $(obj).closest("ul[id$='" + chkbGroup + "']")) {

                var $chkbGropuUl = $(obj).closest("ul[id$='" + chkbGroup + "']"),
                    noOfCheckBoxesUl = $chkbGropuUl.find("input[type='checkbox'].multi-checkbox").length;

                optChecked = null;
                if (objChecked) {
                    var noOfCheckedBoxesUl = $chkbGropuUl.find("input[type='checkbox']:checked.multi-checkbox").length;
                    if (noOfCheckedBoxesUl === 0) {
                        optChecked = false;
                    }
                    if (noOfCheckedBoxesUl === noOfCheckBoxesUl) {
                        optChecked = true;
                    }
                } else {
                    var noOfUnCheckedBoxesUl =
                        $chkbGropuUl.find("input[type='checkbox'].multi-checkbox:not(:checked)").length;

                    if (noOfUnCheckedBoxesUl === 0) {
                        optChecked = true;
                    }
                    if (noOfUnCheckedBoxesUl === noOfCheckBoxesUl) {
                        optChecked = false;
                    }
                }

                $chkbParent.find("input[type='checkbox'][data-field-name='" + chkbGroup + "']")
                    .prop("indeterminate", optChecked === null)
                    .prop("checked", optChecked);

                if (optChecked === false) {
                    $chkbGropuUl.slideUp(250);
                    $chkbGropuUl.closest("li").find("span.multi-item").removeClass('active');
                } else {
                    $chkbGropuUl.slideDown(250);
                    $chkbGropuUl.closest("li").find("span.multi-item").addClass('active');
                }
            }
            //// end Sub-CheckBoxes ///////


            optChecked = null;
            if (objChecked) {
                var noOfCheckedBoxes = $chkbParent
                    .find("input[type='checkbox']:checked.multi-checkbox").length;
                if (noOfCheckedBoxes === 0) {
                    optChecked = false;
                }
                if (noOfCheckedBoxes === noOfCheckBoxes) {
                    optChecked = true;
                }
            } else {
                var noOfUnCheckedBoxes = $chkbParent
                    .find("input[type='checkbox'].multi-checkbox:not(:checked)").length;
                if (noOfUnCheckedBoxes === 0) {
                    optChecked = true;
                }
                if (noOfUnCheckedBoxes === noOfCheckBoxes) {
                    optChecked = false;
                }
            }

            $chkbParent.find("input[type='checkbox'].all-checked")
                .prop("indeterminate", optChecked === null)
                .prop("checked", optChecked);

            return false;
        }

*/

    </script>




    @*<script type="text/javascript">


            function selectTimeSeries(eventId) {
                if (!eventId)
                    return false;

                $.ajax({
                        type: "GET",
                        url: '@Url.Action("SelectTimeSeries", "DataDisseminate")',
                        dataType: "html",
                        data: { id: eventId },
                        before: $("#busy-indicator").fadeIn(150),
                        //success: function(htmlContent) {
                        //    modal.init("Time Series Data Selection.. . .", htmlContent, true, false);
                        //},
                        error: function(ex) {
                            modal.init("Time Series Data Selection.. . .", "...", false, false);
                            msg.init("error", "Error... . . !", "Failed to load Time Series information. " + ex.error);
                        },
                        complete: $("#busy-indicator").fadeOut(150)
                    })
                    .done(function(htmlContent) {
                        modal.init("Time Series Data Selection.. . .", htmlContent, true, false);
                    });

                return false;
            }

            $(function() {

                //$('#selectedDataSourceList').DataTable({
                //    bLengthChange: false,
                //    searching: false,
                //    responsive: true
                //});


                $("input[type='radio'][name='database'], #isTimeSeries").on("change",
                    function() {
                        //dataBase = this.value, dataBase = $(this).val(),
                        var dataBase = $("input[type='radio'][name='database']:checked").val(),
                            isTs = $("#isTimeSeries").prop('checked') == true,
                            $dataGroup = $("#dataGroup"),
                            $dataType = $("#dataType"),
                            $dataSourceList = $("#dataSourceList");


                        $dataGroup.empty();
                        $dataType.empty();
                        $dataSourceList.empty();

                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("GetDataGroupList", "DataGroups")",
                            dataType: "json",
                            data: { dbOpt: dataBase, isTs: isTs },
                            before: $("#busy-indicator").fadeIn(150),
                            success: function(groups) {
                                //$dataGroup.append('<option value="" selected="selected" disabled="disabled">----- Select -----</option>');

                                $.each(groups,
                                    function(i, group) {
                                        $("<option />").val(group.value).html(group.text).appendTo($dataGroup);
                                    });

                                $dataGroup.prop('selectedIndex', 0).trigger("change");

                            },
                            error: function(ex) {
                                window.msg.init("error", "Error... . . !", "Failed to load group list. " + ex.error);
                            },
                            complete: $("#busy-indicator").fadeOut(150)
                        });
                        return false;
                    });


                $("#dataGroup").on("change",
                    function() {
                        var dataBase = $("input[type='radio'][name='database']:checked").val(),
                            isTs = $("#isTimeSeries").prop('checked') == true,
                            groupId = $(this).val(),
                            $dataType = $("#dataType"),
                            $dataSourceList = $("#dataSourceList");

                        $dataType.empty();
                        $dataSourceList.empty();

                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("GetDataTypeList", "DataTypes")",
                            dataType: "json",
                            data: { dataGroupId: groupId, dbOpt: dataBase, isTs: isTs },
                            before: $("#busy-indicator").fadeIn(150),
                            success: function(types) {
                                $dataType.append(
                                    '<option value="" selected="selected" disabled="disabled">----- Select -----</option>');

                                $.each(types,
                                    function(i, type) {
                                        $("<option />").val(type.value).html(type.text).appendTo($dataType);
                                    });
                            },
                            error: function(ex) {
                                window.msg.init("error", "Error... . . !", "Failed to load type list. " + ex.error);
                            },
                            complete: $("#busy-indicator").fadeOut(150)
                        });
                        return false;
                    });


                $("#dataType").on("change",
                    function() {
                        var dataBase = $("input[type='radio'][name='database']:checked").val(),
                            isTs = $("#isTimeSeries").prop('checked') == true,
                            typeId = $(this).val(),
                            $dataSourceList = $("#dataSourceList");

                        $dataSourceList.empty();

                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("GetDataSourceList", "DataSources")",
                            dataType: "json",
                            data: { dataTypeId: typeId, dbOpt: dataBase, isTs: isTs },
                            before: $("#busy-indicator").fadeIn(150),
                            success: function(dataSources) {

                                if (!dataSources || dataSources.length < 1)
                                    return;

                                console.log(dataSources);


                                var groupedSources = dataSources.reduce(function(obj, source) {
                                        obj[source.group] = obj[source.group] || [];
                                        obj[source.group].push({ value: source.value, text: source.text });
                                        return obj;
                                    },
                                    {});

                                Object.keys(groupedSources).map(function(group) {

                                    if (!groupedSources[group] && groupedSources[group].length < 1)
                                        return;


                                    $("<p/>")
                                        .addClass("font-weight-bold font-italic tree")
                                        .css("padding", ".25rem 0 0 0")
                                        .css("font-size", "108%")
                                        //.html("<i class='fas fa-list-ul'></i> " + group)
                                        .html("<i class='fas fa-border-all'></i> " + group)
                                        .appendTo($dataSourceList);


                                    var $dataSourceUl = $("<ul/>")
                                        .addClass("tree")
                                        .css("list-style", "none")
                                        .appendTo($dataSourceList);

                                    $.each(groupedSources[group],
                                        function(i, dataSource) {

                                            var $li = $("<li/>").appendTo($dataSourceUl);

                                            $("<label/>")
                                                .text(dataSource.text)
                                                .addClass("chk-box")
                                                .prop("for", "ds_" + dataSource.value)
                                                .append("<input type='checkbox' class='data-source' id='ds_" +
                                                    dataSource.value +
                                                    "' value='" +
                                                    dataSource.value +
                                                    "'>")
                                                .append("<span class='chk-mark'></span>")
                                                .appendTo($li);
                                        });


                                    //$("<li/>")
                                    //    .addClass("font-weight-bold font-italic")
                                    //    .css("padding", ".25rem 0")
                                    //    .css("font-size", "108%")
                                    //    //.html("<i class='fas fa-list-ul'></i> " + group)
                                    //    .html("<i class='fas fa-border-all'></i> " + group)
                                    //    .appendTo($dataSourceList);

                                    //$.each(groupedSources[group],
                                    //    function(i, dataSource) {

                                    //        var $li = $("<li/>").appendTo($dataSourceList);

                                    //        $("<label/>")
                                    //            .text(dataSource.text)
                                    //            .addClass("chk-box")
                                    //            .prop("for", "ds_" + dataSource.value)
                                    //            .append("<input type='checkbox' class='data-source' id='ds_" +
                                    //                dataSource.value +
                                    //                "' value='" +
                                    //                dataSource.value +
                                    //                "'>")
                                    //            .append("<span class='chk-mark'></span>")
                                    //            .appendTo($li);

                                    //    });
                                });

                                //$.each(dataSources,
                                //    function(i, dataSource) {

                                //        var $li = $("<li/>").appendTo($dataSourceList);

                                //        $("<label/>")
                                //            .text(dataSource.text)
                                //            .addClass("chk-box")
                                //            .prop("for", "ds_" + dataSource.value)
                                //            .append("<input type='checkbox' class='data-source' id='ds_" +
                                //                dataSource.value +
                                //                "' value='" +
                                //                dataSource.value +
                                //                "'>")
                                //            .append("<span class='chk-mark'></span>")
                                //            .appendTo($li);


                                //        //var $lbl = $("<label/>")
                                //        //    .text(dataSource.text)
                                //        //    .addClass("chk-box")
                                //        //    .prop("for", "ds_" + dataSource.value)
                                //        //    .appendTo($li);

                                //        //$("<input/>",
                                //        //        {
                                //        //            type: "checkbox",
                                //        //            id: "ds_" + dataSource.value,
                                //        //            value: dataSource.value
                                //        //        })
                                //        //    .addClass("data-source")
                                //        //    .appendTo($lbl);

                                //        //$("<span></span>")
                                //        //    .addClass("chk-mark")
                                //        //    .appendTo($lbl);


                                //        //$("<input type='checkbox' class='data-source' id='ds_" +
                                //        //    dataSource.value +
                                //        //    "' value='" +
                                //        //    dataSource.value +
                                //        //    "'>")
                                //        //    .appendTo($li);

                                //        //$("<label class='chk-box' for='ds_" + dataSource.value + "'>" + dataSource.text + "</label>")
                                //        //    .appendTo($li);

                                //    });


                                $(".data-source").on("change",
                                    function() {
                                        if (this.checked) {
                                            add_data_source(this);
                                            return false;
                                        } else {
                                            var sourceId = $(this).val(),
                                                $selectedSourceRows = $("#selectedDataSourceList tbody tr");

                                            if (!sourceId || sourceId < 0 || $selectedSourceRows.length < 1)
                                                return false;

                                            $.each($selectedSourceRows,
                                                function(rowIndex, selectedTr) {
                                                    if (selectedTr &&
                                                        $(selectedTr).find("input[type='hidden']").val() == sourceId) {
                                                        remove_data_source(rowIndex);
                                                        return false;
                                                    }
                                                });
                                        }
                                        return false;
                                    });
                            },
                            error: function(ex) {
                                window.msg.init("error", "Error... . . !", "Failed to load type list. " + ex.error);
                            },
                            complete: $("#busy-indicator").fadeOut(150)
                        });
                        return false;
                    });


            });


            function add_data_source(obj) {
                if (!obj.checked)
                    return false;

                var dataBase = $("input[type='radio'][name='database']:checked").val(),
                    sourceId = $(obj).val(),
                    $selectedDataSource = $("#selectedDataSourceList tbody");

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetDataSourceDetails", "DataSources")",
                    dataType: "json",
                    data: { dataSourceId: sourceId, dbOpt: dataBase },
                    before: $("#busy-indicator").fadeIn(150),
                    success: function(sourceDetails) {
                        //console.log(sourceDetails);
                        if (!sourceDetails || sourceDetails.length < 1)
                            return;


                        var srcId = $("#dataGroup").val(),
                            typId = $("#dataType").val(),
                            srcName = $("#dataGroup option:selected").text(),
                            typName = $("#dataType option:selected").text();

                        //if (!$selectedDataSource.find("tr.tr-head.trc_src_typ_" + srcId + "_" + typId).length) {
                        //    $("<tr />")
                        //        .addClass("tr-head trc_src_typ_" + srcId + "_" + typId)
                        //        .html("<th class='span' colspan='7' scope='colgroup'>" +
                        //            "Data Source & Type: " +
                        //            typName +
                        //            ", " +
                        //            srcName +
                        //            "</th>")
                        //        .appendTo($selectedDataSource);
                        //}


                        var quantity = 1,
                            slNo = $selectedDataSource.find("tr:not('.tr-head')").length,
                            $tr = $("<tr />").appendTo($selectedDataSource);

                        //$tr.addClass(slNo % 2 == 0 ? "add" : "even");
                        //$tr.addClass("trc_src_typ_" + srcId + "_" + typId + (slNo % 2 == 0 ? " add" : " even"));

                        $tr.addClass("trc_src_typ_" + srcId + "_" + typId);
                        $tr.addClass(slNo % 2 == 0 ? "add" : "even");

                        $("<td>")
                            .addClass("text-right")
                            .html("<span class='sl-no'>" +
                                (slNo + 1) +
                                ".</span>" +
                                "<input type='hidden' id='data_source_id' name='selectedDataSources[" +
                                slNo +
                                "].DataSourceId' value='" +
                                sourceDetails.sourceId +
                                "'>")
                            .appendTo($tr);

                        $("<td>").appendTo($tr)
                            .addClass("text-left")
                            .html((sourceDetails.sourceName ? sourceDetails.sourceName : "") +
                                "<input type='hidden' id='data_source_name' name='selectedDataSources[" +
                                slNo +
                                "].DataSourceName' value='" +
                                sourceDetails.sourceName +
                                "'>")
                            .appendTo($tr);

                        $("<td>").appendTo($tr)
                            .addClass("text-right")
                            .html((sourceDetails.rate ? sourceDetails.rate : "") +
                                "<input type='hidden' id='rate' name='selectedDataSources[" +
                                slNo +
                                "].Rate' value='" +
                                sourceDetails.rate +
                                "'>")
                            .appendTo($tr);

                        $("<td>")
                            .addClass("text-left")
                            .html((sourceDetails.unit ? sourceDetails.unit : "") +
                                "<input type='hidden' id='unit' name='selectedDataSources[" +
                                slNo +
                                "].Unit' value='" +
                                sourceDetails.unit +
                                "'>")
                            .appendTo($tr);

                        $("<td>")
                            .addClass("text-right")
                            .html(quantity +
                                "<input type='hidden' id='quantity' name='selectedDataSources[" +
                                slNo +
                                "].Quantity' value='" +
                                quantity +
                                "'>")
                            .appendTo($tr);

                        $("<td>")
                            .addClass("text-right")
                            .html((sourceDetails.rate ? (sourceDetails.rate * quantity) : "") +
                                "<input type='hidden' id='amount' name='selectedDataSources[" +
                                slNo +
                                "].Amount' value='" +
                                (sourceDetails.rate ? (sourceDetails.rate * quantity) : "0") +
                                "'>")
                            .appendTo($tr);

                        $("<td>")
                            .append(
                                $("<button/>",
                                    {
                                        //type: "button",
                                        html: "",
                                        text: "",
                                        //id: 'btnDelete',
                                        click: function() {
                                            if (confirm('Are you sure to delete ?')) {
                                                remove_data_source($(this).closest("tr").index());
                                            }
                                            return false;
                                        }
                                    })
                                .addClass("btn btn-danger")
                                .append("<div><i class='fa fa-times fa-1x25'></i></div>")
                            )
                            .appendTo($tr);


                        ////<button class="btn"><i class="fa fa-trash"></i></button>
                        //$("<a/>",
                        //        {
                        //            //type: "button",
                        //            //html: "",
                        //            //text: "<i class='fa fa-trash'></i>",
                        //            //id: 'btnDelete',
                        //            click: function() {
                        //                if (confirm('Are you sure to delete ?')) {
                        //                    remove_data_source($(this).closest("tr").index());
                        //                }
                        //                return false;
                        //            }
                        //        })
                        //    .addClass("btn btn-danger btn-icon")
                        //    .append("<div><i class='fa fa-times fa-1x25'></i></div>")
                        //    //.append("<i class='icon ion-close'></i>")
                        //    .appendTo($td);

                        set_data_source_total();

                    },
                    error: function(ex) {
                        window.msg.init("error", "Error... . . !", "Failed to load source details. " + ex.error);
                    },
                    complete: $("#busy-indicator").fadeOut(150)
                });

                return false;
            }


            function remove_data_source(rowIndex) {

                if ((!rowIndex && rowIndex != 0) ||
                    $("#selectedDataSourceList tbody").find("tr").length < 1 ||
                    $("#selectedDataSourceList tbody").find("tr").length < rowIndex)
                    return false;

                var $selectedDataSource = $("#selectedDataSourceList tbody"),
                    $selectedRow = $selectedDataSource.find('tr').eq(rowIndex);

                $("#dataSourceList")
                    .find("input[type='checkbox']#ds_" + $selectedRow.find("input[type='hidden']").val())
                    .prop("checked", false);

                $selectedRow.empty();
                $selectedRow.remove();

                if ($selectedDataSource.find('tr').length >= rowIndex) {
                    for (; rowIndex < $selectedDataSource.find('tr').length; ++rowIndex) {
                        $selectedDataSource.find('tr').eq(rowIndex).find("span.sl-no").html(rowIndex + 1);

                        $selectedDataSource.find('tr').eq(rowIndex).find("input[type='hidden']")
                            .prop("name", "selectedDataSources[" + rowIndex + "].DataSourceId");
                    }
                }

                set_data_source_total();

                return false;
            }


            function set_data_source_total() {

                $("#selectedDataSourceList tfoot").empty();

                if ($("#selectedDataSourceList tbody").find("tr:not('.tr-head')").length < 1) {
                    return false;
                }

                if (!$("#selectedDataSourceList tfoot")) {
                    $("<tfoot />").appendTo($("#selectedDataSourceList"));
                }

                var totalQuantity = 0,
                    totalAmount = 0,
                    $tr = $("<tr />").appendTo($("#selectedDataSourceList tfoot")),
                    $dataSourceRows = $("#selectedDataSourceList tbody").find("tr:not('.tr-head')");

                $.each($dataSourceRows,
                    function(ri, dataTr) {
                        if (dataTr) {
                            totalQuantity += $(dataTr).find("input[type='hidden']#quantity").val() * 1;
                            totalAmount += $(dataTr).find("input[type='hidden']#amount").val() * 1;
                        }
                    });

                $tr.addClass("font-bold font-weight-bold");

                $("<th>")
                    .addClass("text-right")
                    .prop("colSpan", 4)
                    .html("Total:")
                    .appendTo($tr);

                $("<th>").appendTo($tr)
                    .addClass("text-right")
                    .html(totalQuantity)
                    .appendTo($tr);

                $("<th>").appendTo($tr)
                    .addClass("text-right")
                    .html(totalAmount)
                    .appendTo($tr);


                $("<th>")
                    .appendTo($tr);

                return false;
            }


        </script>*@


}
