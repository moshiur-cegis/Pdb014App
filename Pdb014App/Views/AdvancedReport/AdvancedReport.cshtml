@using Pdb014App.Models.Report

@{
    string rptName = ViewBag.ReportName, rptAction = ViewBag.ReportAction, rptController = ViewBag.ReportController;

    ViewData["Title"] = rptName + "Report";
    Layout = "~/Views/Shared/_Layout.cshtml";


    var regionLevel = ViewBag.RegionLevel as string;

    var regionInfo = ViewBag.RegionInfo != null
        ? ViewBag.RegionInfo as List<ReportField>
        : new List<ReportField>
        {
            new ReportField {Name = "zone", Title = "Zone"},
            new ReportField {Name = "circle", Title = "Circle"},
            new ReportField {Name = "snd", Title = "S&D"},
            new ReportField {Name = "substation", Title = "Substation"},
        };

    var fieldList = ViewBag.FieldList != null
    ? ViewBag.FieldList as List<ReportField>
        : null;


    int oc = 5;
    var regionList = ViewBag.RegionList != null
    ? ViewBag.RegionList as List<string>
        : new List<string>
            (oc) { "", "", "", "", "" };

    if (regionList == null || regionList.Count < 1)
    {
        regionList = new List<string>
            (oc) { "", "", "", "", "" };
    }
    else if (regionList.Count < oc)
    {
        for (int rc = regionList.Count; rc < oc; rc++)
        {
            regionList.Add("");
        }
    }

}

@section Styles {

    <link href="~/lib/jquery-tablesorter/css/theme.blue.min.css" rel="stylesheet" />
    <link href="~/css/multi.checkbox.tree.css" rel="stylesheet" />
    <link href="~/css/report.style.css" rel="stylesheet" />

    <link href="~/lib/bracket/lib/perfect-scrollbar/css/perfect-scrollbar.css" rel="stylesheet" />

}


<form asp-action="AdvancedReport" asp-controller="AdvancedReport">

    <div class="row">
        <div class="col-md-1"></div>

        <div class="col-md-4">

            <fieldset style="margin-bottom: 1.0rem;">
                <legend>▣ Report Fields</legend>

                @if (fieldList != null && fieldList.Count > 0)
                {
                    <p class="tree">
                        <label for="all_fields" style="margin: 0 4px 0 0;">▣ All Fields</label>
                        <input type="checkbox" id="all_fields" class="all-checked" />
                    </p>

                    <ul id="field_list" class="tree" style=" min-height: 213px; max-height: 325px; overflow: auto;">
                        @for (int fc = 0; fc < fieldList.Count; ++fc)
                        {
                            if (fieldList[fc].Visible)
                            {
                                <li class="@fieldList[fc].GroupName">
                                    <input type="checkbox" asp-for="@fieldList[fc].Selected" data-field-name="@fieldList[fc].Name" data-field-title="@fieldList[fc].Title" data-field-group="@fieldList[fc].GroupName" class="multi-checkbox" />

                                    @{
                                        var grpName = fieldList[fc].Name;
                                        if (fieldList[fc].Name.StartsWith("group") && fieldList.Any(f => !string.IsNullOrEmpty(f.GroupName) && f.GroupName.Equals(grpName)))
                                        {
                                            @*<label asp-for="@fieldList[fc].Selected">@fieldList[fc].Title <span class="multi-item"></span></label>
                                                <ul id="field_list_@grpName" class="sub-list" style="max-height: 75px; overflow: auto; display: none;">*@
                                            <label asp-for="@fieldList[fc].Selected">@fieldList[fc].Title <span class="multi-item active"></span></label>
                                            <ul id="field_list_@grpName" class="sub-list" style="max-height: 75px; overflow: auto;">
                                                @{
                                                    var grpFieldList = fieldList.Where(f => !string.IsNullOrEmpty(f.GroupName) && f.GroupName.Equals(grpName)).ToList();
                                                    for (int gfc = 0; gfc < grpFieldList.Count; ++gfc)
                                                    {
                                                        <li class="@grpName">
                                                            <input type="checkbox" id="grpFields_@($"{grpName}_{gfc}")" data-field-name="@grpFieldList[gfc].Name" data-field-title="@grpFieldList[gfc].Title" data-field-group="@grpFieldList[gfc].GroupName" class="multi-checkbox" />
                                                            <label for="grpFields_@($"{grpName}_{gfc}")">@grpFieldList[gfc].Title</label>
                                                        </li>
                                                    }
                                                    fc += grpFieldList.Count;
                                                }
                                            </ul>
                                        }
                                        else
                                        {
                                            <label asp-for="@fieldList[fc].Selected">@fieldList[fc].Title</label>
                                        }
                                    }
                                </li>
                            }
                            else
                            {
                                <li class="@fieldList[fc].GroupName" style="display: none;">
                                    <input type="checkbox" asp-for="@fieldList[fc].Selected" data-field-name="@fieldList[fc].Name" data-field-title="@fieldList[fc].Title" data-field-group="@fieldList[fc].GroupName" class="multi-checkbox" />
                                    <label asp-for="@fieldList[fc].Selected">@fieldList[fc].Title</label>
                                </li>
                            }
                        }
                    </ul>
                }

            </fieldset>

        </div>

        <div class="col-md-6">

            <fieldset>
                <legend>▣ Report by Region</legend>

                <div id="region_level" class="ml-3">
                    @for (var i = 0; i < 4; i++)
                    {
                        @if (regionInfo?[i] == null)
                        {
                            continue;
                        }

                        <div class="custom-control-inline mr-3">
                            @if (!string.IsNullOrEmpty(regionLevel) && regionLevel.Equals(regionInfo[i].Name))
                            {
                                <input type="radio" id="@regionInfo[i].Name" name="regionLevel" value="@regionInfo[i].Name" checked />
                            }
                            else
                            {
                                <input type="radio" id="@regionInfo[i].Name" name="regionLevel" value="@regionInfo[i].Name" />
                            }
                            <label for="@regionInfo[i].Name" style="margin: .2rem;">@regionInfo[i].Title</label>
                        </div>
                    }
                </div>
            </fieldset>

            <fieldset style="margin-top: 1.0rem;">
                <legend>▣ Regional Boundaries</legend>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Zone</label>
                            <select id="ZoneCode" class="form-control" asp-items="ViewBag.ZoneList" value="@ViewBag.ZoneCode">
                                <option value="" selected="selected">----- all zone -----</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Circle</label>
                            <select id="CircleCode" class="form-control" asp-items="ViewBag.CircleList" value="@ViewBag.CircleCode">
                                <option value="" selected="selected">----- all circle -----</option>
                            </select>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">S&D</label>
                            <select id="SnDCode" class="form-control" asp-items="ViewBag.SnDList" value="@ViewBag.SnDCode">
                                <option value="" selected="selected">----- all S&D -----</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Substation</label>
                            <select id="SubstationId" class="form-control" asp-items="ViewBag.SubstationList" value="@ViewBag.SubstationCode">
                                <option value="" selected="selected">----- all substation -----</option>
                            </select>
                        </div>
                    </div>
                </div>

                @*<div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="control-label">Route</label>
                            <select id="RouteCode" class="form-control" asp-items="ViewBag.RouteList" value="@ViewBag.RouteCode">
                                <option value="" selected="selected">----- all route -----</option>
                            </select>
                        </div>
                    </div>
                </div>*@
            </fieldset>

            <div>
                <button id="btnRefresh" onclick="return false;" class="btn btn-primary float-right mt-2">Refresh</button>
            </div>

        </div>

        <div class="col-md-1"></div>
    </div>

</form>


<div class="row">
    <div class="col-md-12 pl-3 pr-3">
        <fieldset>
            <legend>▣ Report</legend>

            <div id="dataView" class="form-view">
                <button class="btn btn-primary" style="float:right; margin-top:-.8rem; margin-bottom:.2rem;" onclick="return exportToExcel('report_view', 'report-data');return false;">Export To Excel</button>
                <div id="multi-form-wrapper" class="data-view multi-form-wrapper">
                    <table id="report_view" class="table table-responsive multi-form-view table-info"></table>
                </div>
            </div>

            <div id="chartAll">
                <div id="chartBar" style="min-width: 320px; max-height: 500px; margin: 1.5rem auto"></div>

                <div id="chartPieOptionPanel" class="form-group" style="margin-top: 1rem; margin-bottom: .25rem;">
                    <label class="control-label">Pie Chart by:</label>
                    <select id="chartPieOpts" class="form-control" style="display: inline; max-width: 230px;"></select>
                </div>
                <div id="chartPie" style="min-width: 320px; max-height: 500px; margin: 0 auto"></div>
            </div>

        </fieldset>
    </div>
</div>


@section Scripts {

    @*<script src="~/lib/bootstrap/dist/js/bootstrap-select.js"></script>*@

    <script src="~/lib/jquery-tablesorter/js/tablesorter.min.js"></script>
    <script src="~/lib/jquery-tablesorter/js/tablesorter.widgets.min.js"></script>

    <script src="~/lib/highcharts/highcharts.js"></script>
    <script src="~/lib/highcharts/modules/exporting.js"></script>
    <script src="~/lib/highcharts/modules/export-data.js"></script>

    <script src="~/js/multi.checkbox.tree.js"></script>

    <script type="text/javascript">

        var rptName = "@rptName",
            url = '@Url.Action(rptAction, rptController)';

        $(function() {

            $("#btnRefresh").on("click", function() { return load_data(url); });

            $("#all_fields").on("change", function() { CheckAllMultiCheckBox(this); });

            $(".multi-checkbox").on("change", function () { CheckMultiCheckBox(this); }).trigger("change");

            OpenCloseAll($(".multi-checkbox"), false);

            load_data(url);
        });


        var regionName = "Zone",
            regionLevel,
            regionList = [],
            headerGroups = {},
            headerList = {},
            headerGroupList = {},
            basicColumns = [],
            dataColumns = [],
            chartDataPie = [];


        function export_to_excel(tableId, fileName) {
            if (!tableId) return false;

            $("#" + tableId).exportToexcel({
                containerid: tableId,
                datatype: 'table',
                fileName: fileName ? fileName : "Report Data",
                worksheetName: "PDB Report Data"
            });
            return true;
        }

        function exportToExcel(tableId, filename) {
            var dataType = 'application/vnd.ms-excel',
                tableSelect = document.getElementById(tableId),
                tableHtml = tableSelect.outerHTML.replace(/ /g, '%20'),
                downloadLink = document.createElement("a");

            // Specify file name
            filename = filename ? filename + '.xls' : 'report_data.xls';

            // Create download link element

            document.body.appendChild(downloadLink);

            if (navigator.msSaveOrOpenBlob) {
                var blob = new Blob(['\ufeff', tableHtml],
                    {
                        type: dataType
                    });
                navigator.msSaveOrOpenBlob(blob, filename);
            } else {
                // Create a link to the file
                downloadLink.href = 'data:' + dataType + ', ' + tableHtml;

                // Setting the file name
                downloadLink.download = filename;

                //triggering the function
                downloadLink.click();
            }

            return false;
        }


        function load_data(url) {

            set_basic_info();

            $("#dataView").css('display', 'none');
            $("#chartAll").css('display', 'none');

            $("#report_view").empty();
            $("#chartBar").empty();
            $("#chartPie").empty();
            $("#chartPieOpts").empty();

            if (!dataColumns || dataColumns.length < 1) {
                msg.init("warning", "Warning... . . !", "Select at least one data field... . . !! ");
            }


            $.ajax({
                type: 'POST',
                url: url,
                dataType: "json",
                data: { "regionLevel": regionLevel, "regionList": regionList },
                before: $("#busy-indicator").fadeIn(150),
                success: function(data) {
                    if (data && data.length > 0) {
                        init_data_table("#report_view", headerList, basicColumns, dataColumns, data);
                        init_chart_data(headerList, dataColumns, data);
                    } else {
                        msg.init("warning", "Warning... . . !", "Report data not available... . . !! ");
                    }
                    $("#busy-indicator").fadeOut(150);
                },
                error: function(ex, status, error) {
                    $("#busy-indicator").fadeOut(150);
                    msg.init("error", "Error... . . !", "Failed to load data. <br/>" + ex.responseText);
                },
                //complete: $("#busy-indicator").fadeOut(150),
            });

            return true;
        }

        function set_basic_info() {

            regionLevel = $("input[name='regionLevel']:checked").val();

            regionList = [];
            regionList[0] = $("#ZoneCode").val();
            regionList[1] = $("#CircleCode").val();
            regionList[2] = $("#SnDCode").val();
            regionList[3] = $("#SubstationId").val();
            //regionList[4] = $("#RouteCode").val();

            headerGroups = {};
            headerList = {};
            headerGroupList = {};
            basicColumns = [];
            dataColumns = [];

            switch (regionLevel) {
                case "zone":
                    regionName = "Zone";
                    basicColumns.push("zoneName");

                    headerList["zoneName"] = "Zone Name";
                    break;

                case "circle":
                    regionName = "Circle";
                    basicColumns.push("zoneName");
                    basicColumns.push("circleName");

                    headerList["zoneName"] = "Zone Name";
                    headerList["circleName"] = "Circle Name";
                    break;

                case "snd":
                    regionName = "S&D";
                    basicColumns.push("zoneName");
                    basicColumns.push("circleName");
                    basicColumns.push("sndName");

                    headerList["zoneName"] = "Zone Name";
                    headerList["circleName"] = "Circle Name";
                    headerList["sndName"] = "S&D Name";
                    break;

                case "substation":
                    regionName = "Substation";
                    basicColumns.push("zoneName");
                    basicColumns.push("circleName");
                    basicColumns.push("sndName");
                    basicColumns.push("substationName");

                    headerList["zoneName"] = "Zone Name";
                    headerList["circleName"] = "Circle Name";
                    headerList["sndName"] = "S&D Name";
                    headerList["substationName"] = "Sub-station Name";
                    break;

                default:
                    regionName = "Zone";
                    basicColumns.push("zoneName");
                    headerList["zoneName"] = "Zone Name";
                    break;
            }

            //$("#field_list input[type='checkbox']:checked").each(function() {
            $("#field_list input[type='checkbox']").each(function () {

                if (!$(this).prop("checked") && !$(this).prop("indeterminate"))
                    return;

                var fldName = $(this).attr("data-field-name"),
                    fldTitle = $(this).attr("data-field-title"),
                    fldGroup = $(this).attr("data-field-group");

                if (fldName.indexOf('group') === 0) {
                    headerGroups[fldName] = {};
                    headerList[fldName] = fldTitle;
                    return;
                } else if (fldGroup) {
                    if (!headerGroups[fldGroup]) {
                        headerGroups[fldGroup] = {};
                    }

                    headerGroups[fldGroup][fldName] = fldTitle;
                }

                dataColumns.push(fldName);
                headerList[fldName] = fldTitle;
                headerGroupList[fldName] = headerList[fldGroup] ? headerList[fldGroup] : "";
            });
        }

        function init_data_table(selector, headerList, basicColumns, dataColumns, data) {

            $(selector).empty();

            if (!dataColumns || !data || dataColumns.length < 1 || data.length < 1) {
                $("#dataView").css('display', 'none');
                return;
            }
            $("#dataView").css('display', '');

            var headRow$ = $("<tr/>"),
                totalRow$ = $("<tr/>"),
                tbody$ = $("<tbody/>"),
                hi = 0,
                hwr = Math.floor((100 / ((basicColumns.length * 1.5) + dataColumns.length)) * 1000) / 1000;

            //** Table Header **//
            if (headerGroups.length < 1) {
                headRow$.append($("<th/>").css("width", '25px').html("Sl. No."));
                $.each(headerList,
                    function(headerNam, headerTxt) {
                        var hw = hi++ < basicColumns.length ? hwr * 1.5 : hwr;
                        headRow$.append($("<th/>").css("width", hw + '%').html(headerTxt));
                    });
                $(selector).append($("<thead/>").append(headRow$));
            } else {
                var gfc = 0,
                    headerSubList = {},
                    headRowSub$ = $("<tr/>");

                $.each(headerGroups, function(groupNam, groupFields) { gfc += Object.keys(groupFields).length - 1; });

                hwr = Math.floor((100 / ((basicColumns.length * 1.5) + dataColumns.length + gfc + 0.333)) * 1000) /
                    1000;


                headRow$.append($("<th/>")
                    .attr("rowSpan", 2).css({ "width": (hwr * 0.333) + '%', "min-width": '25px' })
                    .html("Sl. No."));

                $.each(headerList,
                    function(headerNam, headerTxt) {
                        if (headerSubList[headerNam]) {
                            //headerList[headerNam] += ' ' + rptName;
                            //headerList[headerNam] += ' ' + headerGroupList[headerNam];
                            headerList[headerNam] = headerGroupList[headerNam] ? headerGroupList[headerNam] + ' (' + headerList[headerNam] + ')' : headerList[headerNam];
                            return;
                        }

                        var gwfc = 0,
                            hw = hi++ < basicColumns.length ? hwr * 1.5 : hwr;

                        if (headerNam.indexOf('group') === 0 && headerGroups[headerNam]) {
                            $.each(headerGroups[headerNam],
                                function(headerSubNam, headerSubTxt) {
                                    gwfc++;
                                    headRowSub$.append($("<th/>").css("width", hw + '%').html(headerSubTxt));
                                    headerSubList[headerSubNam] = headerSubTxt;
                                    //delete headerList[headerSubNam];
                                });

                            headRow$.append($("<th/>")
                                .attr("colSpan", gwfc)
                                .css("width", (hw * gwfc) + '%')
                                .html(headerTxt));
                        } else {
                            headRow$.append($("<th/>")
                                .attr("rowSpan", 2).css("width", hw + '%')
                                .html(headerTxt));
                        }
                    });

                $(selector).append($("<thead/>").append(headRow$).append(headRowSub$));
            }
            //** Table Header End **//


            //** Table Body **//
            var ci = 0;
            for (var di = 0; di < data.length; di++) {
                var dataRow$ = $("<tr/>");
                if (di % 2 == 1)
                    dataRow$.attr({ "class": "alt" });

                dataRow$
                    .append($("<td/>")
                        .attr({ "style": "text-align:right; font-weight:600;" })
                        .html((di + 1) + '.'));

                for (ci = 0; ci < basicColumns.length; ci++) {
                    var basicValue = basicColumns[ci] && data[di][basicColumns[ci]] ? data[di][basicColumns[ci]] : "";
                    dataRow$.append($("<td/>").attr({ "style": "text-align:left;" }).html(basicValue));
                }

                for (ci = 0; ci < dataColumns.length; ci++) {
                    //var dataValue = dataColumns[ci] && data[di][dataColumns[ci]] ? data[di][dataColumns[ci]] : "";
                    //dataValue = Math.round(dataValue * 100) / 100;
                    var dataValue = dataColumns[ci] && data[di][dataColumns[ci]] ? data[di][dataColumns[ci]] : null;
                    dataValue = dataValue
                        ? (('' + dataValue).indexOf('/') !== -1 || dataValue === parseInt(dataValue, 10) ? dataValue : Math.round(dataValue * 100) / 100)
                        : "";
                    dataRow$.append($("<td/>").attr({ "style": "text-align:right;" }).html(dataValue));
                }
                tbody$.append(dataRow$);
            }
            $(selector).append(tbody$);
            //** Table Body End **//


            //** Table Footer/Total **//
            totalRow$.attr({ "class": "total", "style": "font-weight:bold;" });
            totalRow$.append(
                $("<td/>")
                .attr({ "colSpan": basicColumns.length + 1, "style": "text-align:right;" })
                .html("Total:")
            );
            for (ci = 0; ci < dataColumns.length; ci++) {
                var totalValue = "",
                    colName = dataColumns[ci];

                if (colName) {
                    if (colName.toLocaleLowerCase().indexOf("max") !== -1) {
                        totalValue = data.reduce((max, num) =>
                            num[colName] && (max == null || max < num[colName]) ? num[colName] : max,
                            null);
                    } else if (colName.toLocaleLowerCase().indexOf("min") !== -1) {
                        totalValue = data.reduce((min, num) =>
                            num[colName] && (min == null || min > num[colName]) ? num[colName] : min,
                            null);
                    } else if (colName.toLocaleLowerCase().indexOf("capacity") !== -1) {
                        totalValue = data.reduce((total, num) =>
                            total && num[colName] && num[colName].split('/').length > 1
                            //? Math.round((1 * total.split('/')[0] + 1 * num[colName].split('/')[0]), 2) +
                            ? (1 * total.split('/')[0] + 1 * num[colName].split('/')[0]).toFixed(2) +
                            '/' +
                            //Math.round((1 * total.split('/')[1] + 1 * num[colName].split('/')[1]), 2)
                            (1 * total.split('/')[1] + 1 * num[colName].split('/')[1]).toFixed(2)
                            : num[colName],
                            0);
                    } else {
                        totalValue = data.reduce((total, num) => total + (+num[colName] || 0), 0);
                        //totalValue = data.reduce((total, num) => total + (num[colName] && !isNaN(+num[colName]) && isFinite(num[colName]) ? +num[colName] : 0), 0);
                        //totalValue = data.reduce((total, num) => total + (num[colName] && num[colName] != "" ? num[colName] : 0), 0);
                    }
                }

                //totalValue = totalValue ? Math.round(totalValue * 100) / 100 : "";
                //totalValue = totalValue ? (totalValue === parseInt(totalValue, 10) ? totalValue : Math.round(totalValue * 100) / 100) : "";
                totalValue = totalValue
                    ? (('' + totalValue).indexOf('/') !== -1 || totalValue === parseInt(totalValue, 10) ? totalValue : (1 * totalValue).toFixed(2))
                    : "";
                totalRow$.append($("<td/>").attr({ "style": "text-align:right;" }).html(totalValue));
            }
            $(selector).append($("<tfoot/>").append(totalRow$));
            //** Table Footer/Total End **//


            //** Set/Re-set Table Sorter End **//
            $(selector)
                .tablesorter({
                    usNumberFormat: true,
                    theme: 'blue',
                    widgets: ['zebra', 'columns'],
                    //widgetZebra: { css: ["normal-row", "alt-row"] },
                    //widgetOptions: {
                    //    zebra: ['even', 'odd']  // zebra widget alternating row class names
                    //},
                    //sortList: [], //[[0, 0], [1, 0]],
                    //sortReset: true,
                    //sortRestart: true,
                })
                .trigger("updateAll")
                .trigger("sortReset");
            //** Set/Re-set Table Sorter End **//
        }

        function init_chart_data(headers, chartColumns, rawData) {

            $("#chartBar").empty();
            $("#chartPie").empty();
            $("#chartPieOpts").empty();

            if (!chartColumns || !rawData || chartColumns.length < 1 || rawData.length < 1) {
                $("#chartAll").css('display', 'none');
                return;
            }
            $("#chartAll").css('display', '');


            var chartTitle = regionName + " wise " + rptName + " Report",
                chartSubTitle = "Source: bpdb_app.com",
                chartCategories = [],
                chartDataBar = [],
                barYAxises = [],
                barData = [],
                pieData = [],
                yAxisIndex = [],
                barYAxisLeft = false,
                ci = 0;

            for (ci = 0; ci < chartColumns.length; ci++) {
                barData[chartColumns[ci]] = [];
                pieData[chartColumns[ci]] = [];
            }

            for (var di = 0; di < rawData.length; di++) {
                chartCategories.push(rawData[di][regionLevel + "Name"]);

                for (ci = 0; ci < chartColumns.length; ci++) {
                    var cellValue = rawData[di][chartColumns[ci]];
                    if (!cellValue || cellValue == null) {
                        cellValue = 0;
                    } else if (chartColumns[ci].toLocaleLowerCase().indexOf("capacity") !== -1) {
                        cellValue = cellValue.split('/')[0];
                    }

                    cellValue = 1 * cellValue;

                    barData[chartColumns[ci]].push(cellValue);

                    pieData[chartColumns[ci]].push({
                        name: rawData[di][regionLevel + "Name"],
                        y: cellValue
                    });
                }
            }

            chartDataPie = [];
            $("#chartPieOpts").empty();

            for (ci = 0; ci < chartColumns.length; ci++) {

                var dataName = headers[[chartColumns[ci]]],
                    colData = {
                        name: dataName,
                        data: barData[chartColumns[ci]],
                        type: 'column'
                    },
                    pisData = {
                        title: dataName,
                        series: [
                            {
                                name: dataName,
                                colorByPoint: true,
                                data: pieData[chartColumns[ci]]
                            }
                        ],
                    };

                $("<option />").val(ci).html(dataName)
                    .appendTo($("#chartPieOpts"));


                if (chartColumns[ci].toLocaleLowerCase().indexOf("length") !== -1) {
                    if (yAxisIndex[1] == undefined) {
                        yAxisIndex[1] = yAxisIndex[0] == undefined
                            ? (yAxisIndex[2] == undefined ? 0 : 1)
                            : (yAxisIndex[2] == undefined ? 1 : 2);

                        barYAxises.push({ // Secondary yAxis
                            gridLineWidth: 1,
                            title: {
                                text: 'Length',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            labels: {
                                format: '{value:,.0f} (Km)',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            opposite: barYAxisLeft
                        });

                        barYAxisLeft = true;
                    }

                    colData.yAxis = yAxisIndex[1];
                    colData.tooltip = {
                        headerFormat:
                            '<span style="width:100%; text-align:center; font-size:13px; font-weight:600; color:#15a;">{point.key}</span><table>',
                        pointFormat:
                            '<tr><td><span style="display:block; width:10px; height:10px; border-radius:10px; background-color:{series.color}"></span></td>' +
                                '<td style="color:{series.color}">{series.name}: </td>' +
                                '<td style="padding-left:8px; text-align:right"><b>{point.y:,.0f}</b></td><td>(Km)</td></tr>',
                        footerFormat: '</table>',
                        valueSuffix: ' (Km)'
                    }

                    pisData.pointFormat =
                        '<span style="color:{point.color}">{series.name}</span>: {point.y:,.0f}Km (<b>{point.percentage:.2f}%</b>)';
                    pisData.plotFormat = '{point.name}: {point.y:,.0f}Km (<b>{point.percentage:.1f}%</b>)';

                } else if (chartColumns[ci].toLocaleLowerCase().indexOf("capacity") !== -1) {
                    if (yAxisIndex[1] == undefined) {
                        yAxisIndex[1] = yAxisIndex[0] == undefined
                            ? (yAxisIndex[2] == undefined ? 0 : 1)
                            : (yAxisIndex[2] == undefined ? 1 : 2);

                        barYAxises.push({ // Secondary yAxis
                            gridLineWidth: 1,
                            title: {
                                text: 'Capacity',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            labels: {
                                format: '{value:,.1f} (MVA)',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            opposite: barYAxisLeft
                        });

                        barYAxisLeft = true;
                    }

                    colData.yAxis = yAxisIndex[1];
                    colData.tooltip = {
                        headerFormat:
                            '<span style="width:100%; text-align:center; font-size:13px; font-weight:600; color:#15a;">{point.key}</span><table>',
                        pointFormat:
                            '<tr><td><span style="display:block; width:10px; height:10px; border-radius:10px; background-color:{series.color}"></span></td>' +
                                '<td style="color:{series.color}">{series.name}: </td>' +
                                '<td style="padding-left:8px; text-align:right"><b>{point.y:,.1f}</b></td><td>(MVA)</td></tr>',
                        footerFormat: '</table>',
                        valueSuffix: ' (MVA)'
                    }

                    pisData.pointFormat =
                        '<span style="color:{point.color}">{series.name}</span>: {point.y:,.1f}MVA (<b>{point.percentage:.2f}%</b>)';
                    pisData.plotFormat = '{point.name}: {point.y:,.1f}MVA (<b>{point.percentage:.1f}%</b>)';

                } else if (chartColumns[ci].toLocaleLowerCase().indexOf("demand") !== -1 ||
                    chartColumns[ci].toLocaleLowerCase().indexOf("load") !== -1) {

                    if (yAxisIndex[2] == undefined) {
                        yAxisIndex[2] = yAxisIndex[0] == undefined
                            ? (yAxisIndex[1] == undefined ? 0 : 1)
                            : (yAxisIndex[1] == undefined ? 1 : 2);

                        barYAxises.push({ // Tertiary yAxis
                            gridLineWidth: 1,
                            title: {
                                text: 'Demand / Load',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            labels: {
                                format: '{value:,.1f} (MW)',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            opposite: barYAxisLeft
                        });

                        barYAxisLeft = true;
                    }

                    colData.yAxis = yAxisIndex[2];
                    colData.tooltip = {
                        headerFormat:
                            '<span style="width:100%; text-align:center; font-size:13px; font-weight:600; color:#15a;">{point.key}</span><table>',
                        pointFormat:
                            '<tr><td><span style="display:block; width:10px; height:10px; border-radius:10px; background-color:{series.color}"></span></td>' +
                                '<td style="color:{series.color}">{series.name}: </td>' +
                                '<td style="padding-left:8px; text-align:right"><b>{point.y:,.1f}</b></td><td>(MW)</td></tr>',
                        footerFormat: '</table>',
                        valueSuffix: ' (MW)'
                    }

                    pisData.pointFormat =
                        '<span style="color:{point.color}">{series.name}</span>: {point.y:,.1f}MW (<b>{point.percentage:.2f}%</b>)';
                    pisData.plotFormat = '{point.name}: {point.y:,.1f}MW (<b>{point.percentage:.1f}%</b>)';
                } else {
                    if (yAxisIndex[0] == undefined) {
                        yAxisIndex[0] = yAxisIndex[1] == undefined
                            ? (yAxisIndex[2] == undefined ? 0 : 1)
                            : (yAxisIndex[2] == undefined ? 1 : 2);

                        barYAxises.push({ // Primary yAxis
                            gridLineWidth: 1,
                            title: {
                                text: 'Unit Count',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            labels: {
                                format: '{value:,.0f}',
                                style: {
                                    color: Highcharts.getOptions().colors[ci]
                                }
                            },
                            opposite: barYAxisLeft
                        });

                        barYAxisLeft = true;
                    }

                    colData.yAxis = yAxisIndex[0];
                    colData.tooltip = {
                        headerFormat:
                            '<span style="width:100%; text-align:center; font-size:13px; font-weight:600; color:#15a;">{point.key}</span><table>',
                        pointFormat:
                            '<tr><td><span style="display:block; width:10px; height:10px; border-radius:10px; background-color:{series.color}"></span></td>' +
                                '<td style="color:{series.color}">{series.name}: </td>' +
                                '<td style="padding-left:8px; text-align:right"><b>{point.y:,.0f}</b></td><td></td></tr>',
                        footerFormat: '</table>',
                        valueSuffix: ''
                    }

                    pisData.pointFormat =
                        '<span style="color:{point.color}">{series.name}</span>: {point.y:,.0f} (<b>{point.percentage:.2f}%</b>)';
                    pisData.plotFormat = '{point.name}: {point.y:,.0f} (<b>{point.percentage:.1f}%)</b>';
                }

                chartDataBar.push(colData);
                chartDataPie.push(pisData);
            }

            //[ "#F7464A", "#45BFBD", "#FDB45C", "#FEDCBA","#ABCDEF", "#DDDDDD", "#ABCABC"  ]
            Highcharts.setOptions({
                colors: [
                    '#50B534', '#F04A3D', '#8085E8', '#DDDF00', '#0C9BCE', '#70ED5D', "#ED454A", '#7CB5EC', "#FDB35C",
                    "#45BFBD", '#ED562B', '#24CBE5', '#63E573', '#F29855', '#F0ED5E', '#6AF9C5', "#FEDCBA", "#ABCDEF",
                    "#DDDDEE", "#ABCABC"
                ]
            });

            generate_bar_chart(chartTitle, chartSubTitle, chartCategories, barYAxises, chartDataBar);
            generate_pie_chart(chartTitle, chartSubTitle, chartDataPie[0]);

            return;
        }

        function generate_bar_chart(chartTitle, chartSubTitle, chartCategories, barYAxises, chartDataSeries) {

            Highcharts.chart('chartBar',
                {
                    chart: {
                        zoomType: 'xy'
                    },
                    title: {
                        text: chartTitle,
                        align: 'center'
                    },
                    subtitle: {
                        text: chartSubTitle,
                        align: 'center'
                    },
                    credits: {
                        enabled: false
                    },
                    tooltip: {
                        shared: true,
                        useHTML: true,
                        headerFormat:
                            '<span style="width:100%; text-align:center; font-size:13px; font-weight:600; color:#15a;">{point.key}</span><br/>',
                    },
                    xAxis: [
                        {
                            categories: chartCategories,
                            crosshair: true,
                        }
                    ],
                    yAxis: barYAxises,
                    series: chartDataSeries,
                    responsive: {
                        rules: [
                            {
                                condition: {
                                    maxWidth: 500
                                },
                                chartOptions: {
                                    legend: {
                                        floating: false,
                                        layout: 'horizontal',
                                        align: 'center',
                                        verticalAlign: 'bottom',
                                        x: 0,
                                        y: 0
                                    }
                                }
                            }
                        ]
                    },
                    exporting: {
                        enabled: true,
                        buttons: {
                            contextButton: {
                                menuItems: [
                                    'viewFullscreen', 'printChart', {
                                        separator: true
                                    }, 'downloadPNG', 'downloadJPEG', {
                                        separator: true
                                    }, 'downloadPDF', 'downloadSVG', {
                                        separator: true
                                    }, 'downloadCSV', 'downloadXLS', {
                                        textKey: 'viewData',
                                        onclick: function() {
                                            this.viewData();

                                            //** Set/Re-set Table Sorter End **//
                                            $("table[id^='highcharts-data']")
                                                .tablesorter({
                                                    usNumberFormat: true,
                                                    theme: 'blue',
                                                    widgets: ['zebra', 'columns'],
                                                    sortList: [[0, 0]],
                                                })
                                                .trigger("updateAll")
                                                .trigger("sortReset");
                                            //** Set/Re-set Table Sorter End **//
                                        }
                                    }
                                ]
                            }
                        }
                    }

                });

            return;
        }

        function generate_pie_chart(chartTitle, chartSubTitle, chartData) {

            Highcharts.chart('chartPie',
                {
                    chart: {
                        plotBackgroundColor: null,
                        plotBorderWidth: null,
                        plotShadow: false,
                        type: 'pie'
                    },
                    title: {
                        text: chartTitle,
                        align: 'center'
                    },
                    subtitle: {
                        text: chartData.title + "<br/>" + chartSubTitle,
                        align: 'center'
                    },
                    credits: {
                        enabled: false
                    },
                    tooltip: {
                        shared: true,
                        headerFormat:
                            '<span style="color:#15a; font-size:13px; font-weight:600;">{point.key}</span><br>',
                        pointFormat: chartData.pointFormat
                    },
                    plotOptions: {
                        pie: {
                            showInLegend: true,
                            dataLabels: {
                                enabled: true,
                                format: chartData.plotFormat,
                                //distance: -50,
                                style: {
                                    color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                                }
                            }
                        }
                    },
                    series: chartData.series,
                    responsive: {
                        rules: [
                            {
                                condition: {
                                    maxWidth: 500
                                },
                                chartOptions: {
                                    legend: {
                                        floating: false,
                                        layout: 'horizontal',
                                        align: 'center',
                                        verticalAlign: 'bottom',
                                        x: 0,
                                        y: 0
                                    }
                                }
                            }
                        ]
                    },
                    exporting: {
                        enabled: true,
                        buttons: {
                            contextButton: {
                                menuItems: [
                                    'viewFullscreen', 'printChart', {
                                        separator: true
                                    }, 'downloadPNG', 'downloadJPEG', {
                                        separator: true
                                    }, 'downloadPDF', 'downloadSVG', {
                                        separator: true
                                    }, 'downloadCSV', 'downloadXLS', {
                                        textKey: 'viewData',
                                        onclick: function() {
                                            this.viewData();

                                            //** Set/Re-set Table Sorter End **//
                                            $("table[id^='highcharts-data']")
                                                .tablesorter({
                                                    usNumberFormat: true,
                                                    theme: 'blue',
                                                    widgets: ['zebra', 'columns'],
                                                    sortList: [[0, 0]],
                                                })
                                                .trigger("updateAll")
                                                .trigger("sortReset");
                                            //** Set/Re-set Table Sorter End **//
                                        }
                                    }
                                ]
                            }
                        },
                    }
                });

            return;
        }


        $("#chartPieOpts").on("change",
            function() {

                var chartTitle = rptName + ' Report',
                    chartSubTitle = 'Source: bpdb_app.com',
                    pieIndex = $(this).val();

                if (chartDataPie && chartDataPie[pieIndex]) {
                    generate_pie_chart(chartTitle, chartSubTitle, chartDataPie[pieIndex]);
                } else {
                    generate_pie_chart('',
                        '',
                        {
                            title: '',
                            series: [
                                {
                                    name: '',
                                    colorByPoint: true,
                                    data: null
                                }
                            ],
                            pointFormat: '',
                            plotFormat: '',
                        });
                }

                return false;
            });


        $("#ZoneCode").on("change",
            function() {
                var zoneCode = $("#ZoneCode").val(),
                    $circle = $("#CircleCode");

                $circle.empty();
                $("#SnDCode").empty();
                $("#SubstationId").empty();
                //$("#RouteCode").empty();

                if (!zoneCode)
                    return false;

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetCircleList", "LookUpCircleInfoes")',
                    dataType: "json",
                    data: { zoneCode: zoneCode },
                    before: $("#busy-indicator").fadeIn(150),
                    success: function(circles) {
                        $circle.append(
                            '<option value="" selected="selected">----- all circle -----</option>');
                        $.each(circles,
                            function(i, circle) {
                                $("<option />").val(circle.value).html(circle.text)
                                    .appendTo($circle);
                            });
                    },
                    error: function(ex, status, error) {
                        msg.init("error",
                            "Error... . . !",
                            "Failed to load Circle list. " + ex.responseText);
                    },
                    complete: $("#busy-indicator").fadeOut(150)
                });
                return false;
            });

        $("#CircleCode").on("change",
            function() {
                var circleCode = $("#CircleCode").val(),
                    $snd = $("#SnDCode");

                $snd.empty();
                $("#SubstationId").empty();
                //$("#RouteCode").empty();

                if (!circleCode)
                    return false;

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetSnDList", "LookUpSnDInfoes")",
                    dataType: "json",
                    data: { circleCode: circleCode },
                    before: $("#busy-indicator").fadeIn(150),
                    success: function(snds) {
                        $snd.append(
                            '<option value="" selected="selected">----- all SnD -----</option>');
                        $.each(snds,
                            function(i, snd) {
                                $("<option />").val(snd.value).html(snd.text).appendTo($snd);
                            });
                    },
                    error: function(ex, status, error) {
                        msg.init("error",
                            "Error... . . !",
                            "Failed to load SnD list. " + ex.responseText);
                    },
                    complete: $("#busy-indicator").fadeOut(150)
                });
                return false;
            });

        $("#SnDCode").on("change",
            function() {
                var sndCode = $("#SnDCode").val(),
                    $substation = $("#SubstationId");

                $substation.empty();
                //$("#RouteCode").empty();

                if (!sndCode)
                    return false;

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetSubStationList", "LookUpZoneInfoes")",
                    dataType: "json",
                    data: { sndCode: sndCode },
                    before: $("#busy-indicator").fadeIn(150),
                    success: function(substations) {
                        $substation.append(
                            '<option value="" selected="selected">----- all sub-station -----</option>');
                        $.each(substations,
                            function(i, substation) {
                                $("<option />").val(substation.value).html(substation.text)
                                    .appendTo($substation);
                            });
                    },
                    error: function(ex, status, error) {
                        msg.init("error",
                            "Error... . . !",
                            "Failed to load Sub-Station list. " + ex.responseText);
                    },
                    complete: $("#busy-indicator").fadeOut(150)
                });
                return false;
            });

        @*$("#SubstationId").on("change",
            function() {
                var substationId = $("#SubstationId").val(),
                    $route = $("#RouteCode");

                $route.empty();

                if (!substationId)
                    return false;

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetRouteList", "LookUpRouteInfoes")",
                    dataType: "json",
                    data: { substationId: substationId },
                    before: $("#busy-indicator").fadeIn(150),
                    success: function(routes) {
                        $route.append(
                            '<option value="" selected="selected">----- all route -----</option>');
                        $.each(routes,
                            function(i, route) {
                                $("<option />").val(route.value).html(route.text).appendTo($route);
                            });
                    },
                    error: function(ex, status, error) {
                        msg.init("error", "Error... . . !", "Failed to load Route list. " + ex.responseText);
                    },
                    complete: $("#busy-indicator").fadeOut(150)
                });
                return false;
            });*@

    </script>

}
